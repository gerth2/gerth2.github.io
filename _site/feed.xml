<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-10-26T21:33:59-04:00</updated><id>/feed.xml</id><title type="html">Tricking Rocks to Think</title><subtitle>Thoughts on software development, leadership, and sundry other topics in the context of the FIRST robotics competition.</subtitle><entry><title type="html">Control Theory - Supplemental - Vertical Arm</title><link href="/blog_posts/2019/10/26/controls_supp_arm.html" rel="alternate" type="text/html" title="Control Theory - Supplemental - Vertical Arm" /><published>2019-10-26T10:30:00-04:00</published><updated>2019-10-26T10:30:00-04:00</updated><id>/blog_posts/2019/10/26/controls_supp_arm</id><content type="html" xml:base="/blog_posts/2019/10/26/controls_supp_arm.html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/sidenav/sidenav.css&quot; /&gt;

&lt;script src=&quot;/assets/sidenav/sidenav.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;mySidenav&quot; class=&quot;sidenav&quot; onclick=&quot;openNav()&quot;&gt;
    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;closebtn&quot; onclick=&quot;closeNav()&quot;&gt;&amp;times;&lt;/a&gt;
    &lt;b&gt;Mode: &lt;/b&gt;
    &lt;input type=&quot;radio&quot; name=&quot;ctrlModeSelect&quot; id=&quot;ctrlModeSelect_open&quot; value=&quot;open&quot; /&gt;Open Loop (Constant Voltage) 
    &lt;input type=&quot;radio&quot; name=&quot;ctrlModeSelect&quot; id=&quot;ctrlModeSelect_closed&quot; value=&quot;closed&quot; /&gt; Closed Loop (PID) &lt;br /&gt;
    &lt;div id=&quot;plots&quot;&gt;
        &lt;div id=&quot;plot5a&quot;&gt;&lt;/div&gt;
        &lt;div id=&quot;plot5b&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;user_interaction&quot; class=&quot;gainsDisplay&quot;&gt;
        &lt;div id=&quot;gains&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;visualization&quot; style=&quot;padding: 20px;&quot;&gt;
        &lt;div style=&quot;position:relative; width:500px; height:500px&quot;&gt;
            &lt;canvas id=&quot;staticCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;border:1px solid #000000; position:absolute; top:0; left:0&quot;&gt; &lt;/canvas&gt;
            &lt;canvas id=&quot;animatedCanvas&quot; width=&quot;500&quot; height=&quot;500&quot; style=&quot;background:transparent; position:absolute; top:0; left:0&quot;&gt; &lt;/canvas&gt;
        &lt;/div&gt;
        &lt;b&gt;Animation Control:&lt;/b&gt;
        &lt;input value=&quot;Play&quot; type=&quot;button&quot; onclick=&quot;playAnimation()&quot; /&gt;
        &lt;input value=&quot;Pause&quot; type=&quot;button&quot; onclick=&quot;pauseAnimation()&quot; /&gt;
        &lt;input value=&quot;Restart&quot; type=&quot;button&quot; onclick=&quot;resetAnimationToStart()&quot; /&gt;
    &lt;/div&gt;
    &lt;div id=&quot;user_interaction2&quot; class=&quot;gainsDisplay&quot;&gt;
        &lt;input value=&quot;Reset Gains&quot; type=&quot;button&quot; onclick=&quot;resetPIDF()&quot; /&gt;
    &lt;/div&gt;
    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;For context, this post came about when one of our students asked for info on tuning the other main type of system in FRC - one where a motor powers a mechanism, and the desired &lt;em&gt;position&lt;/em&gt; is the setpoint.&lt;/p&gt;

&lt;p&gt;A common example is an arm on the top of a robot. For our arm, we’ll assume it’s &lt;em&gt;vertical&lt;/em&gt; - that is to say, it lifts things from floor height to some higher elevation - Think like the 2018 game robots:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/arm_robots.png&quot; alt=&quot;arm robots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our &lt;em&gt;desired&lt;/em&gt; input (or &lt;em&gt;setpoint&lt;/em&gt;) will come in terms of &lt;em&gt;degrees above or below the horizon&lt;/em&gt;, rather than rotational velocity. As we’ll see, this leads to a different tuning methodology, but the underlying PID concept still works.&lt;/p&gt;

&lt;p&gt;This post will come in two parts. First we’ll discuss the meaning of a “good” PID tune, relevant to any PID system you are tuning. Then, we’ll go into the specifics of tuning our vertical arm.&lt;/p&gt;

&lt;h2 id=&quot;defining-good-to-get-good&quot;&gt;Defining “Good” to Get Good&lt;/h2&gt;

&lt;p&gt;We’ve thrown out a bit of terminology already related to how you judge how “good” your PID tune is.&lt;/p&gt;

&lt;p&gt;Like any good exercise in engineering, there’s terminology which refers to specific &lt;em&gt;measurements&lt;/em&gt; of goodness. Let’s take a quick step back to formalize what these actually are.&lt;/p&gt;

&lt;p&gt;Keeping with our examples so far, we’ll frame all of our discussion in terms of the &lt;em&gt;time domain step response&lt;/em&gt; of our system.&lt;/p&gt;

&lt;p&gt;All that follows in this section is just &lt;em&gt;terminology&lt;/em&gt; - specific words control systems engineers to describe physical behavior in a way that communicates meaning to others.&lt;/p&gt;

&lt;p&gt;Then again, keep in mind - terminology is important! On some grand scale of “importance” - understanding the underlying concept is probably more important, but immediately following that is the ability to communicate it to others.&lt;/p&gt;

&lt;p&gt;\soapbox.&lt;/p&gt;

&lt;h3 id=&quot;general-system-response-classifications&quot;&gt;General System Response Classifications&lt;/h3&gt;

&lt;p&gt;When tuning a system and looking at its step response, there are fundamentally three categories of system response. Systems are said to be &lt;em&gt;Overdamped&lt;/em&gt;, &lt;em&gt;Underdamped&lt;/em&gt;, or &lt;em&gt;Unstable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An &lt;em&gt;overdamped&lt;/em&gt; system will slowly approach the desired value, hopefully settling out just barely underneath the desired value. It’s generally pretty gradual, and has &lt;em&gt;no oscillation&lt;/em&gt;, and never &lt;em&gt;crosses&lt;/em&gt; or &lt;em&gt;goes above&lt;/em&gt; the desired value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_overdamped.png&quot; alt=&quot;Overdamped&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The name should make sense - if you think of friction or stiffness in the system as a “damping” force, an &lt;em&gt;overdamped&lt;/em&gt; system has &lt;em&gt;quite a bit of damping&lt;/em&gt;. Sometimes this is desired, sometimes it is not (as we’ll discuss later). But for now, just remember the association of the word with the meaning.&lt;/p&gt;

&lt;p&gt;Similarly, an &lt;em&gt;underdamped&lt;/em&gt; system will have &lt;em&gt;much less damping&lt;/em&gt;. In these systems, the actual value &lt;em&gt;overshoots&lt;/em&gt; the desired value, crossing and turning around multiple times before settling down. An underdamped system will always have some amount of oscillation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_underdamped.png&quot; alt=&quot;Underdamped&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For systems that involve a PID controller, the P gain tends to be the “knob” that pushes a system between overdamped and underdamped. Additionally, the D gain can take a system with underdamped characteristics, and make it look more overdamped.&lt;/p&gt;

&lt;p&gt;Both of these system types are &lt;em&gt;stable&lt;/em&gt; - this means that as time progresses, the actual value &lt;em&gt;converges&lt;/em&gt; toward the desired value. It’s also very possible that you might get a system which is &lt;em&gt;unstable&lt;/em&gt; - where the actual value doesn’t actually go toward the desired value. These often come in one of two flavors.&lt;/p&gt;

&lt;p&gt;The first flavor is the “it blows up from getting too big”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_unstable.png&quot; alt=&quot;unstable 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, for whatever reason, the system’s value just shoots off in one direction, never really going where we want it. In general, in cases like this, you’ll hit some mechanical or electrical limit, break something or let the magic smoke out, and have some other subteams angry at you. Definitely not recommended.&lt;/p&gt;

&lt;p&gt;The other flavor of unstable stays somewhat close to the desired value, but never “settles down”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_unstable2.png&quot; alt=&quot;unstable 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At best, this will be a robot that looks &lt;em&gt;really&lt;/em&gt; bad and uncontrollable, which means you don’t get picked in elimination rounds. More often, the motion causes parts to wear out prematurely and also break. Again, bad news bears. Also not recommended.&lt;/p&gt;

&lt;p&gt;Taking these examples: part of the definition of “good” usually involves:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;System should be stable&lt;/li&gt;
  &lt;li&gt;System ought to be slightly overdamped or slightly underdamped (depends on the situation). Having the other is less than desireable.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;quantitative-goodness-measurements&quot;&gt;Quantitative Goodness Measurements&lt;/h3&gt;

&lt;p&gt;Aside from the above &lt;em&gt;qualitative&lt;/em&gt; system classification, for stable systems, we also commonly define a few measurements of system response.&lt;/p&gt;

&lt;h3 id=&quot;rise-time--settling-time&quot;&gt;Rise Time &amp;amp; Settling Time&lt;/h3&gt;

&lt;p&gt;There are two main time-based measurements for talking about your system response.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rise time&lt;/em&gt; refers to the duration between when the desired command changes, and the first time the actual value gets to the desired value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Settling time&lt;/em&gt; refers to the duration between when the desired command changes, and when the actual values &lt;em&gt;settles down&lt;/em&gt; within some acceptable error from the desired value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_time.png&quot; alt=&quot;Rise and Settling time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overdamped systems will have a longer rise time than underdamped systems. Settling times can vary quite a bit, depending on system dynamics.&lt;/p&gt;

&lt;p&gt;In general, more powerful motors, less mass, and more P gain all help you achieve better rise time.&lt;/p&gt;

&lt;p&gt;In general, more powerful controllers with faster feedback systems and less delay help you reduce your settling time. More mass can help your system “dampen” itself out mechanically. More D gain can increase damping to a point, but will also eventually cause instability. Less mass can allow your controller’s D term to do damping more efficiently.&lt;/p&gt;

&lt;h3 id=&quot;overshoot--steady-state-error&quot;&gt;Overshoot &amp;amp; Steady State Error&lt;/h3&gt;

&lt;p&gt;There are also two value-based metrics for talking about your system response.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Overshoot&lt;/em&gt; refers to &lt;em&gt;how much&lt;/em&gt; the actual value goes past the desired value before coming back toward it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_overshoot.png&quot; alt=&quot;Overshoot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Steady State Error&lt;/em&gt; refers to &lt;em&gt;how far off&lt;/em&gt; the actual value is from the desired value after all transient behavior has died down, and the system is fully stabilized.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ctrl_ss_error.png&quot; alt=&quot;Steady State Error&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In general, decreasing P and increasing D will lower the amount of overshoot you have. Increasing the physical mass or increasing the friction of the system can also do the same thing.&lt;/p&gt;

&lt;p&gt;In general, increasing P and increasing I will decrease the amount of steady state error you have. Decreasing the mass of the system or decreasing the friction will allow I and P to do their jobs more effectively.&lt;/p&gt;

&lt;h3 id=&quot;tune-but-dont-discount-mechanical-changes&quot;&gt;Tune, but Don’t Discount Mechanical Changes&lt;/h3&gt;

&lt;p&gt;Note that if you have multiple “problems” with your tune system, you may have some conflicting requirements. For example, if your overshoot AND your steady state error are both too big, you’ll have a hard time adjusting P (as changing it makes one issue better, while making the issue worse.)&lt;/p&gt;

&lt;p&gt;It’s important to try to get your PID gains dialed in as much as you can, but also keep in mind that &lt;em&gt;some systems are really hard to control&lt;/em&gt;. You may hit a point where you can’t get it any better by adjusting gains alone, and need to think more creatively. Some of these “more creative” changes include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Adjusting the mass of the system (adding or removing weight from the actuated mechanism)&lt;/li&gt;
  &lt;li&gt;Adjusting the friction of the system (using grease or dashpots)&lt;/li&gt;
  &lt;li&gt;Changing gearbox ratios&lt;/li&gt;
  &lt;li&gt;Adding motors to the system&lt;/li&gt;
  &lt;li&gt;Adding springs or counterweights at strategic locations to add additional force&lt;/li&gt;
  &lt;li&gt;Increasing the quality of the PIDF controller system (ie, move from RIO-implemented controller (~100Hz) to onboard Talon SRX or Victor SPX (~1000Hz) controllers.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The “rule of thumb” I tend to tell my team - &lt;em&gt;If it’s impossible to control manually, with a &lt;a href=&quot;https://www.andymark.com/products/thrifty-throttle-3&quot;&gt;thrifty throttle&lt;/a&gt; and a human watching it, it will be &lt;strong&gt;very&lt;/strong&gt; hard to control with software&lt;/em&gt;. It’s definitely not an axiom, but gives mechanical and electrical teams a “stick in the mud” to understand if the thing they’ve created is anywhere in the realm of controllable.&lt;/p&gt;

&lt;h3 id=&quot;choosing-criteria&quot;&gt;Choosing Criteria&lt;/h3&gt;

&lt;p&gt;How does one pick from amongst these criteria for their specific situation? Unfortunately, it just depends. Thankfully, it’s often intuitive, or can be derived from robot design discussions. How accurate does manipulator XYZ have to be? How quickly does it need to get into position for us to meet our cycle times (and no, “fast as possible” isn’t a detailed enough answer :D ).&lt;/p&gt;

&lt;p&gt;In general, you’ll want small rise &amp;amp; settling times, minimal overshoot and no steady-state error. However, as you have seen (or will see), it’s hard to get all of these at once. Usually, achieving one will be more important than the others.&lt;/p&gt;

&lt;p&gt;For example, consider if you were controlling the temperature in your house. The temperature is currently 50 degrees F (brrrrr!!!), and you want it to be 70 degrees F. You want the temperature to get to 70 quickly, but not so quickly that it overshoots the 70 degree mark, and shoots up to 100 degrees before settling back down. That would be a waste of energy, and a longer time of you being uncomfortable. An underdamped controller is generally desired in cases like this, with enough I gain to cancel out steady-state errors.&lt;/p&gt;

&lt;p&gt;In contrast, take our shooter wheel example from last time. Generally, you’ll want to spin the wheel up to a stable launch speed as quickly as possible (assuming this is a component in your robot’s overall cycle time). This means aggressive P - a bit of overshoot isn’t horrible, nor is a few RPM of steady state error.&lt;/p&gt;

&lt;p&gt;Finally, the example we’re about to see - consider if you are controlling the angular position of an arm - accurate positioning of the end of the arm (within fractions of a degree) is probably desired. Speed is important, but not at the cost of getting the gamepiece at the wrong place. Overshoot may also be a concern, as the arm has physical limits of travel - too much overshoot may be mechanically damaging.&lt;/p&gt;

&lt;p&gt;In conclusion, the requirements for what constitutes a “good” PID tune are derived from your requirements for what makes a good robot. Which, of course, depends on your robot, and the year’s game. It all just depends.&lt;/p&gt;

&lt;h3 id=&quot;what-in-general-means&quot;&gt;What “In General” Means&lt;/h3&gt;

&lt;p&gt;One final note (I promise). I’ve used the weasel-word phrase “in general” a lot. Here, I mean it to imply “for most of the FRC-encountered situations”.&lt;/p&gt;

&lt;p&gt;Software bugs, weird mechanisms, measurement delay, very-sensitive systems, and a whole host of other things can make the assumptions laid out here invalid. For that reason, it’s very hard for me to ever say “Always”.&lt;/p&gt;

&lt;p&gt;Keep this in mind while tuning. These things &lt;em&gt;do&lt;/em&gt; work. They’re out in the world everywhere. If you’re struggling to make it work in your situation, there &lt;em&gt;has to be a reason why&lt;/em&gt;. Maybe it’s because you have a software bug. Maybe it’s because the physical manipulator is very exotic.&lt;/p&gt;

&lt;p&gt;The best I can tell you - approach the problem systematically.&lt;/p&gt;

&lt;p&gt;Verify the assumptions of your software - have proof it operates as you expect.&lt;/p&gt;

&lt;p&gt;Compare your design to those used successfully by other teams. Where are they the same, and where are they different? Do those differences matter? Do the math to prove it!&lt;/p&gt;

&lt;p&gt;Finally, pull in subject-matter experts - mentors, industry professionals, more experienced students, &lt;a href=&quot;https://www.chiefdelphi.com&quot;&gt;chiefdelphi&lt;/a&gt;, or even myself (see the email at the bottom).&lt;/p&gt;

&lt;h2 id=&quot;arm-system-model&quot;&gt;Arm System Model&lt;/h2&gt;

&lt;p&gt;On to the actual arm!&lt;/p&gt;

&lt;h4 id=&quot;basic-description&quot;&gt;Basic Description&lt;/h4&gt;

&lt;p&gt;Ya ever heard of &lt;a href=&quot;https://www.food.com/recipe/chicken-on-a-stick-177166#activity-feed&quot;&gt;chicken on a stick?&lt;/a&gt; Well, we’re gonna model the arm as &lt;em&gt;mass on a stick&lt;/em&gt;. Just some weight (from a claw or intake motors or similar), suspended on the end of a long, thin rod (which weighs relatively little).&lt;/p&gt;

&lt;p&gt;The arm is constrained to rotate through just one plane, going up and down powered by a motor at the “shoulder”. The motor is of course run through a (fairly-high reduction) gearbox. When you run the motor in one direction, the arm goes up. In the other direction, it goes down.&lt;/p&gt;

&lt;p&gt;Additionally, our arm will be &lt;em&gt;vertical&lt;/em&gt; - the plane it travels within is parallel to the direction gravity pulls on the arm. This means that when the arm is stretched “straight out” in front of the robot, gravity will be pulling it down toward the ground.&lt;/p&gt;

&lt;h4 id=&quot;mathematical-description&quot;&gt;Mathematical Description&lt;/h4&gt;

&lt;p&gt;Since this is a bit abbreviated, I won’t go through the full derivation of this system. However, it’s not too bad to build up an equation from the bits and pieces we already have.&lt;/p&gt;

&lt;p&gt;To do so, we’ll use the &lt;em&gt;shoulder joint&lt;/em&gt; of the arm as our origin and reference point. All torques, speeds, accelerations, and angular positions will be measured &lt;em&gt;about&lt;/em&gt; this point. Additionally, we’ll use kinda-standard angle notation, such that &lt;script type=&quot;math/tex&quot;&gt;0^\circ&lt;/script&gt; is pointed “straight out in front” of the robot, &lt;script type=&quot;math/tex&quot;&gt;90^\circ&lt;/script&gt; is straight up in the air, and &lt;script type=&quot;math/tex&quot;&gt;-90^\circ&lt;/script&gt; is pointed at the ground.&lt;/p&gt;

&lt;p&gt;Overall, the acceleration of the arm is determined from the following forces acting on it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;T_{m}&lt;/script&gt; - The &lt;em&gt;motor&lt;/em&gt; (via a gearbox), which in turn in impacted by an &lt;em&gt;applied voltage&lt;/em&gt; which we can control as we please.&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;T_{f}&lt;/script&gt; - Friction (works against rotational motion of the arm)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;T_{g}&lt;/script&gt; - Gravity (pulls the arm toward the &lt;script type=&quot;math/tex&quot;&gt;-90^\circ&lt;/script&gt; point)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using Newton’s second law for rotational forces, we can assemble our basic equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;T_{m}(t) + T_{f}(t) + T_{g}(t) = I \alpha(t)&lt;/script&gt;

&lt;p&gt;And expanding each term, we arrive at the monster:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{N_{out}}{N_{in}} \frac{K_T}{R} \left( V_{in}(t) - \frac{N_{in}}{N_{out}} K_{V} \omega(t) \right) - K_{f} \omega(t) - m g \cos(\theta(t)) = m r^{2} \alpha(t)&lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{N_{out}}{N_{in}}&lt;/script&gt; is the gearbox ratio&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;K_T&lt;/script&gt; is the motor torque constant&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;V_{in}(t)&lt;/script&gt; is the motor input voltage&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;K_V&lt;/script&gt; is the motor voltage constant&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\theta(t)&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;\alpha(t)&lt;/script&gt; are the angular position, speed, and acceleration of the shoulder joint shaft.&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;K_{f}&lt;/script&gt; is the effective kinetic rotational friction constant of the system&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is the mass of the end-effector on the tip of the arm&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt; is the gravitational constant (&lt;script type=&quot;math/tex&quot;&gt;9.81 m/s^2&lt;/script&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; is the length of the arm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice the minus sign on the frictional term is chosen to ensure the frictional torque &lt;em&gt;opposes&lt;/em&gt; motion, and the gravitational torque always &lt;em&gt;pushes toward &lt;script type=&quot;math/tex&quot;&gt;-90^\circ&lt;/script&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Re-arranging to group terms, pulling constants into nice buckets, substituting continuous time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; for discrete samples &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha[n] = C_1 V_{in}[n] - C_2 \omega[n] - C_3 cos(\theta[n])&lt;/script&gt;

&lt;p&gt;With&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_1 = \frac{N_{out} K_T}{mr^2N_{in}R}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_2 = \frac{K_T K_V}{mr^2R} + \frac{K_f}{mr^2}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_3 = \frac{g}{r^2}&lt;/script&gt;

&lt;p&gt;Since acceleration is the derivative of velocity, we can approximate &lt;script type=&quot;math/tex&quot;&gt;\alpha[n]&lt;/script&gt; in terms of &lt;script type=&quot;math/tex&quot;&gt;\omega[n]&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha[n] = \frac{\omega[n] - \omega[n-1]}{T_s}&lt;/script&gt;

&lt;p&gt;And similarly, since velocity is the derivative of position, we can approximate &lt;script type=&quot;math/tex&quot;&gt;\omega[n]&lt;/script&gt; in terms of &lt;script type=&quot;math/tex&quot;&gt;\theta[n]&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega[n] = \frac{\theta[n] - \theta[n-1]}{T_s}&lt;/script&gt;

&lt;p&gt;Math sticklers, avert your eyes for a paragraph.&lt;/p&gt;

&lt;p&gt;If you were to substitute these into our equation, you’d end up with an equation that &lt;em&gt;stinks&lt;/em&gt; to solve symbolically for &lt;script type=&quot;math/tex&quot;&gt;\theta[n]&lt;/script&gt;, because &lt;script type=&quot;math/tex&quot;&gt;\theta[n]&lt;/script&gt; appears both inside and outside a &lt;script type=&quot;math/tex&quot;&gt;\cos()&lt;/script&gt; function. Maybe there’s a good way to solve it. I don’t know offhand. What I do know is I can cheat a bit and use some one-sample-delayed assumptions that, for sufficiently small &lt;script type=&quot;math/tex&quot;&gt;T_s&lt;/script&gt;, make our equation much more workable. There’s enough sensor delay in our feedback (relative to &lt;script type=&quot;math/tex&quot;&gt;T_s&lt;/script&gt;) that I honestly don’t think it will mess up the solution too much. I think. Let’s just go with it, Wild West style. Shoot math from the hip. That’s how we roll. I guess. Remember, all models are wrong.&lt;/p&gt;

&lt;p&gt;Ok, math people, come back, and don’t try to check my work.&lt;/p&gt;

&lt;p&gt;The final equation for position, in terms of things we know already or can control, is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta[n] = \frac{T_s^2 C_1 V_{in}[n] - T_s^2 C_3 \cos(\theta[n-1]) + \theta[n-1]\left( T_s C_2 + 2 \right) - \theta[n-2]}{T_s C_2 + 1}&lt;/script&gt;

&lt;p&gt;If that doesn’t make my eyes ooze out of their sockets, I don’t know what will.&lt;/p&gt;

&lt;h2 id=&quot;step-response&quot;&gt;Step Response&lt;/h2&gt;

&lt;p&gt;We’re definitely going to want to play around with this guy to get some intuition for how it works. We’ve got another sidebar with our system behavior in it.&lt;/p&gt;

&lt;p&gt;&lt;input value=&quot;Open that sidebar now!&quot; type=&quot;button&quot; onclick=&quot;openNav()&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since that equation is ever so intuitive, let’s see what happens when we put our arm at horizontal, then let the system rip with some constant voltage applied.&lt;/p&gt;

&lt;div class=&quot;slidecontainer&quot;&gt;
    Voltage Applied:
    &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;1200&quot; value=&quot;100&quot; class=&quot;slider&quot; id=&quot;voltageSlider&quot; /&gt;
    &lt;div id=&quot;voltsDisplay&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Start by moving this slider to zero volts - no motor command at all. You should notice the arm fall down to the &lt;script type=&quot;math/tex&quot;&gt;-90^\circ&lt;/script&gt; position and stay there. It swings back and forth a bit till friction stops it.&lt;/p&gt;

&lt;p&gt;This should totally make sense - in this configuration, the arm is like a pendulum. Pendulums oscillate due to the pull of gravity.&lt;/p&gt;

&lt;p&gt;Try bumping up the voltage by a volt or two. You should also see something logical - the motor causes the arm to settle out at some position “higher up” than before, as the motor fights gravity.&lt;/p&gt;

&lt;p&gt;Eventually if you give enough voltage, your arm can swing all the way around in a circle. Wheeee! This is what, in my business, we call &lt;em&gt;unstable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Simply applying a constant voltage doesn’t work all that well at getting the arm to a desired position. Clearly, for any position, our controller will have to find that nice happy voltage at which the arm maintains the proper position. It may also have to adjust the voltage a bit higher at first to get it to the setpoint.&lt;/p&gt;

&lt;h2 id=&quot;controller-setup&quot;&gt;Controller Setup&lt;/h2&gt;

&lt;p&gt;We’re gonna cut straight to using PID this time. But no F. F isn’t exactly useful, or not as we used it while doing the &lt;a href=&quot;/blog_posts/2019/10/19/tuning_pid.html&quot;&gt;shooter wheel exercises&lt;/a&gt;. The motor command required isn’t exactly proportional to the angle (think, for example, 0 degrees - definitely more than zero motor command required to keep the arm there). We’ll wrap back to this later, but for now we’ll skip F.&lt;/p&gt;

&lt;h3 id=&quot;first-pass-at-tuning&quot;&gt;First Pass at Tuning&lt;/h3&gt;

&lt;p&gt;Just as before, use the same doubling/halving technique to get close, then tweak once close.&lt;/p&gt;

&lt;p&gt;Start by tuning P, just to where oscillations &lt;em&gt;around the setpoint&lt;/em&gt; start to happen.&lt;/p&gt;

&lt;p&gt;First do the big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double P&quot; type=&quot;button&quot; onclick=&quot;adjustP(2.0)&quot; /&gt;
&lt;input value=&quot;Half P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0.5)&quot; /&gt;
&lt;br /&gt;
Then do smaller tweaks when you get closer:
&lt;br /&gt;
&lt;input value=&quot;Bump Up P&quot; type=&quot;button&quot; onclick=&quot;adjustP(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0.95)&quot; /&gt;
&lt;br /&gt;
Or, if you get completely lost, start over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 65.0 is a good value for P&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then tune D to get rid of the oscillations:&lt;/p&gt;

&lt;p&gt;Big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double D&quot; type=&quot;button&quot; onclick=&quot;adjustD(2.0)&quot; /&gt;
&lt;input value=&quot;Half D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0.5)&quot; /&gt;
&lt;br /&gt;
Small Tweaks:
&lt;br /&gt;
&lt;input value=&quot;Bump Up D&quot; type=&quot;button&quot; onclick=&quot;adjustD(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0.95)&quot; /&gt;
&lt;br /&gt;
Start Over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 6.87 is a good value for D&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, you’ll notice we do have some steady state error. Tune I to get rid of that:&lt;/p&gt;

&lt;p&gt;Big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double I&quot; type=&quot;button&quot; onclick=&quot;adjustI(2.0)&quot; /&gt;
&lt;input value=&quot;Half I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0.5)&quot; /&gt;
&lt;br /&gt;
Small Tweaks:
&lt;br /&gt;
&lt;input value=&quot;Bump Up I&quot; type=&quot;button&quot; onclick=&quot;adjustI(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0.95)&quot; /&gt;
&lt;br /&gt;
Start Over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 13.1 is a good value for I&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;varying-the-setpoint&quot;&gt;Varying the Setpoint&lt;/h3&gt;

&lt;p&gt;As before, we’ll want to vary the setpoint to ensure our controller can achieve a range of outputs equally well.&lt;/p&gt;

&lt;div class=&quot;slidecontainer&quot;&gt;
    Setpoint:
    &lt;input type=&quot;range&quot; min=&quot;-180&quot; max=&quot;180&quot; value=&quot;-45&quot; class=&quot;slider&quot; id=&quot;setpointSlider&quot; /&gt;
    &lt;br /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As you move the setpoint around, even with well-chosen PID gains, you’ll notice the &lt;em&gt;overshoot&lt;/em&gt; and oscillation vary quite a bit, depending on the setpoint. More simply, the gains chosen do not work &lt;em&gt;equally&lt;/em&gt; well across all setpoints.&lt;/p&gt;

&lt;p&gt;This should be expected. Our system is non-linear (due to the presence of the &lt;script type=&quot;math/tex&quot;&gt;\cos(\theta[n-1])&lt;/script&gt; term), but the PID algorithm is fundamentally designed to work around &lt;em&gt;linear&lt;/em&gt; systems. It can get close, but it’s honestly not the best answer in this case.&lt;/p&gt;

&lt;p&gt;What to do? One option is to pick the point at which you want to hold the arm, and keep it there. You pick PID gains that work well for &lt;script type=&quot;math/tex&quot;&gt;\theta_{des}&lt;/script&gt;, and ignore other values. Especially if your arm has a very limited range of motion, or always goes between the same two points, this isn’t a bad option at all.&lt;/p&gt;

&lt;p&gt;Another method is to add a (slightly) complex feed-forward term into our PID controller to &lt;em&gt;compensate&lt;/em&gt; for the nonlinearity. This is what we will attempt to do now.&lt;/p&gt;

&lt;h3 id=&quot;removing-non-linearity&quot;&gt;Removing Non-Linearity&lt;/h3&gt;

&lt;p&gt;Since we know our system, we can use a &lt;em&gt;more complex&lt;/em&gt; F term to remove the nonlinearity. We get clever to eliminate gravity.&lt;/p&gt;

&lt;p&gt;The key fact: Gravity is proportional to &lt;script type=&quot;math/tex&quot;&gt;cos(\theta_{act}(t))&lt;/script&gt;. So, we will make an F term which is also proportional to &lt;script type=&quot;math/tex&quot;&gt;cos(\theta_{act}(t))&lt;/script&gt;. When properly tuned, we will effectively cancel-out the effects of gravity on the system.&lt;/p&gt;

&lt;p&gt;We will modify our PID equation to add the extra term:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{PID}(t) = K_{P} \theta_{err}(t) + K_{I} \int_{x=0}^{x=t}\theta_{err}(x)dx + K_{D} \frac{d\theta_{err}}{dt} + K_{F} \cos(\theta_{act}(t))&lt;/script&gt;

&lt;p&gt;As a quick note on software - this technique is usually referred to as “arbitrary feed-forward”, and is supported by both the Talon SRX and Spark MAX speed controllers.&lt;/p&gt;

&lt;h3 id=&quot;re-tuning&quot;&gt;Re-tuning&lt;/h3&gt;

&lt;p&gt;Need to start again, because all our gains no longer should be accounting for gravity.&lt;/p&gt;

&lt;p&gt;&lt;input value=&quot;Reset Gains&quot; type=&quot;button&quot; onclick=&quot;resetPIDF()&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we’ll start tuning with F.&lt;/p&gt;

&lt;p&gt;F can be calculated as the voltage required to hold the arm level (easy to empirically determine on a robot).&lt;/p&gt;

&lt;p&gt;Since our arm starts at 0 degrees anyway (at least in this simulation), you’ll want to just keep bumping F up until the arm &lt;em&gt;stays&lt;/em&gt; at zero degrees, even with all feedback (P, I, D) gains at zero. Note that on this system, F gets &lt;em&gt;really&lt;/em&gt; sensitive around this point - the bump ups and downs will be quite small.&lt;/p&gt;

&lt;p&gt;Again, the goal is to start the arm at 0 degrees, and tweak F until the arm &lt;em&gt;holds&lt;/em&gt; its position &lt;em&gt;at zero degrees&lt;/em&gt; (not the setpoint).&lt;/p&gt;

&lt;p&gt;Use the double/half/tweak methodology first.
&lt;br /&gt;
&lt;input value=&quot;Double F&quot; type=&quot;button&quot; onclick=&quot;adjustF(2.0)&quot; /&gt;
&lt;input value=&quot;Half F&quot; type=&quot;button&quot; onclick=&quot;adjustF(0.5)&quot; /&gt;
&lt;br /&gt;
Then do smaller tweaks when you get closer. This will take a lot of clicking.
&lt;br /&gt;
&lt;input value=&quot;Bump Up F&quot; type=&quot;button&quot; onclick=&quot;adjustF(1.005)&quot; /&gt;
&lt;input value=&quot;Bump Down F&quot; type=&quot;button&quot; onclick=&quot;adjustF(0.995)&quot; /&gt;
&lt;br /&gt;
Or, if you get completely lost, start over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out F&quot; type=&quot;button&quot; onclick=&quot;adjustF(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 5.91 is a good value for F&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next we’ll move back to tuning P, again just to where oscillations start to happen. As we move P away from zero, the arm will &lt;em&gt;now&lt;/em&gt; start to move toward the setpoint.&lt;/p&gt;

&lt;p&gt;First do the big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double P&quot; type=&quot;button&quot; onclick=&quot;adjustP(2.0)&quot; /&gt;
&lt;input value=&quot;Half P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0.5)&quot; /&gt;
&lt;br /&gt;
Then do smaller tweaks when you get closer:
&lt;br /&gt;
&lt;input value=&quot;Bump Up P&quot; type=&quot;button&quot; onclick=&quot;adjustP(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0.95)&quot; /&gt;
&lt;br /&gt;
Or, if you get completely lost, start over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 32.76 is a good value for P&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then tune D to get rid of the oscillations:&lt;/p&gt;

&lt;p&gt;Big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double D&quot; type=&quot;button&quot; onclick=&quot;adjustD(2.0)&quot; /&gt;
&lt;input value=&quot;Half D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0.5)&quot; /&gt;
&lt;br /&gt;
Small Tweaks:
&lt;br /&gt;
&lt;input value=&quot;Bump Up D&quot; type=&quot;button&quot; onclick=&quot;adjustD(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0.95)&quot; /&gt;
&lt;br /&gt;
Start Over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 3.27 is a good value for D&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, there may be a bit of steady state error left. If so, tune I to get rid of that:&lt;/p&gt;

&lt;p&gt;Big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double I&quot; type=&quot;button&quot; onclick=&quot;adjustI(2.0)&quot; /&gt;
&lt;input value=&quot;Half I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0.5)&quot; /&gt;
&lt;br /&gt;
Small Tweaks:
&lt;br /&gt;
&lt;input value=&quot;Bump Up I&quot; type=&quot;button&quot; onclick=&quot;adjustI(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0.95)&quot; /&gt;
&lt;br /&gt;
Start Over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: 0.0 is a good value for I, at least as I tuned it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And, again, try varying the setpoint across the range of angles desired:&lt;/p&gt;

&lt;div class=&quot;slidecontainer&quot;&gt;
    Setpoint:
    &lt;input type=&quot;range&quot; min=&quot;-180&quot; max=&quot;180&quot; value=&quot;-45&quot; class=&quot;slider&quot; id=&quot;setpointSlider2&quot; /&gt;
    &lt;br /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This time, you should observe &lt;em&gt;much less variance&lt;/em&gt; in overshoot and convergence time across the range of possible setpoints. In general, your arm should be working much much better now.&lt;/p&gt;

&lt;h2 id=&quot;we-just-did-plant-model-inversion&quot;&gt;We Just Did Plant Model Inversion&lt;/h2&gt;

&lt;p&gt;It should be noted that our “arbitrary feed forward” term we used here is a simplified form of &lt;a href=&quot;https://faculty.washington.edu/devasia/Talks/Inversion_Theory.pdf&quot;&gt;plant model inversion&lt;/a&gt;. It’s actually the same as the shooter wheel’s feed forward as well for steady state. The basic idea behind all of it is that if you can get a mathematical description of how your plant model works, you can inject the &lt;em&gt;inverse&lt;/em&gt; of that knowledge into your controller to help account for the system dynamics that a plain old PID controller doesn’t need.&lt;/p&gt;

&lt;p&gt;With knowledge of these plant dynamics, the only thing left for the PID closed-loop portion to do is compensate for transient, external loads, or any behavior not accounted for in the inverted plant model. This is nice for two reasons.&lt;/p&gt;

&lt;p&gt;For one, it means that your plant model doesn’t have to be perfect. In fact, &lt;em&gt;anything&lt;/em&gt; (even a constant value) is better than what you have without it (which is literally an assumption that the plant does nothing).&lt;/p&gt;

&lt;p&gt;For two, it means the PID gains don’t have to be as big as before, having less behavior to “fight” against. This implies they can be more aggressive toward getting your manipulator to the setpoint angle.&lt;/p&gt;

&lt;p&gt;But - all these advantages can only be achieved if you can build up a reasonable mathematical model of how your &lt;em&gt;real world&lt;/em&gt; system works.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this gives a good demonstration of how to tune PID in another common situation! Play around with these things and see what you can see. The advantage of these online simulators is the instantaneous feedback - you can clearly see what each adjustment is doing in nearly-real time. Such a luxury is harder to come by on a physical system. Plus, astable calibrations (like ones that cause the robot arm to start flying in circles) can be damaging. For this reason, doing the learning in a simulated environment is definitely a good idea. Hone your skills of tuning here, and then take them to the real world robot later.&lt;/p&gt;

&lt;script src=&quot;/assets/js/pidArm.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">&amp;times; Mode: Open Loop (Constant Voltage) Closed Loop (PID) Animation Control:</summary></entry><entry><title type="html">Control Theory - Tuning PID</title><link href="/blog_posts/2019/10/19/tuning_pid.html" rel="alternate" type="text/html" title="Control Theory - Tuning PID" /><published>2019-10-19T10:30:00-04:00</published><updated>2019-10-19T10:30:00-04:00</updated><id>/blog_posts/2019/10/19/tuning_pid</id><content type="html" xml:base="/blog_posts/2019/10/19/tuning_pid.html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/sidenav/sidenav.css&quot; /&gt;

&lt;script src=&quot;/assets/sidenav/sidenav.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;mySidenav&quot; class=&quot;sidenav&quot; onclick=&quot;openNav()&quot;&gt;
    &lt;a href=&quot;javascript:void(0)&quot; class=&quot;closebtn&quot; onclick=&quot;closeNav()&quot;&gt;&amp;times;&lt;/a&gt;
    &lt;div id=&quot;plots&quot;&gt;
        &lt;div id=&quot;plot4a&quot;&gt;&lt;/div&gt;
        &lt;div id=&quot;plot4b&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=&quot;user_interaction&quot; class=&quot;gainsDisplay&quot;&gt;
        &lt;div id=&quot;gains&quot;&gt;&lt;/div&gt;
        &lt;br /&gt;
        &lt;input value=&quot;Reset&quot; type=&quot;button&quot; onclick=&quot;resetPIDF()&quot; /&gt;
    &lt;/div&gt;
    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this final installment of our series on Control Theory, we’ll walk through the details of tuning a PID algorithm. We’ll cover the most common case in FRC - controlling the &lt;em&gt;rotational velocity&lt;/em&gt; of a mechanism with a motor (like our shooter wheel, or a drivetrain).&lt;/p&gt;

&lt;h2 id=&quot;shooter-wheel-system-tuning&quot;&gt;Shooter Wheel System Tuning&lt;/h2&gt;

&lt;p&gt;We’ll start by going over how to properly tune our old friend, the shooter wheel.&lt;/p&gt;

&lt;h3 id=&quot;system-review&quot;&gt;System Review&lt;/h3&gt;

&lt;p&gt;If you haven’t gone through the other blog posts, it would definitely be good to check out &lt;a href=&quot;/blog_posts/2019/09/07/systems_and_controls.html&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;/blog_posts/2019/09/20/math_models.html&quot;&gt;Part 2&lt;/a&gt;, and &lt;a href=&quot;/blog_posts/2019/10/07/pid_ctrl_design.html&quot;&gt;Part 3&lt;/a&gt; to get some basic understanding of the whole control theory thing we’re describing. But in case you didn’t, know that we’re tuning a shooter wheel, powered by a motor, attempting to get it to a certain rotational velocity prior to injecting a ball to launch.&lt;/p&gt;

&lt;p&gt;The mathematical model for how this system works is described by this equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n] = \frac{T_s C_1 V_{in}[n] + \omega_{wheel}[n-1]}{( 1 + T_s C_2 )}&lt;/script&gt;

&lt;p&gt;For visualization and intuition, we dump a test input into the system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system_plant_inputs.png&quot; alt=&quot;Test input&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And when you jam 12 volts into this system (via &lt;script type=&quot;math/tex&quot;&gt;V_{in}&lt;/script&gt;), you get motion that looks like this:&lt;/p&gt;

&lt;div id=&quot;plot2a&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;plot2b&quot;&gt;&lt;/div&gt;

&lt;p&gt;The red line shows the &lt;em&gt;setpoint&lt;/em&gt; - the desired speed command. Our goal will be to get the shooter wheel as close to that speed as we can, as quickly as possible.&lt;/p&gt;

&lt;h3 id=&quot;basic-technique&quot;&gt;Basic Technique&lt;/h3&gt;

&lt;p&gt;As we’ve mentioned, &lt;em&gt;tuning&lt;/em&gt; a PID controller is the process of determining the numeric values of the proportional, integral, derivative, and feed forward gains for the controller. The exact values will be dependant on the physical system and its behavior.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system_tune.png&quot; alt=&quot;Tuning the System&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The basic technique we’ll cover is effectively &lt;em&gt;guess and check&lt;/em&gt;. There are some more algorithmic approaches, but I find its best to start with the guess-and-check method, to get the best intuitive understanding of what each gain does.&lt;/p&gt;

&lt;p&gt;Everything we are about to describe here is a &lt;em&gt;rule of thumb&lt;/em&gt;, not a &lt;em&gt;rule&lt;/em&gt;. I’m sure the greybeards reading this will have lots of alternate advice, and it’s probably better than what I have to offer. But you’re here reading my blog, so I’ll tell you what I know for now :D .&lt;/p&gt;

&lt;p&gt;For our shooter wheel, or for any velocity control, there is a prescribed order that you should generally follow: first F, then P, then D, then I. Lets walk through the process.&lt;/p&gt;

&lt;p&gt;One quick note on technique - for all these values, start &lt;em&gt;small&lt;/em&gt;. If the value is too low, double it. If it’s too big, cut it in half. Continue this process till you get close. At that point, you can start to fine-tune the value. But, the fastest and safest way to ge to the ideal value that I’ve found is the doubling/halving technique.&lt;/p&gt;

&lt;p&gt;This blog post has a nifty little sidebar to help us keep track of what our system is doing as we play around with it.&lt;/p&gt;

&lt;p&gt;&lt;input value=&quot;Open that sidebar now!&quot; type=&quot;button&quot; onclick=&quot;openNav()&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hopefully cool! This took far more CSS magic than I cared to learn. Let me know if it borks up on your computer.&lt;/p&gt;

&lt;p&gt;Ok, now on to tuning…&lt;/p&gt;

&lt;h4 id=&quot;f-gain&quot;&gt;F Gain&lt;/h4&gt;

&lt;p&gt;We’ll be starting with F. Choose F such that the &lt;em&gt;steady state&lt;/em&gt; speed, with no disturbances, gets &lt;em&gt;fairly close&lt;/em&gt; to the setpoint. Within about 10% is usually fine. For something like a shooter wheel, err on the side of “slightly too high” if possible.&lt;/p&gt;

&lt;p&gt;Start with big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double F&quot; type=&quot;button&quot; onclick=&quot;adjustF(2.0)&quot; /&gt;
&lt;input value=&quot;Half F&quot; type=&quot;button&quot; onclick=&quot;adjustF(0.5)&quot; /&gt;
&lt;br /&gt;
Then do smaller tweaks when you get closer:
&lt;br /&gt;
&lt;input value=&quot;Bump Up F&quot; type=&quot;button&quot; onclick=&quot;adjustF(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down F&quot; type=&quot;button&quot; onclick=&quot;adjustF(0.95)&quot; /&gt;
&lt;br /&gt;
Or, if you get completely lost, start over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out F&quot; type=&quot;button&quot; onclick=&quot;adjustF(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;At this point, if you were to fire up your shooter, you’ll get kinda close, but you won’t be getting there very fast. Nor will you be able to reject a constant disturbance, like changing friction or a sagging battery voltage. We need to start adding some feedback.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: On this system, a good value is around 0.01&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;p-gain&quot;&gt;P Gain&lt;/h4&gt;

&lt;p&gt;P is next. Same thing as F - start near zero, and double the value each iteration. When P is zero, it will have no impact on behavior. When P is very very small, it has very very little impact on behavior.&lt;/p&gt;

&lt;p&gt;Again, Start with big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double P&quot; type=&quot;button&quot; onclick=&quot;adjustP(2.0)&quot; /&gt;
&lt;input value=&quot;Half P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0.5)&quot; /&gt;
&lt;br /&gt;
Then do smaller tweaks when you get closer:
&lt;br /&gt;
&lt;input value=&quot;Bump Up P&quot; type=&quot;button&quot; onclick=&quot;adjustP(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0.95)&quot; /&gt;
&lt;br /&gt;
Or, if you get completely lost, start over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out P&quot; type=&quot;button&quot; onclick=&quot;adjustP(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As you increase P, you should start to see your rate of approaching the setpoint get better and better. When you have a disturbance, even like a ball entering the shooter, you’ll see it bounce back pretty fast. As you start to raise P, you’ll notice a big improvement at first, as we’re &lt;em&gt;actually&lt;/em&gt; going toward the setpoint.&lt;/p&gt;

&lt;p&gt;You’ll be able to increase it quite a bit with much more marginal gains. Finally, at a certain point, the output starts to &lt;em&gt;oscillate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You could keep going, but eventually the output becomes very unstable.&lt;/p&gt;

&lt;p&gt;For P, your target is to tune &lt;em&gt;just barely at the point&lt;/em&gt; where the output starts to oscillate.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: On this system, a good value is around 2.28&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;d-gain&quot;&gt;D gain&lt;/h4&gt;

&lt;p&gt;Then we can bring on D. D should start at about 1/100th of where you set P at. Same as before, start doubling the D gain until it &lt;em&gt;takes away&lt;/em&gt; most of the oscillation from the P gain.&lt;/p&gt;

&lt;p&gt;Big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double D&quot; type=&quot;button&quot; onclick=&quot;adjustD(2.0)&quot; /&gt;
&lt;input value=&quot;Half D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0.5)&quot; /&gt;
&lt;br /&gt;
Small Tweaks:
&lt;br /&gt;
&lt;input value=&quot;Bump Up D&quot; type=&quot;button&quot; onclick=&quot;adjustD(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0.95)&quot; /&gt;
&lt;br /&gt;
Start Over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out D&quot; type=&quot;button&quot; onclick=&quot;adjustD(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Similar to P, if you make D too high, you get instability.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: On this system, a good value is around 0.047&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;i-gain&quot;&gt;I Gain&lt;/h4&gt;

&lt;p&gt;Once you’ve got F, P, and D, it’s time to tune I. We actually don’t have any real friction modeled in this system, so we have very little steady state error to correct for. Given a response that looks like the above, I’d actually recommend skipping it.&lt;/p&gt;

&lt;p&gt;To simulate your steady state error, you can crank up F higher than it needs to be, or zero it out. Try doing that, then using I to compensate.&lt;/p&gt;

&lt;p&gt;To tune I, do it similarly to D. Start at 1/100th of P, and double until the steady-state error has been eliminated.&lt;/p&gt;

&lt;p&gt;Big adjustments:
&lt;br /&gt;
&lt;input value=&quot;Double I&quot; type=&quot;button&quot; onclick=&quot;adjustI(2.0)&quot; /&gt;
&lt;input value=&quot;Half I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0.5)&quot; /&gt;
&lt;br /&gt;
Small Tweaks:
&lt;br /&gt;
&lt;input value=&quot;Bump Up I&quot; type=&quot;button&quot; onclick=&quot;adjustI(1.05)&quot; /&gt;
&lt;input value=&quot;Bump Down I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0.95)&quot; /&gt;
&lt;br /&gt;
Start Over:
&lt;br /&gt;
&lt;input value=&quot;Zero-out I&quot; type=&quot;button&quot; onclick=&quot;adjustI(0)&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Once you’re at this point - the best advice I can give - &lt;a href=&quot;https://www.youtube.com/watch?v=GbKAaSf6e10&amp;amp;feature=youtu.be&amp;amp;t=14&quot;&gt;STOP&lt;/a&gt;. Don’t keep fiddling at random. Good enough is good enough. PID will never get quite perfect. If you are at a point that looks like this, there’s admittedly not much else you can expect.&lt;/p&gt;

&lt;h3 id=&quot;varying-the-setpoint&quot;&gt;Varying the Setpoint&lt;/h3&gt;

&lt;p&gt;Though most shooter wheels tend to be either “on” or “off”, it’s worthwhile to verify that our system can accommodate any setpoint we put into it. That is indeed the point of the controller - ensure that any incoming command is acknowledged to the best of the &lt;em&gt;system’s&lt;/em&gt; ability.&lt;/p&gt;

&lt;div class=&quot;slidecontainer&quot;&gt;
    Setpoint:
    &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;2000&quot; value=&quot;1000&quot; class=&quot;slider&quot; id=&quot;setpointSlider&quot; /&gt;
    &lt;br /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;With a properly tuned controller, you’ll see that the speed of the shooter wheel goes to the setpoint, as long as the setpoint is &lt;em&gt;low enough&lt;/em&gt; that the wheel can &lt;em&gt;physically go that fast&lt;/em&gt;. In our system speed above ~1.6k RPM aren’t achievable.&lt;/p&gt;

&lt;h2 id=&quot;next-steps---modern-control-theory&quot;&gt;Next Steps - Modern Control Theory&lt;/h2&gt;

&lt;p&gt;It’s really important to mention that PID isn’t exactly… up to date. It’s been around a while. And truth be told, better stuff is out there.&lt;/p&gt;

&lt;p&gt;And sure, math is math, so it definitely still works. But I’d be remiss if I didn’t drop some key vocab like &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear%E2%80%93quadratic_regulator&quot;&gt;LQR&lt;/a&gt; or &lt;a href=&quot;https://pdfs.semanticscholar.org/b96e/01c2d53e9715ffd77eea6e1b1661e9b3977f.pdf&quot;&gt;Plant Model Inversion&lt;/a&gt; or (dare I even say) &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_learning&quot;&gt;Machine Learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To tell you the truth? I don’t yet fully understand these things. I’ve had some cursory exposure to them, but I’ve not yet built a robot that &lt;em&gt;required&lt;/em&gt; using them. Hopefully that will change soon. And when it does, I’ll write a blog post about it. Till then check out some of the presentations and code written by other teams - there are many who have gone much further. &lt;a href=&quot;http://frc971.org/content/2017-software&quot;&gt;971 Spartan Robotics&lt;/a&gt; stands out for me.&lt;/p&gt;

&lt;p&gt;My advice to the beginner? Start with PID, see how far you can get. Once you’ve mastered PID, maybe try something more complex. Keep in mind the goal is functionality and learning. PID might be good enough for both. Up to you.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s all for now! Go tune your controllers!&lt;/p&gt;

&lt;p&gt;EDIT: One additional thing - we’ve got another interactive post! &lt;a href=&quot;/blog_posts/2019/10/26/controls_supp_arm.html&quot;&gt;Check out how to tune another common class of system found in FRC&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;/assets/js/pidTune.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">&amp;times;</summary></entry><entry><title type="html">Control Theory - PID &amp;amp; Controller Design</title><link href="/blog_posts/2019/10/07/pid_ctrl_design.html" rel="alternate" type="text/html" title="Control Theory - PID &amp; Controller Design" /><published>2019-10-07T10:30:00-04:00</published><updated>2019-10-07T10:30:00-04:00</updated><id>/blog_posts/2019/10/07/pid_ctrl_design</id><content type="html" xml:base="/blog_posts/2019/10/07/pid_ctrl_design.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Welcome to post 3 in our series on controls engineering. In this post, we’re going to explore the behavior of the motor model we’ve built up, try to create an intuition for how it behaves. We’ll establish a couple criteria for what we want it to do, and lead into the application of a classic PID controller.&lt;/p&gt;

&lt;p&gt;Recall our standard model of how a &lt;em&gt;control system&lt;/em&gt; is laid out:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system.png&quot; alt=&quot;Control system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For context, in &lt;a href=&quot;/blog_posts/2019/09/20/math_models.html&quot;&gt;part 2&lt;/a&gt;, we covered what sorts of math equations go inside the &lt;em&gt;plant&lt;/em&gt; portion of the control system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system_plant.png&quot; alt=&quot;Plant Models&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A bit of an aside to the reader: The more I’ve been writing this series, the more I’m realizing what a disservice I’m actually doing to modern control theory. We’re using time domain analysis to build up all our understanding. Professional controls engineers, working on modern systems, don’t work in this domain. They’re using things like Linear Algebra, State-Space representations, LQR, and a whole host of things that, for better or for worse, I don’t have too much exposure to. I feel a bit bad that we’re not getting to the point where we can explain these.&lt;/p&gt;

&lt;p&gt;You have to walk before you can run, and walking still gets you from point A to point B. What I always have to remind myself - This is just a high school robotics competition. Using LQR to design a super optimal control system is a valiant cause, one from which much can be learned. But it’s far from required for success.&lt;/p&gt;

&lt;p&gt;The takeaway I guess I want readers to have: Enjoy our time here in the time domain space. Build up your intuition of how things evolve over time. Know that even if you get to the end of this series of posts, and learn everything they have to offer - &lt;em&gt;there is still more&lt;/em&gt;. The pro’s can teach you much.&lt;/p&gt;

&lt;h2 id=&quot;plant-model-response&quot;&gt;Plant Model Response&lt;/h2&gt;

&lt;p&gt;One of the pieces of terminology thrown around for these systems is &lt;em&gt;response&lt;/em&gt;. It’s a generic term that simply means “Given some input, how does the output act?”.&lt;/p&gt;

&lt;p&gt;You can describe the response to a specific input. For example, if you apply 12V to the motor, you can say the motor’s &lt;em&gt;response&lt;/em&gt; to that 12v input is to &lt;em&gt;increase speed&lt;/em&gt;. Response might also be more generic - if you have an equation, you might be able to describe the &lt;em&gt;response&lt;/em&gt; to &lt;em&gt;any input&lt;/em&gt; concisely.&lt;/p&gt;

&lt;p&gt;When analyzing the response of a system, we generally divide the analysis into two parts: &lt;em&gt;Transient&lt;/em&gt; and &lt;em&gt;Steady-State&lt;/em&gt;. &lt;em&gt;Transient Response&lt;/em&gt; refers to how the system acts &lt;em&gt;immediately following&lt;/em&gt; some disturbance in input. If you suddenly change the input voltage to a motor, its shaft will change speed - the manner in which it ramps up or ramps down is this &lt;em&gt;transient response&lt;/em&gt;. Separately, after the input has been stable for some time, the output usually stabilizes as well. &lt;em&gt;Steady-state&lt;/em&gt; refers to the system behavior after all of the “transient” behavior has died down. In our motor example, if you were to adjust the input voltage from 12V to 8V, you’d see the motor slow down. The speed it settles at could be called the “Steady State” response.&lt;/p&gt;

&lt;p&gt;To analyze system response, we generally need to expose the system to a variety of different inputs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system_plant_inputs.png&quot; alt=&quot;Test Inputs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a few types of input that are very good to use, because you can learn a lot about the system from just a few trials (rather than shooting in the dark a lot).&lt;/p&gt;

&lt;p&gt;The simplest is usually called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Heaviside_step_function&quot;&gt;“unit step”&lt;/a&gt;. It’s a fancy math way to describe “flipping on a switch”. If you’re all into formal definitions, I like the piecewise definition:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
u(x) = \begin{cases} 0 &amp; x &lt; 0 \\ 1 &amp; x \geq 0  \end{cases} %]]&gt;&lt;/script&gt;

&lt;p&gt;The input to the function (here notated as &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;) is usually some function of time. You stretch and scale the function to indicate the turn-on time, and its size.&lt;/p&gt;

&lt;p&gt;For example, if you wanted to describe “turning on” the motor (apply 12V) at time = 1 sec, you could describe the input voltage &lt;script type=&quot;math/tex&quot;&gt;v(t)&lt;/script&gt; with the equation&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v(t) = 12u(t-1)&lt;/script&gt;

&lt;div id=&quot;plot1&quot;&gt;&lt;/div&gt;
&lt;script&gt;
function step(t){
    if(t &lt; 0){
        return 0;
    } else {
        return 1;
    }
}

function plot1PointsGen(){
    var retArray = []

    var minTime = -1.0;
    var maxTime = 5.0;
    var Ts = 0.01;

    for(t = minTime; t &lt; maxTime; t += Ts){
        newValue = 12 * step(t - 1);

        retArray.push([t, newValue]);
    }

    return retArray;
}

functionPlot({
  target: '#plot1',
  title: '',
  grid: true,
  disableZoom:true,
  yAxis: {
      label: &quot;Motor Voltage (V)&quot;,
      domain: [-3, 15]
  },
  xAxis: {
      label: &quot;Time (s)&quot;,
      domain: [-1, 5]
  },
  data: [
    {
        points: plot1PointsGen(),
        fnType: 'points',
        graphType: 'polyline'
    }
  ]
})
&lt;/script&gt;

&lt;p&gt;It should be noted that the definition of this guy doesn’t change all that much when you go from continuous &lt;script type=&quot;math/tex&quot;&gt;(t)&lt;/script&gt; to discrete &lt;script type=&quot;math/tex&quot;&gt;[n]&lt;/script&gt;. The output is &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
n &lt; 0 %]]&gt;&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; for all &lt;script type=&quot;math/tex&quot;&gt;n \geq 0&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;practical-example---shooter-system-response&quot;&gt;Practical Example - Shooter System Response&lt;/h3&gt;

&lt;p&gt;Let’s try to insert our function into the shooter wheel system we described last time. We’ll choose it as the function to describe how the &lt;em&gt;voltage&lt;/em&gt; input changes over time, and see how the speed changes.&lt;/p&gt;

&lt;h4 id=&quot;intuition&quot;&gt;Intuition&lt;/h4&gt;

&lt;p&gt;Before we hit the math, let’s think through what we expect to happen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Before the voltage turns on (&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
t &lt; 0 %]]&gt;&lt;/script&gt;), the wheel should not be turning.&lt;/li&gt;
  &lt;li&gt;As soon as the voltage turns on, the wheel should start spinning.&lt;/li&gt;
  &lt;li&gt;The higher the voltage that is passed in, the faster it should be going.&lt;/li&gt;
  &lt;li&gt;The wheel should hit some maximum “steady state” speed, and stay there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, most folks would thing this is pretty obvious. However, it’s important to keep it in mind. We can use the math equations to show our intuition to be true, or use the intuition to validate we didn’t get something wrong in the math.&lt;/p&gt;

&lt;h4 id=&quot;nominal-behavior&quot;&gt;Nominal Behavior&lt;/h4&gt;

&lt;p&gt;Recall the equation we derived in part 2:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n] = \frac{T_s C_1 V_{in}[n] + \omega_{wheel}[n-1]}{( 1 + T_s C_2 )}&lt;/script&gt;

&lt;p&gt;Let’s see if we can get an idea for how this thing reacts when we apply an input voltage. We do this by making two assumptions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We will apply 12 volts at the time 0 seconds (&lt;script type=&quot;math/tex&quot;&gt;t = 0&lt;/script&gt;). This can be represented using our unit step function: &lt;script type=&quot;math/tex&quot;&gt;v[n] = 12*u[n]&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;We will assume the wheel was stationary prior to start. This means that &lt;script type=&quot;math/tex&quot;&gt;\omega_{wheel}[-1] = 0&lt;/script&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on this, we can draw the following plot of wheel speed, over time:&lt;/p&gt;

&lt;div id=&quot;plot2a&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;plot2b&quot;&gt;&lt;/div&gt;

&lt;p&gt;As a side note, the &lt;script type=&quot;math/tex&quot;&gt;C_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;C_2&lt;/script&gt; values have been chosen to represent a single 775 pro motor, through a reasonable gearbox, through a typically-sized shooter wheel. See &lt;a href=&quot;/assets/js/pidSim.js&quot;&gt;this javascript file&lt;/a&gt; for more details on those assumptions.&lt;/p&gt;

&lt;p&gt;If you stare at the graph, it certainly appears our initial suppositions are confirmed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For times to the left of the Y axis, we see our speed is zero.&lt;/li&gt;
  &lt;li&gt;At &lt;script type=&quot;math/tex&quot;&gt;t = 0&lt;/script&gt;, on the Y axis, voltage turns on, and our speed starts to increase.&lt;/li&gt;
  &lt;li&gt;To the right of the Y axis, speed starts to increase as time goes on.&lt;/li&gt;
  &lt;li&gt;As time goes on, we see the speed caps out at around 3500 RPM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;extracting-the-steady-state-behavior&quot;&gt;Extracting the Steady-state behavior.&lt;/h4&gt;

&lt;p&gt;As a brief tangent - it should be noted that you can extract these conclusions from the equation itself. Even if you don’t trust your eyes on the chart, you can still prove it logically.&lt;/p&gt;

&lt;p&gt;For example - If we &lt;script type=&quot;math/tex&quot;&gt;\omega[n]&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;V_{in}[n]&lt;/script&gt; are zero for all &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; less than zero, we can see the equation becomes:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[-5] = \frac{T_s C_1 * 0 + 0}{( 1 + T_s C_2 )} = 0&lt;/script&gt;

&lt;p&gt;Additionally, if when we assume “steady-state”, we assume that  &lt;script type=&quot;math/tex&quot;&gt;\omega_{wheel}[n] = \omega_{wheel}[n-1]&lt;/script&gt; - the mathematical way of expressing “&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is large enough such that &lt;script type=&quot;math/tex&quot;&gt;\omega_{wheel}[n]&lt;/script&gt; is no longer changing”.&lt;/p&gt;

&lt;p&gt;In this case, we can state:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n] = \frac{T_s C_1 V_{in}[n] + \omega_{wheel}[n]}{( 1 + T_s C_2 )}&lt;/script&gt;

&lt;p&gt;which simplifies to:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n] = \frac{C_1}{C_2}V_{in}[n]&lt;/script&gt;

&lt;p&gt;And, again, assuming &lt;script type=&quot;math/tex&quot;&gt;V_{in}[n]&lt;/script&gt; is just a constant for large &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;, means that our “steady-state” &lt;script type=&quot;math/tex&quot;&gt;\omega_{wheel}[n]&lt;/script&gt; is in fact also a constant.&lt;/p&gt;

&lt;p&gt;Huzzah! Isn’t math fun?&lt;/p&gt;

&lt;h2 id=&quot;a-brief-step-back---the-goal&quot;&gt;A Brief Step Back - The Goal&lt;/h2&gt;

&lt;p&gt;One key thing to remember, or learn, going forward: &lt;strong&gt;A consistent shooter wheel must be running at a constant, defined &lt;em&gt;velocity&lt;/em&gt;, prior to injecting a ball&lt;/strong&gt;. That’s right - you need to keep your &lt;em&gt;rotational velocity (RPM)&lt;/em&gt; steady, if you want to make sure your launched ball always travels through a consistent arc. The reason for this is again based in physics - the &lt;em&gt;energy&lt;/em&gt; imparted to the ball controls its arc, and energy imparted is related to the &lt;em&gt;velocity&lt;/em&gt; of the shooter wheel.&lt;/p&gt;

&lt;p&gt;Here’s the key, if you haven’t noticed yet - we have the ability to command the motor’s &lt;em&gt;voltage&lt;/em&gt;, not it’s &lt;em&gt;speed&lt;/em&gt;. The speed is dictated by a whole slew of additional physical parameters. Though we’ve built up this math model of how things are supposed to work, this isn’t a perfect transform we can invert to get an answer of voltage-&amp;gt;speed, as we shall soon see.&lt;/p&gt;

&lt;h4 id=&quot;behavior-with-disturbances&quot;&gt;Behavior with Disturbances&lt;/h4&gt;

&lt;p&gt;Before we get to discussing how to achieve a commanded speed, there’s one more thing to discuss. We’ve so far neglected a key portion of our physical model - the presence of an &lt;em&gt;external disturbance&lt;/em&gt;. When we say &lt;em&gt;external disturbance&lt;/em&gt;, we’re describing any force or torque acting on the system which is, in some way, abnormal, or unexpected.&lt;/p&gt;

&lt;p&gt;I won’t bore you too much with the math. But, re-working our derivations from the last time, we can inject this new disturbance term as a time-varying torque &lt;script type=&quot;math/tex&quot;&gt;\tau_{ext}[n]&lt;/script&gt; into our motor speed equations:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n] = \frac{T_s C_1 V_{in}[n] - T_s C_3 \tau_{ext}[n] + \omega_{wheel}[n-1]}{( 1 + T_s C_2 )}&lt;/script&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_3 = \frac{2}{mr^2}&lt;/script&gt;

&lt;p&gt;This disturbance may come in many forms.&lt;/p&gt;

&lt;p&gt;Maybe it’s a big hit, all at once - like a ball entering the shooter mechanism. This is often called an &lt;em&gt;impullse&lt;/em&gt; disturbance.&lt;/p&gt;

&lt;p&gt;Maybe it’s something more constant over time, like friction in the bearings and gears of the rotating mechanism.&lt;/p&gt;

&lt;p&gt;Maybe it’s something electrical, like the battery losing charge over time.&lt;/p&gt;

&lt;p&gt;Here’s an example of what might happen with some friction in the system, as well as injecting a ball at &lt;script type=&quot;math/tex&quot;&gt;t=5&lt;/script&gt; seconds:&lt;/p&gt;

&lt;div id=&quot;plot5a&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;plot5b&quot;&gt;&lt;/div&gt;

&lt;p&gt;Note that the steady state speed is lower (~1.75k RPM) due to friction, and the impulse of dropping the ball into the shooter wheel takes a big bite out of the speed at the 5 second mark.&lt;/p&gt;

&lt;p&gt;In every case, the external disturbance comes at an &lt;em&gt;unpredictable time&lt;/em&gt; and with an &lt;em&gt;unpredictable magnitude&lt;/em&gt;. We’ve made some mathematical assumptions here about the behavior of the system, but they won’t capture the exact behavior of every disturbance.&lt;/p&gt;

&lt;h2 id=&quot;disturbances-the-need-for-feedback&quot;&gt;Disturbances: The Need for Feedback&lt;/h2&gt;

&lt;p&gt;This really is the key for why we need our software to be able to measure anything at all - we can’t 100% predict the forces and influences of the external world on our controlled system. No matter how much planning and math we do, we can’t protect ourselves from Joe Freshman who forgets to grease the gearbox just right, and changes the coefficient of friction. Neither can we know the exact timing of when balls will be injected into our shooter system, nor have guarantees our batteries will discharge at some exact rate. &lt;em&gt;We cannot exactly predict disturbances&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;What we can do, however, is design our software to account for disturbances. Since we can &lt;em&gt;measure&lt;/em&gt; the speed of the wheel, we can determine if it is too high or too low, and adjust our voltage to compensate. &lt;em&gt;Exactly how&lt;/em&gt; that voltage gets adjusted is worth detailed consideration, and is what the rest of the blog post will focus on.&lt;/p&gt;

&lt;h2 id=&quot;designing-a-controller---intuition&quot;&gt;Designing a Controller - Intuition&lt;/h2&gt;

&lt;p&gt;Given the behavior of the system observed so far, the relationship between voltage and speed should be somewhat obvious - More voltage leads to more speed. We can leverage this fact while we design our software.&lt;/p&gt;

&lt;p&gt;Again, for context, we are moving on to describe the contents of the &lt;em&gt;software&lt;/em&gt; portion of our &lt;em&gt;controller&lt;/em&gt; inside our standard control system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system_controller.png&quot; alt=&quot;Controller&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bang-bang&quot;&gt;Bang-Bang&lt;/h3&gt;

&lt;p&gt;Let us take a first pass at designing some software that takes in a speed command, and produces a voltage command, with the intent of getting our shooter wheel toward the commanded speed. Based on the known physical relationship between voltage and speed, we declare the following very simple &lt;em&gt;control law&lt;/em&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the speed is too low, send full power to the motor&lt;/li&gt;
  &lt;li&gt;If the speed is too high, send zero power to the motor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this case, “too low” implies “actual speed is less than desired speed”. “Too High” is just the opposite. Full power means 12V (since we are controlling voltage), and zero power means 0V. This leads to what is commonly called a “Bang-bang” controller - hopefully a pretty intuitive concept. Per its name, it causes the motor command to “bang” between max and min power, attempting to keep the speed right at the desired value. Hence the name, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bang%E2%80%93bang_control&quot;&gt;Bang-Bang Control&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example of what such a controller would do:&lt;/p&gt;

&lt;div id=&quot;plot3a&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;plot3b&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;slidecontainer&quot;&gt;
    Sample Rate:
    &lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;750&quot; value=&quot;200&quot; class=&quot;slider&quot; id=&quot;sampleTime_ms&quot; /&gt;
    &lt;span id=&quot;samplerate_disp&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Notice how at the beginning, the system keeps the motor on. As soon as the speed crosses the “desired” threshold of 1000RPM, the motor command drops off. The motor speed begins to decrease, and continues to do so until the speed falls below that 1000RPM &lt;a href=&quot;https://apps.dtic.mil/dtic/tr/fulltext/u2/a404426.pdf&quot;&gt;bogey&lt;/a&gt;. Once it does, the voltage turns on again, full force. The motor speeds back up till it is turning the shooter wheel faster than 1000RPM. At which point the voltage shuts off, and the cycle starts over.&lt;/p&gt;

&lt;p&gt;This control logic is actually remarkably good, especially given its simplicity (it’s an if/else statement). The only variable to really play with - how fast to you sample speed and update the output voltage? Usually this is fixed (~20ms on the roboRIO, unless you do something funky). Play with the slider above to see the effect - it should be somewhat intuitive. The faster you perform this update rate, the less “jerky” the motor speed gets. However, faster takes more processing power, and cycles the controller on and off faster.&lt;/p&gt;

&lt;p&gt;The biggest disadvantage is that it’s causing &lt;em&gt;big&lt;/em&gt; swings in the electrical signal, and slightly oscillating motor speed around the desired motor speed. If these voltage swings and slight velocity oscillations are acceptable for your application, this is a great system to use for controlling your shooter wheel.&lt;/p&gt;

&lt;p&gt;However, there are more advanced options which can produce… “nicer” behavior.&lt;/p&gt;

&lt;h2 id=&quot;pid-controller---what-it-is&quot;&gt;PID Controller - What It Is&lt;/h2&gt;

&lt;p&gt;A common design that &lt;em&gt;can&lt;/em&gt; work in lots of cases is the &lt;a href=&quot;https://en.wikipedia.org/wiki/PID_controller&quot;&gt;Proportional/Integral/Derivative controller&lt;/a&gt;, or “PID” for short. PID controllers are designed to take our previous “too-low/too-high” intuition, and use some mathematical operations to make it a bit more rigorous.&lt;/p&gt;

&lt;p&gt;PID controllers output a single speed command which is the &lt;em&gt;sum&lt;/em&gt; of a set of &lt;em&gt;terms&lt;/em&gt;, each term scaled by the associated &lt;em&gt;gain&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;error&quot;&gt;Error&lt;/h3&gt;

&lt;p&gt;A PID controller first computes the &lt;em&gt;error&lt;/em&gt; between the desired and actual velocities:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{err}(t) = \omega_{des}(t) - \omega_{act}(t)&lt;/script&gt;

&lt;p&gt;This error is then used in different ways in each term.&lt;/p&gt;

&lt;h3 id=&quot;the-pid-control-law&quot;&gt;The PID Control Law&lt;/h3&gt;

&lt;p&gt;For the mathematically inclined, the PID control law dictates that the voltage shall be calculated according the the following formula:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{PID}(t) = K_{P} \omega_{err}(t) + K_{I} \int_{x=0}^{x=t}\omega_{err}(x)dx + K_{D} \frac{d\omega_{err}}{dt} + K_{F} \omega_{des}(t)&lt;/script&gt;

&lt;p&gt;If this appears daunting, Fear not! We’ll break this down piece by piece.&lt;/p&gt;

&lt;h3 id=&quot;proportional-term---k_p-omega_errt&quot;&gt;Proportional Term - &lt;script type=&quot;math/tex&quot;&gt;K_{P} \omega_{err}(t)&lt;/script&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;proportional&lt;/em&gt; or P term uses the error &lt;script type=&quot;math/tex&quot;&gt;\omega_{err}(t)&lt;/script&gt;, scaled by its gain &lt;script type=&quot;math/tex&quot;&gt;K_{P}&lt;/script&gt;. This fundamentally accomplishes something very similar to what the bang-bang controller does.&lt;/p&gt;

&lt;p&gt;When &lt;script type=&quot;math/tex&quot;&gt;\omega_{des} &gt; \omega_{act}&lt;/script&gt;, the P term is positive. When the opposite is true, the P term becomes negative.&lt;/p&gt;

&lt;p&gt;When &lt;script type=&quot;math/tex&quot;&gt;\omega_{des}&lt;/script&gt; is very different than &lt;script type=&quot;math/tex&quot;&gt;\omega_{act}&lt;/script&gt;, you get a large output from the P term. When the two are similar, the P term’s value is close to zero.&lt;/p&gt;

&lt;p&gt;Assuming the signs in the system and &lt;script type=&quot;math/tex&quot;&gt;K_P&lt;/script&gt; are chosen well, our &lt;em&gt;control effort&lt;/em&gt; output to the plant will generally move the plant in the correct direction.&lt;/p&gt;

&lt;p&gt;This means, in a much smoother way, we emulate the behavior of the bang-bang controller, which &lt;em&gt;intuitively&lt;/em&gt; should be moving you in the right direction.&lt;/p&gt;

&lt;h3 id=&quot;derivative-term-k_d-fracdomega_errdt&quot;&gt;Derivative Term &lt;script type=&quot;math/tex&quot;&gt;K_{D} \frac{d\omega_{err}}{dt}&lt;/script&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;derivative&lt;/em&gt; or D term uses the &lt;em&gt;derivative&lt;/em&gt; of the error (with respect to time), scaled by its gain &lt;script type=&quot;math/tex&quot;&gt;K_{D}&lt;/script&gt;. This adds some new functionality on top of the bang-bang controller.&lt;/p&gt;

&lt;p&gt;Don’t get too scared by the usage of calculus here. The way to think about the D term is as a &lt;em&gt;rate limiter on the P term&lt;/em&gt;. Think about if you were accelerating on the highway, but you see cars stopped way in front of you. You might continue to mash on the gas pedal, then hit the brake at the very last minute. You might also be insane if you do that. Sure, you could technically stop, but it’s way better to start slowing down &lt;em&gt;before&lt;/em&gt; you get to your target.&lt;/p&gt;

&lt;p&gt;That’s exactly what the D term is for - it helps make sure the “inertia” of the P term charging full force toward the goal is tempered a bit, and cuts back on our control effort in advance of us getting there.&lt;/p&gt;

&lt;p&gt;This is useful for reducing &lt;em&gt;overshoot&lt;/em&gt;, and slight oscillations of &lt;script type=&quot;math/tex&quot;&gt;\omega_{act}&lt;/script&gt; around &lt;script type=&quot;math/tex&quot;&gt;\omega_{des}&lt;/script&gt;. We’ll discuss these in more detail later.&lt;/p&gt;

&lt;h3 id=&quot;integral-term--k_i-int_x0xtomega_errxdt&quot;&gt;Integral Term  &lt;script type=&quot;math/tex&quot;&gt;K_{I} \int_{x=0}^{x=t}\omega_{err}(x)dt&lt;/script&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;integral&lt;/em&gt; or I term again uses some calculus - this time, the &lt;em&gt;integral&lt;/em&gt; of the error over time. Again, we’re adding new functionality beyond what our bang-bang controller could hope to do.&lt;/p&gt;

&lt;p&gt;Again, don’t get too bogged down by the calculus. Think about what happens if you’re &lt;em&gt;almost&lt;/em&gt; operating at the desired value, but &lt;em&gt;not quite&lt;/em&gt;. &lt;script type=&quot;math/tex&quot;&gt;\omega_{act}&lt;/script&gt; will be very similar to &lt;script type=&quot;math/tex&quot;&gt;\omega_{des}&lt;/script&gt;, but not exactly the same. As a result, your P term is very small - possibly small enough to not make much of a difference to the system’s behavior.&lt;/p&gt;

&lt;p&gt;This is where the I term comes in. By &lt;em&gt;adding up&lt;/em&gt; previous values of the error, we cause the I term to &lt;em&gt;accumulate&lt;/em&gt;, and increase in value over time, as long as we’re not &lt;em&gt;exactly&lt;/em&gt; on target (ie, &lt;script type=&quot;math/tex&quot;&gt;\omega_{act} = \omega_{des}&lt;/script&gt; &lt;em&gt;exactly&lt;/em&gt;). This accumulation adds more and more influence to our sum overall, until the control effort is finally large enough to make a difference in the physical system’s state.&lt;/p&gt;

&lt;h3 id=&quot;feed-forward-term-k_f-omega_dest&quot;&gt;Feed-Forward Term &lt;script type=&quot;math/tex&quot;&gt;K_{F} \omega_{des}(t)&lt;/script&gt;&lt;/h3&gt;

&lt;p&gt;For certain systems, it is useful to augment the PID logic with an additional term - the &lt;em&gt;feed-forward&lt;/em&gt; or F term. Note that it uses &lt;script type=&quot;math/tex&quot;&gt;\omega_{des}(t)&lt;/script&gt;, not &lt;script type=&quot;math/tex&quot;&gt;\omega_{err}(t)&lt;/script&gt;. This means it has no dependance on your sensor feedback, only on the operator command.&lt;/p&gt;

&lt;p&gt;The way to think about the F term is a “guess” at what &lt;script type=&quot;math/tex&quot;&gt;v(t)&lt;/script&gt; should be, prior to getting any sensor feedback or calculating any of the other terms. In general, for this shooter wheel, we know there is a &lt;em&gt;linear&lt;/em&gt; relationship between steady-state speed and input voltage. That is to say, for a given input voltage, we know we’ll (eventually) settle out at some speed. With a bit of experimentation, we can even find that voltage that gets us to our (in these examples) 1000 RPM set-point. We take this information and “bake” it into our F term, which reduces the amount of “work” the other P, I, and D terms have to do to get the system behaving nicely.&lt;/p&gt;

&lt;p&gt;The F term can be kind of tricky - if in doubt, leave it out. It works here because of the &lt;em&gt;linear relationship&lt;/em&gt; between voltage and speed. If you were doing something like controlling an arm position with a motor, and trying to get the closed-loop system to achieve a certain arm &lt;em&gt;position&lt;/em&gt; (not velocity), you’d definitely not want to use F like this. However for &lt;em&gt;velocity control&lt;/em&gt;, like in shooter wheels, I think it’s almost impossible to live without!&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it All Together&lt;/h3&gt;

&lt;p&gt;And that’s all there is to it! Bask in the glory of the equation once more:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{PID}(t) = K_{P} \omega_{err}(t) + K_{I} \int_{x=0}^{x=t}\omega_{err}(x)dx + K_{D} \frac{d\omega_{err}}{dt} + K_{F} \omega_{des}(t)&lt;/script&gt;

&lt;p&gt;The key to doing this is that you, as the engineer, have &lt;em&gt;free control&lt;/em&gt; over picking &lt;script type=&quot;math/tex&quot;&gt;K_{F}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;K_{P}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;K_{I}&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;K_{D}&lt;/script&gt;, and just need to pick them to make your system act nicely.&lt;/p&gt;

&lt;p&gt;Note that you may hear some people talk about a “PD” or “PI” controller - this is still a PID controller, just with the “missing” gain in the name set equal to zero.&lt;/p&gt;

&lt;p&gt;Below is a sample of some nicely picked values. We’ll spend next time describing &lt;em&gt;how&lt;/em&gt; to go about picking them. But for now, feel free to fiddle around with it, and refresh the page if you want to reset.&lt;/p&gt;

&lt;div id=&quot;plot4a&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;plot4b&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;slidecontainer&quot;&gt;
    F Gain:
    &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;1000&quot; value=&quot;650&quot; class=&quot;slider&quot; id=&quot;F_gain&quot; /&gt;
    &lt;span id=&quot;F_gain_disp&quot;&gt;&lt;/span&gt;
    &lt;br /&gt;
    P Gain:
    &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;1000&quot; value=&quot;400&quot; class=&quot;slider&quot; id=&quot;P_gain&quot; /&gt;
    &lt;span id=&quot;P_gain_disp&quot;&gt;&lt;/span&gt;
    &lt;br /&gt;
    I Gain:
    &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;1000&quot; value=&quot;0&quot; class=&quot;slider&quot; id=&quot;I_gain&quot; /&gt;
    &lt;span id=&quot;I_gain_disp&quot;&gt;&lt;/span&gt;
    &lt;br /&gt;
    D Gain:
    &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;1000&quot; value=&quot;105&quot; class=&quot;slider&quot; id=&quot;D_gain&quot; /&gt;
    &lt;span id=&quot;D_gain_disp&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pidf-controller---why-it-works-or-doesnt&quot;&gt;PID(F) Controller - Why it Works (or Doesn’t)&lt;/h2&gt;

&lt;p&gt;If you’re familiar with the math behind the PID controller, it’s not too hard to stare at it to convince yourself “Yea, this should probably work”. But, it definitely doesn’t work in all cases. In particular, it has to be &lt;em&gt;tuned&lt;/em&gt; around certain system behavior. If that behavior changes drastically over the course of operation (&lt;a href=&quot;https://en.wikipedia.org/wiki/Nonlinear_system&quot;&gt;mathematically a &lt;em&gt;non-linear system&lt;/em&gt;&lt;/a&gt;), the PID system will often not perform as well. Things like slack in chains and gearboxes, static friction, squishy game pieces, and many other things will lead to systems becoming non-linear. In these cases, you can either:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Suck it up. Get it good enough, and walk away&lt;/li&gt;
  &lt;li&gt;Use a more advanced controller that accounts for the system’s non-linear behavior.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Similarly, the PID (especially the D term) are not good at handling noise in the system, and also make implicit assumptions about the amount of &lt;em&gt;delay&lt;/em&gt; in the sensor feedback system. For this reason, make sure your sensors are good (ie - expensive and well-mounted). Also, be prepared to do additional work if using with a fundamentally high-latency system (like most vision processing has been, historically).&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Sweet! We’ve covered the basics of what a controller is. In our 3rd and final installment, we’ll discuss how to tune a PID controller, and where to look for “next steps”. &lt;a href=&quot;/blog_posts/2019/10/19/tuning_pid.html&quot;&gt;Check out the interactive post here!&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;/assets/js/pidSim.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Control Theory - Mathematical Models of the World</title><link href="/blog_posts/2019/09/20/math_models.html" rel="alternate" type="text/html" title="Control Theory - Mathematical Models of the World " /><published>2019-09-20T10:30:00-04:00</published><updated>2019-09-20T10:30:00-04:00</updated><id>/blog_posts/2019/09/20/math_models</id><content type="html" xml:base="/blog_posts/2019/09/20/math_models.html">&lt;p&gt;&lt;em&gt;All models are wrong, but some are useful. - &lt;a href=&quot;https://en.wikipedia.org/wiki/George_E._P._Box&quot;&gt;George Box&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is Part 2 in our series on Control Theory. In this installation, we’ll look at how we describe the interior of the blocks in our block diagram, using math equations. By doing this, we will have a representation of functionality we can analyze, manipulate, and write software with.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-model&quot;&gt;What is a Model?&lt;/h2&gt;

&lt;p&gt;We briefly alluded to the concept of a &lt;em&gt;model&lt;/em&gt; in &lt;a href=&quot;/blog_posts/2019/06/01/math_primer2.html&quot;&gt;Math Primer, part 2&lt;/a&gt;. A &lt;em&gt;mathematical model&lt;/em&gt; is one particular form of an &lt;a href=&quot;/blog_posts/2019/05/26/abstraction.html&quot;&gt;Abstraction&lt;/a&gt;, where we create &lt;em&gt;math equations&lt;/em&gt; to describe the behavior of a particular thing in the “real world”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/modeling.png&quot; alt=&quot;models_and_argos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mathematical models can be built for anything which has properties you are willing to describe using numbers. This includes more conceptual things like a country’s economy or a stock market, but also physical devices (like motors or gearboxes or robots). We’ll be focusing on the latter.&lt;/p&gt;

&lt;p&gt;If you’ve ever spent any time around a robot, you definitely have a &lt;em&gt;qualitative&lt;/em&gt; model built up in your head of how lots of parts on the robot work. For example, you probably know that when you apply 12V to a motor, it starts to spin faster. Or if you reverse the wires, it will go the opposite direction. You might also know that if you put two different size gears together and turn one of them, the smaller one will be spinning faster and in the opposite direction of the big one.&lt;/p&gt;

&lt;p&gt;These qualitative models are super useful - these are what we engineers use on a day to day basis to help understand the systems they work on, without the need for calculation. If you’ve ever seen an “old-timer” with a grey beard just magically come up with an answer to a robot design question, blurting out “That will never work!”, there’s a good chance that person was using a mental, qualitative model. Most people refer to these simply as “intuition” - with time working on devices, you start to get a &lt;em&gt;feel&lt;/em&gt; for how they react and interact.&lt;/p&gt;

&lt;p&gt;However, these models have limits. Often, a design may require you to describe &lt;em&gt;how fast&lt;/em&gt; a shaft will turn. “Kinda fast” is a good starting point, but isn’t sufficient. You’ve hit the limit of the mental model, and have to go to the next level.&lt;/p&gt;

&lt;p&gt;Here’s where the mathematical models come in. By doing some analysis, determining some equations, plugging in your operating conditions, and calculating an answer, you get the exact &lt;em&gt;quantity&lt;/em&gt; you need for your design.&lt;/p&gt;

&lt;p&gt;There is a key fact to keep in mind (as our friend George Box reminds us). &lt;em&gt;Mathematical Models&lt;/em&gt; are &lt;em&gt;more&lt;/em&gt; accurate than qualitative notions of how things work, but still do not &lt;em&gt;fully describe&lt;/em&gt; the physical things we care about. And that’s ok, we don’t need a full description. Like any good abstraction, a mathematical model will &lt;em&gt;hide&lt;/em&gt; the details we don’t care about, allowing us to focus on what we &lt;em&gt;do&lt;/em&gt; care about.&lt;/p&gt;

&lt;p&gt;For a concrete example, you will never see me construct a model for a motor that accounts for the magnetic fields of motors nearby. The “background” field strength is never large enough to make a difference in calculations of any quantity used for FRC. &lt;em&gt;Qualitatively&lt;/em&gt;, I can tell you that if the background magnetic field was ever was big enough to matter, we have much more pressing issues on our hands than the couple percent error in our motor torque.&lt;/p&gt;

&lt;p&gt;More detail is not always what you want. &lt;em&gt;The right&lt;/em&gt; amount of detail is always what you want.&lt;/p&gt;

&lt;p&gt;In this post, we’re going to briefly discuss how some models are built up, and quickly dive into a number of examples that will be useful for FRC.&lt;/p&gt;

&lt;h2 id=&quot;techniques-for-building-up-a-model&quot;&gt;Techniques for Building up a Model&lt;/h2&gt;

&lt;h3 id=&quot;first-principles&quot;&gt;First Principles&lt;/h3&gt;

&lt;p&gt;When we set out to create a model of a physical system, there are a couple different approaches.&lt;/p&gt;

&lt;p&gt;The most “academic” approach involves analyzing the system from base physics principles. For FRC, &lt;a href=&quot;https://en.wikipedia.org/wiki/Newton%27s_laws_of_motion&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;F=ma&lt;/script&gt;&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Maxwell%27s_equations&quot;&gt;Maxwell’s equations&lt;/a&gt;, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ideal_gas_law&quot;&gt;Ideal Gas Law&lt;/a&gt; and friends come together with techniques like &lt;a href=&quot;https://en.wikipedia.org/wiki/Free_body_diagram&quot;&gt;Free Body Diagrams&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Differential_equation&quot;&gt;Differential Equations&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_algebra&quot;&gt;Linear Algebra&lt;/a&gt; to create a cohesive set of equations, accurately describing the quantities of interest. Or, at least, what they &lt;em&gt;in theory&lt;/em&gt; should be.&lt;/p&gt;

&lt;p&gt;Whether it’s ever explicitly shown, every mathematical model built up from base principles can be boiled back down into a set of axiomatic equations, based in how fundamental particles of the universe are assumed to interact. I’ll admit, I’ve never actually taken the time to take any of my models &lt;em&gt;all&lt;/em&gt; the way back to these axioms. But I learned them once in college, and know (based on the techniques involved) I always &lt;em&gt;could&lt;/em&gt;, if I ever needed to.&lt;/p&gt;

&lt;p&gt;Soapbox: This is why, even if you find them pointless, all the foundational math and physics courses you take early on in your engineering education are very important. They lay the groundwork allowing you to &lt;em&gt;prove&lt;/em&gt; that your calculations are correct later on. Study them hard, and trust they will be useful. Soapbox over.&lt;/p&gt;

&lt;h3 id=&quot;experimental-data&quot;&gt;Experimental Data&lt;/h3&gt;

&lt;p&gt;When base principles are hard or time consuming, and you have the ability to run experiments on the device in question, there is another approach available. You can gather data from your device under carefully controlled conditions to inform your model of how the device works. You make your model through pure observation. You have to run these experiments many times to ensure your results are consistent, and not being influenced by a factor beyond your control.&lt;/p&gt;

&lt;p&gt;For complex devices, it is often faster to go the experimental route. However, these experimental models lack the detail about the “internals” of the system. There are few (if any) equations to re-arrange and re-solve for a particular quantity of interest - you’re kinda stuck with whatever you measured in the lab. Additionally, lacking details about the internals to the system, it’s harder to know how to redesign a particular device if it’s not working as you need. Though you’ve captured the “externally visible” behavior, you’re lacking insight about the inside.&lt;/p&gt;

&lt;p&gt;Then again, you don’t always need that level of insight. It always depends.&lt;/p&gt;

&lt;h3 id=&quot;google--datasheets&quot;&gt;Google &amp;amp; Datasheets&lt;/h3&gt;

&lt;p&gt;This isn’t exactly a “technique”, as much as something someone should keep in mind. Engineers are lazy. Engineers don’t like doing things twice.&lt;/p&gt;

&lt;p&gt;However, if you as an engineer build a brand new device, you should probably take the time to take some measurements on it, maybe even build up a detailed model of how it should work.&lt;/p&gt;

&lt;p&gt;Two bits of good news: Most engineers who are worth their salt will do experimentation. And, most of them make these experimental results available, in some form. Google is a great way to find out background info on whether someone has already done what you need to do - as long as you know what to search for. &lt;a href=&quot;https://www.google.com/search?q=mathematical+model+of+brushed+DC+motor&quot;&gt;For example, look at the plethora of information available on describing motors!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;datasheet&lt;/em&gt; of a device is another standardized (ish) way of describing their quantitative properties. Sometimes a datasheet provides the exact mathematical model for the device. Other times, it provides the key pieces of information required for the model, and lets you build up the model as you need. Again, Google is my number-one tool for finding datasheets for parts we use. Manufacturers and suppliers frequently keep them on their websites as well.&lt;/p&gt;

&lt;h3 id=&quot;the-need-for-validation&quot;&gt;The Need for Validation&lt;/h3&gt;

&lt;p&gt;No matter how you build up your model, you will always want to spend some time &lt;em&gt;validating&lt;/em&gt; that it is producing meaningful results. Sometimes this means running experiments on the actual device. Other times, it means running your new model in some form of &lt;em&gt;simulation&lt;/em&gt; - getting it into specific operating criteria, and checking results match some expected value.&lt;/p&gt;

&lt;h2 id=&quot;practical-example---gearbox&quot;&gt;Practical Example - Gearbox&lt;/h2&gt;

&lt;p&gt;Let’s start out with a model we can, for the most part, derive from the ground up.&lt;/p&gt;

&lt;p&gt;A set of gears is probably one of the simplest models to create. It aligns well with your intuition, has a beautifully simple formula, and can be easily verified.&lt;/p&gt;

&lt;p&gt;When designing gearboxes, you usually want to know about speed. Given an input speed (which you can control), you want to know what the output speed will be. Since many of you probably already know the answer, let’s just get that over with:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{out}(t) = -\frac{N_{in}}{N_{out}} \omega_{in}(t)&lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\omega_{in}(t)&lt;/script&gt; is the rotational speed of the input shaft at time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;N_{out}&lt;/script&gt; is the number of teeth on the output gear&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;N_{in}&lt;/script&gt; is the number of teeth on the input gear&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;\omega_{out}(t)&lt;/script&gt; is the rotational speed of the input shaft at time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it - it’s just the ratio of the teeth!&lt;/p&gt;

&lt;h3 id=&quot;spinning-levers&quot;&gt;Spinning Levers&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gears_art.png&quot; alt=&quot;Gear Artwork&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: etc.usf.edu&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The key thing to keep in mind: &lt;a href=&quot;https://www.youtube.com/watch?v=JOLtS4VUcvQ&quot;&gt;&lt;em&gt;gears&lt;/em&gt; are just &lt;em&gt;spinning levers&lt;/em&gt;&lt;/a&gt;. When you push on one, the other moves. The point at which the teeth mesh together is the fulcrum. Moving that mesh-point closer to the center of either wheel changes the ratio of motion between the two sides.&lt;/p&gt;

&lt;p&gt;This relationship could be derived intuitively. Make the assumption that the teeth are always in mesh, and never slip relative to each other. Given this, it stands to reason that if there are 3x the number of teeth on the output, the input would have to rotate &lt;em&gt;3 times&lt;/em&gt; to get a single rotation on the output.&lt;/p&gt;

&lt;p&gt;The logic flow for this: One tooth of motion on the input means one tooth of motion on the output. If you don’t have this 1 to 1 relationship, it means gears are slipping. Which means that metal is shredding off in your gearboxes. Which is bad news bears. You should fix that before attempting any more math.&lt;/p&gt;

&lt;p&gt;A more rigorous way to describe this relationship is to do it from base principles and mathematical manipulations. Let’s give that a shot.&lt;/p&gt;

&lt;p&gt;To start, assume that your teeth are “Ideal” - incredibly small, and super strong. They never slip relative to each other. We outright ignore any tooth geometry, and just model the gears as two differently-sized pancakes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gears_basic.png&quot; alt=&quot;gears_basic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The assumption of ideal teeth allows us to say that the &lt;em&gt;tangential velocity&lt;/em&gt; (the linear speed of the outside edge of the pancake) must be the same at their mesh point. From geometry, I’ll give the equation that relates the &lt;em&gt;rotational velocity&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt; to the &lt;em&gt;tangential velocity&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;v(t)&lt;/script&gt;. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v(t) = 2 \pi R \omega(t)&lt;/script&gt;

&lt;p&gt;We actually can write that equation twice, once for each gear:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{in}(t) = 2 \pi R_{in} \omega_{in}(t)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{out}(t) = 2 \pi R_{out} \omega_{out}(t)&lt;/script&gt;

&lt;p&gt;Then, based on our ideal mesh assumption, we can set the two equal to each other. Note that since the tangential velocity is measured to the left of one center-point, but the right of the other, we need to introduce a negative sign as well. &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{in}(t) = -v_{out}(t)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;2 \pi R_{in} \omega_{in}(t) = -2 \pi R_{out} \omega_{out}(t)&lt;/script&gt;

&lt;p&gt;Canceling terms, we find ourselves at:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;R_{in} \omega_{in}(t) = -R_{out} \omega_{out}(t)&lt;/script&gt;

&lt;p&gt;And solving for the output speed, finally,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{out}(t) = -\frac{R_{in}}{R_{out}} \omega_{in}(t)&lt;/script&gt;

&lt;p&gt;Sweet! Almost the same as the equation we started with.&lt;/p&gt;

&lt;h3 id=&quot;radius-to-teeth&quot;&gt;Radius to Teeth&lt;/h3&gt;

&lt;p&gt;But wait! Our initial equation used number of teeth, not radius. Not to worry!&lt;/p&gt;

&lt;p&gt;Each tooth and gap cycle contributes a certain, constant amount of radius to the circle. Additionally, the per-tooth radius length has to be the same on both gears. This is due to &lt;a href=&quot;https://www.geartechnology.com/issues/1084x/back-to-basics.pdf&quot;&gt;some of the constraints required by good tooth design&lt;/a&gt;. Additionally, we aren’t actually free to choose &lt;em&gt;any&lt;/em&gt; radius we want. If we resulted in a fractional tooth, well, that wouldn’t work (Think about it for a second…).&lt;/p&gt;

&lt;p&gt;Therefor, the equation gets quoted not in terms of actual radius, but in terms of tooth count.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{out}(t) = -\frac{N_{in}}{N_{out}} \omega_{in}(t)&lt;/script&gt;

&lt;p&gt;Boom Shackalacka.&lt;/p&gt;

&lt;h3 id=&quot;on-torque&quot;&gt;On Torque&lt;/h3&gt;

&lt;p&gt;Torque is a concept that comes up a lot, isn’t something that most freshman start off knowing about, and frankly isn’t often explained well in physics classes.&lt;/p&gt;

&lt;p&gt;I always think of torque is “turney force” - force that acts in a circle. Like when you turn a wrench, and tighten a bolt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/torque_on_wrench.png&quot; alt=&quot;Torque from wrench&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: scienceres-edcp-educ.sites.olt.ubc.ca&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Gears transmit torque from one to the other. We won’t get too much into the math, but it’s not hard to derive using the same lever-like models we eluded to before.&lt;/p&gt;

&lt;p&gt;Torque in a gearbox is just a ratio, like speed, except inverted:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau_out(t) = -\frac{N_{out}}{N_{in}} \tau_in(t)&lt;/script&gt;

&lt;p&gt;No need to worry about this too much now, but we’ll come back to it later on.&lt;/p&gt;

&lt;h2 id=&quot;practical-example---wheel-with-mass&quot;&gt;Practical Example - Wheel with Mass&lt;/h2&gt;

&lt;p&gt;Here, we’ll start to introduce the glory of using Google to find answers. The key is knowing what to look for.&lt;/p&gt;

&lt;p&gt;We will attempt to create a model of a rotating wheel, such as the ones used to launch gamepieces through holes or into hoppers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/shooter_wheel_1640.png&quot; alt=&quot;shooter wheel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: Team 1640&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The key background info to know: Newton’s second law &lt;script type=&quot;math/tex&quot;&gt;F=ma&lt;/script&gt; has a &lt;em&gt;rotational&lt;/em&gt; form.&lt;/p&gt;

&lt;h3 id=&quot;background---newtons-second-law&quot;&gt;Background - Newton’s Second Law&lt;/h3&gt;

&lt;p&gt;So, hopefully, you’ve at least heard the basics of Newton’s laws in school. They form the basis of “classical mechanics” - the study of how bodies of mass move around (as long as they aren’t too small, and don’t move too fast). The second law is the one most commonly quoted in its equation form, but can be understood qualitatively. Whenever a &lt;em&gt;force&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; is applied to some object with mass &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;, it will begin to &lt;em&gt;change velocity&lt;/em&gt; at a rate &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;. Forces are how we &lt;em&gt;change&lt;/em&gt; the velocity of an object.&lt;/p&gt;

&lt;p&gt;It should be noted that &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; are usually &lt;em&gt;vector&lt;/em&gt; quantities. That is to say they have both magnitude &lt;em&gt;and&lt;/em&gt; a direction. You can push with 5 lbs of force upward or downward, to the left or to the right. The magnitude is always 5 lbs, but the direction changes. To denote this vector quantity, you will often see the equation written as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vec{F} = m\vec{a}&lt;/script&gt;

&lt;p&gt;The cute little arrows over &lt;script type=&quot;math/tex&quot;&gt;\vec{F}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\vec{a}&lt;/script&gt; indicate they have a direction.&lt;/p&gt;

&lt;p&gt;The key takeaway is that the acceleration happens &lt;em&gt;in the same direction&lt;/em&gt; as the force. If an object is still, and you push on it in a certain direction, it begins to accelerate (ie, go faster) &lt;em&gt;in that direction&lt;/em&gt;. If an object is already moving, and you push against its motion, it &lt;em&gt;slows down&lt;/em&gt;, since the force opposes the direction of motion - effectively a &lt;em&gt;negative&lt;/em&gt; acceleration.&lt;/p&gt;

&lt;h3 id=&quot;newtons-second-in-rotational&quot;&gt;Newton’s Second in Rotational&lt;/h3&gt;

&lt;p&gt;To me, the rotational form of &lt;script type=&quot;math/tex&quot;&gt;F=ma&lt;/script&gt; almost feels like cheating. The good news is that it makes it pretty simple, but perhaps not profound. The reason for this is that all three quantities in &lt;script type=&quot;math/tex&quot;&gt;F=ma&lt;/script&gt; have &lt;a href=&quot;http://hyperphysics.phy-astr.gsu.edu/hbase/mi.html&quot;&gt;a rotational equivalent we can use&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you hadn’t noticed yet, &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; are both quantities that involve &lt;em&gt;linear&lt;/em&gt; measurement. This is the nature of vectors - they define &lt;em&gt;lines&lt;/em&gt; from one point to another. Acceleration is described &lt;em&gt;along a certain line&lt;/em&gt;, as is force.&lt;/p&gt;

&lt;p&gt;On the other hand, mass tends to just kinda “sit there” - it’s a property of the object, with a value, but no real direction or information about location required. As far as Newton’s Second law is concerned, all the mass is &lt;em&gt;modeled&lt;/em&gt; to be at a single point, where force is applied.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Newton’s Second Law for rotation is exactly the same as the linear version, just swapping out the linear quantities for their rotational equivalent.&lt;/p&gt;

&lt;p&gt;Acceleration is easy to re-define - it’s just called &lt;em&gt;rotational acceleration&lt;/em&gt;. Rather than measuring the rate of change of linear velocity (in m/s, per sec, for example), it measures the rate of change of rotational velocity (in deg/sec, per sec, for example). Think of it as the rate at which a rotating wheel speeds up or slows down. If you want your wheel to rotate faster, that means you want its &lt;em&gt;rotational acceleration&lt;/em&gt; to be positive.&lt;/p&gt;

&lt;p&gt;Rotational Acceleration is denoted with the Greek letter alpha - &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Force also has a rotational analog. &lt;em&gt;Torque&lt;/em&gt; is simply rotational force. Torque is defined as a force applied at a distance to some center of rotation, tending to cause rotational motion. Whenever you turn a wrench or a screwdriver, you are applying a &lt;em&gt;torque&lt;/em&gt; to the bolt or screw, which causes it to turn. Whenever your car’s engine revs up while you’re in gear, a &lt;em&gt;torque&lt;/em&gt; is applied to the back wheels (often erroneously referred to as “torque to the ground”). This in turn causes the wheels to turn, and (hopefully) the car to move.&lt;/p&gt;

&lt;p&gt;Torque is denoted with the Greek letter tau - &lt;script type=&quot;math/tex&quot;&gt;\tau&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Mass, turns out, is where things get a bit interesting. No longer can we simply account for the total &lt;em&gt;amount&lt;/em&gt; of stuff in the moving object, we have to account for &lt;em&gt;where it is at&lt;/em&gt; relative to the center of rotation. This combined notion of quantity and position can still be calculated down to a single number, called the &lt;em&gt;moment of inertia&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Just as mass can be thought of as “tendency of an object to resist changes in velocity”, the moment of inertia is an object’s tendency to resist changes in rotational velocity.&lt;/p&gt;

&lt;p&gt;The way I personally like to think about it - consider the energy of tiny subsections of our spinning object. At any given rotational velocity, all will have the same rotational velocity. However, the bits near the center will have less &lt;em&gt;linear&lt;/em&gt; velocity. They’ll be traveling &lt;em&gt;slower&lt;/em&gt;, at least in a linear sense. This means they have less energy, and would hurt less if they hit you. If you want to change the speed of a rotating bit of mass, it’s easier if the rotating bit is very close to center of rotation, rather than really far away.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/outsideFasterThanInside.png&quot; alt=&quot;outside goes faster than inside&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These moments of inertia still boil down to a single number, and are usually calculated with integrals. Deriving them from scratch is a classic calc-II homework problem. You should definitely try it at some point in your life.&lt;/p&gt;

&lt;p&gt;However, I’ve already passed all my calculus courses, &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_moments_of_inertia&quot;&gt;so I just look them up online.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; can mean things like “mass” or “mega” or “million”, Moment of Inertia is indicated with the letter &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt;. Even though &lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt; is also used for electric current. I’m sorry, I didn’t make any of this up. There aren’t many letters available. Usually it’s clear from the context of the equation which is meant…&lt;/p&gt;

&lt;h3 id=&quot;assembling-the-equations&quot;&gt;Assembling the Equations&lt;/h3&gt;

&lt;p&gt;Ok, starting with Moment of Inertia…&lt;/p&gt;

&lt;p&gt;Partway down the table, you’ll see an equation for “Solid cylinder of radius r”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Moment_of_inertia_solid_cylinder.svg/1920px-Moment_of_inertia_solid_cylinder.svg.png&quot; alt=&quot;Solid Cylinder&quot; /&gt;
&lt;em&gt;source: wikipedia.org&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recalling that we’re attempting to create a model of a shooter wheel, this should look pretty familiar. Think wheel on a stick, rotated around the axis of the cylinder-shape (Z axis in the wikipedia picture). Wikipedia tells us the equation to use is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I = \frac{1}{2}mr^{2}&lt;/script&gt;

&lt;p&gt;To quickly break this down:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; is the mass of the whole shooter wheel
&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt; is its radius&lt;/p&gt;

&lt;p&gt;We assume that the mass is reasonably evenly distributed throughout the whole radius. For &lt;a href=&quot;http://www.wcproducts.net/colson-wheels&quot;&gt;something like a colson wheel&lt;/a&gt;, this is likely true. If you have &lt;a href=&quot;https://www.andymark.com/products/8-in-plaction-wheel-with-blue-nitrile-tread?via=Z2lkOi8vYW5keW1hcmsvV29ya2FyZWE6OkNhdGFsb2c6OkNhdGVnb3J5LzVhZjhlMjQ4YmM2ZjZkNWUzNmYyMzkzMQ&quot;&gt;something more like a Plaction Wheel&lt;/a&gt;, you might want to pick a different equation.&lt;/p&gt;

&lt;p&gt;Now, we can substitute all the variables into Newton’s Second Law for Rotational Motion:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau(t) = I \alpha(t)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau(t) = \left( \frac{1}{2}mr^{2} \right) \alpha(t)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha(t) =  \frac{2}{mr^{2}} \tau(t)&lt;/script&gt;

&lt;p&gt;And there we have it! A simple description of the motion of our shooter wheel, given a certain &lt;em&gt;torque&lt;/em&gt; (or “turney force”) at its input shaft! This is the equation we’ll need later on.&lt;/p&gt;

&lt;p&gt;As a quick detour, let’s throw in a bit of calculus. We can describe the wheel’s velocity over time as an integral.&lt;/p&gt;

&lt;p&gt;In general, we know that velocity &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt; is the &lt;em&gt;integral&lt;/em&gt; of acceleration &lt;script type=&quot;math/tex&quot;&gt;\alpha(t)&lt;/script&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega(t) = \int \alpha(t)&lt;/script&gt;

&lt;p&gt;Applying more proper calculus and our previous equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega(t) = \int_{0}^{t} \frac{2}{mr^{2}} \tau(x) dx + \omega(0)&lt;/script&gt;

&lt;p&gt;In general, we can assume &lt;script type=&quot;math/tex&quot;&gt;\omega(0)&lt;/script&gt; is in fact 0, since our robot starts the match from a disabled state.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega(t) = \int_{0}^{t} \frac{2}{mr^{2}} \tau(x) dx&lt;/script&gt;

&lt;p&gt;What this equation shows is is that to know the velocity of our shooter wheel, all we have to do is &lt;em&gt;add up&lt;/em&gt; all the previous torque inputs we ever gave to it, multiply each measurement by the moment of inertia (just a constant number, tied to the wheel’s construction), and Bob’s your uncle! We’ve come up with an equation that calculates the shooter speed over time, as a function of how much torque you apply to it.&lt;/p&gt;

&lt;p&gt;Ok, detour over. Hope you enjoyed Calculusland!&lt;/p&gt;

&lt;h2 id=&quot;practical-example---brushed-dc-motor&quot;&gt;Practical Example - Brushed DC Motor&lt;/h2&gt;

&lt;h3 id=&quot;basic-description&quot;&gt;Basic Description&lt;/h3&gt;

&lt;p&gt;A motor, fundamentally, is a device which converts &lt;em&gt;electrical power&lt;/em&gt; into &lt;em&gt;mechanical power&lt;/em&gt;. Specifically for our analysis, we’ll look at it as a device which &lt;em&gt;takes an input voltage and current&lt;/em&gt; and produces a &lt;em&gt;mechanical torque&lt;/em&gt; on its output shaft. Presumably this is attached to something which maybe fights against the rotation, but ultimately rotates. This speed of the input shaft “feeds bacK” to the motor as another input.&lt;/p&gt;

&lt;p&gt;The key thing to realize - the motor doesn’t directly output rotation. It outputs a torque - a force on something attached to it. Rotation only occurs if the thing attached to it starts to rotate in response to that torque.&lt;/p&gt;

&lt;p&gt;We’ll be analyzing &lt;a href=&quot;https://en.wikipedia.org/wiki/Brushed_DC_electric_motor&quot;&gt;&lt;em&gt;brushed DC Motors&lt;/em&gt;&lt;/a&gt;. This covers CIM motors, 775 pro, and pretty much every FRC motor used up till NEO’s in 2019 (sorry Rev). Though they come in different sizes, shapes, weights, and powers, they all fundamentally act the same way:&lt;/p&gt;

&lt;p&gt;Electric current flows through &lt;em&gt;coils of wire&lt;/em&gt;, &lt;a href=&quot;https://physics.stackexchange.com/questions/187512/how-does-electricity-produce-magnetisim&quot;&gt;generating a magnetic field&lt;/a&gt;. Trust me, it happens. The coils are mounted on a rotating shaft, aligned within a set of &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnet&quot;&gt;&lt;em&gt;permanent magnets&lt;/em&gt;&lt;/a&gt;, so that the generated magnetic field from the coils opposes that of the permanent magnets. This opposing field causes a force on the rotating shaft, which is transferred to the motor’s output shaft. A special electromechanical device called a &lt;em&gt;commutator&lt;/em&gt; ensures that the coil’s magnetic field always opposes the magnet’s fields, throughout the whole range of rotation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.mouser.com/images/microsites/BrushedMotors-Fig1.jpg&quot; alt=&quot;motor schematic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: mouser.com&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;torque&quot;&gt;Torque&lt;/h3&gt;

&lt;p&gt;The first key takeaway from our description: a flowing electric current is the &lt;em&gt;cause&lt;/em&gt; of the force on the output shaft. This leads to the first part of the equation for motors:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau(t) = K_T I(t)&lt;/script&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;I(t)&lt;/script&gt; is the current flowing through the motor at time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;K_T&lt;/script&gt; is a constant value, called the “Torque Constant”.&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\tau(t)&lt;/script&gt; is the torque at the output shaft of the motor at time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The Torque Constant &lt;script type=&quot;math/tex&quot;&gt;K_T&lt;/script&gt; is something you could try to calculate from the geometry of the motor, the properties of the coils of wire, the strength and shape of the magnets, and a whole slew of other properties. If you were to do all the physics and math you’d be able to generate the relationship seen above, with a very complex and inaccurate version of &lt;script type=&quot;math/tex&quot;&gt;K_T&lt;/script&gt;. For most motors, it is determined experimentally.&lt;/p&gt;

&lt;p&gt;Most motors should list it in their datasheet, at least indirectly. If you don’t see anything labeled &lt;script type=&quot;math/tex&quot;&gt;K_T&lt;/script&gt; or “Torque constant”, you can also just quickly calculate it from the &lt;em&gt;stall conditions&lt;/em&gt; of the motor. Stall conditions provide one particular &lt;script type=&quot;math/tex&quot;&gt;\tau(t)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;I(t)&lt;/script&gt; pair to use:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;K_T = \frac{\tau(t)}{I(t)} = \frac{\tau_{stall}}{I_{stall}}&lt;/script&gt;

&lt;h3 id=&quot;speed&quot;&gt;Speed&lt;/h3&gt;

&lt;p&gt;The shaft speed impact is a bit harder to think through, but not too bad.&lt;/p&gt;

&lt;p&gt;You may have heard at some point in your life that all motors can act as generators, and all generators can act as motors. Even if you haven’t heard this, maybe you’ve seen your robot electronics power on when you push your robot along the ground, even without a battery in it? You’re not going crazy, your motors are acting as generators and powering the system!&lt;/p&gt;

&lt;p&gt;Though the equivalency expressed above is largely true, I prefer a slightly different twist: &lt;em&gt;every motor is simultaneously a motor and generator&lt;/em&gt;. This simultaneous existence should make sense - there’s nothing that physically changes about a motor when you rotate its shaft, versus when you power it electrically. It doesn’t magically know when it needs to switch modes. Both modes must be present at all times.&lt;/p&gt;

&lt;p&gt;You’ve probably also noticed that when you plug in a motor straight to 12V &lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, it will zoom up to some top speed, stop accelerating, and maintain that top speed. Datasheets call this the “unloaded” or “runout” speed.&lt;/p&gt;

&lt;p&gt;But wait! If there’s current flowing, that means there should be torque, right? Which means there should be acceleration?&lt;/p&gt;

&lt;p&gt;In a sense, torque is the “Motor” part of the “simultaneous motor and generator”. The generator half explains the capped speed.&lt;/p&gt;

&lt;p&gt;Whenever you have coils of wire rotating within a magnetic field, a &lt;em&gt;voltage&lt;/em&gt; is formed across the coil. Voltages, when present in well-behaved circuits, will increase or decrease current flow. This is how generators work - spin a coil of wire near permanent magnets,a voltage is created, which enables current to flow out.&lt;/p&gt;

&lt;p&gt;Hey wait. Motors have coils of wires spinning in a magnetic field. Yup. There’s no trick here - the fact that the wires are spinning within the magnets inside motors causes a new voltage to be &lt;em&gt;induced&lt;/em&gt; within the wires, which actually &lt;em&gt;opposes&lt;/em&gt; the flow of current. This induced voltage is called “Back EMF”, or “Back ElectroMotive Force”.&lt;/p&gt;

&lt;p&gt;Very similarly to torque (as you would hopefully expect from all the symmetry we’ve seen so far), this back EMF is linearly related to speed:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_{emf}(t) = K_V \omega(t)&lt;/script&gt;

&lt;p&gt;This back-force happens in the electrical space, so it’s good for us to look at an electrical model of the motor:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/motorModel.png&quot; alt=&quot;Motor Model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the left side, we see the input wires to the motor, along with two measurements you may already be familiar with. One is the &lt;em&gt;applied voltage&lt;/em&gt; &lt;script type=&quot;math/tex&quot;&gt;V_{in}(t)&lt;/script&gt; - this is the command you give to a motor controller, and the average voltage it outputs to the motor. Usually this will be about +12V for full forward, -12V for full reverse, and 0V at rest (though the numbers usually change with battery charge level). The other quantity is the &lt;em&gt;current&lt;/em&gt; flowing through the motor, &lt;script type=&quot;math/tex&quot;&gt;I(t)&lt;/script&gt;. This might be measured by a motor controller (if you have a nice Talon SRX or similar), or measured by the PDB itself. Either way, you usually don’t directly control it, it’s just a property of the current state of the whole system.&lt;/p&gt;

&lt;p&gt;You’ll notice two things to the right, on the “inside” of the motor. One is a resistor - this electrical component &lt;em&gt;models&lt;/em&gt; the resistance of the long coils of wire inside the motor. It’s not literally a resistor component inside the motor, just the inherent resistance from having lots of wire. Some models also include an &lt;em&gt;inductor&lt;/em&gt; to model the “cross-talk” between the coils, but I’ve avoided it to make the calculations simpler. Often, it’s small enough you can forget about it.&lt;/p&gt;

&lt;p&gt;Finally, the voltage source to the far right indicates the &lt;em&gt;back EMF&lt;/em&gt;, which we denote with &lt;script type=&quot;math/tex&quot;&gt;V_{emf}(t)&lt;/script&gt;. Even though the physical mechanism looks very different, the electrical effect is the same as the voltage provided by your motor controller.&lt;/p&gt;

&lt;p&gt;When analyzing a circuit diagram like the one above, we use &lt;a href=&quot;https://en.wikipedia.org/wiki/Kirchhoff%27s_circuit_laws&quot;&gt;Kirchhoff’s Circuit Laws&lt;/a&gt; to construct equations. The laws give us a few facts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The current through every device must be &lt;em&gt;the same&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The sum of voltages around the (one and only) loop must equal zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since &lt;script type=&quot;math/tex&quot;&gt;V_{in}&lt;/script&gt; is oriented backward relative to the +/- direction defined for the other components, it gets a minus sign.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;0 = -V_{in}(t) + V_R(t) + V_{emf}(t)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;V_{in}(t) = V_R(t) + V_{emf}(t)&lt;/script&gt;

&lt;p&gt;If you recall &lt;em&gt;Ohm’s Law&lt;/em&gt; from the &lt;a href=&quot;/blog_posts/2019/06/05/electronics_basics.html&quot;&gt;electronics introduction&lt;/a&gt;, you’ll see we can re-write the voltage across the resistor (&lt;script type=&quot;math/tex&quot;&gt;V_R&lt;/script&gt;) in terms of the motor current and the resistance. Additionally, as shown before, the back EMF voltage can be calculated from the speed of the motor.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;V_{in}(t) = R I(t) + K_V \omega(t)&lt;/script&gt;

&lt;p&gt;Solving for current:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;I(t) = \frac{1}{R} \left( V_{in}(t)  - K_V \omega(t) \right)&lt;/script&gt;

&lt;p&gt;Finally, we can use our current/torque relationship to solve for torque:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{K_T} \tau(t)  = \frac{1}{R} \left( V_{in}(t)  - K_V \omega(t) \right)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau(t) = \frac{K_T}{R} \left( V_{in}(t)  - K_V \omega(t) \right)&lt;/script&gt;

&lt;h2 id=&quot;practical-example---wheeled-shooter-system&quot;&gt;Practical Example - Wheeled Shooter System&lt;/h2&gt;

&lt;p&gt;Alright. It’s time to combine our equations together. Here’s what we’re looking to describe: We want create an equation for speed of our shooter wheel, given the &lt;em&gt;applied voltage&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The basic process - the applied voltage in the motor produce a torque. This torque is transferred through a set of gears with a particular ratio. This torque acts on the spinning mass, causing an acceleration. Integrating that acceleration over time produces the speed.&lt;/p&gt;

&lt;h3 id=&quot;building-the-full-equation&quot;&gt;Building the Full Equation&lt;/h3&gt;

&lt;p&gt;Starting from our most recent equation, we can calculate the output torque of the motor:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau_{motor}(t) = \frac{K_T}{R} \left( V_{in}(t)  - K_V \omega_{motor}(t) \right)&lt;/script&gt;

&lt;p&gt;The motor torque is the &lt;em&gt;input&lt;/em&gt; to the gearbox. We know we can also calculate the output torque of the gearbox:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tau_{wheel}(t) = \frac{N_{out}}{N_{in}} \frac{K_T}{R} \left( V_{in}(t)  - K_V \omega_{motor}(t) \right)&lt;/script&gt;

&lt;p&gt;And, given the torque at the output of the gearbox (which is the same as is applied to the shooter wheel), we can calculate the acceleration of the shooter wheel:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha_{wheel}(t)= \frac{2}{mr^{2}} \left( \frac{N_{out}}{N_{in}} \frac{K_T}{R} \left( V_{in}(t)  - K_V \omega_{motor}(t) \right) \right)&lt;/script&gt;

&lt;p&gt;And, we can use the gearbox ratio to get the &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt;’s are in terms of the shooter wheel speed:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha_{wheel}(t) = \frac{2}{mr^{2}} \left( \frac{N_{out}}{N_{in}} \frac{K_T}{R} \left( V_{in}(t)  - K_V \frac{N_{in}}{N_{out}} \omega_{wheel}(t) \right) \right)&lt;/script&gt;

&lt;p&gt;And finally, we combine constants to make stuff a bit easier to read (hopefully):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha_{wheel}(t) = \frac{2N_{out}K_T}{mr^{2}N_{in}R} V_{in}(t)  -   \frac{2K_VK_T}{mr^{2}R} \omega_{wheel}(t)&lt;/script&gt;

&lt;p&gt;Actually, this isn’t all that bad. Really, we have something like this:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\alpha_{wheel}(t) = C_1 V_{in}(t) - C_2 \omega_{wheel}(t)&lt;/script&gt;

&lt;p&gt;With&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_1 = \frac{2N_{out}K_T}{mr^{2}N_{in}R}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C_2 = \frac{2K_VK_T}{mr^{2}R}&lt;/script&gt;

&lt;p&gt;Both of which are just constant values (ie, numbers) related to the physical parameters of the system. Calculate them once, never think about it again. Nothing scary - just numbers.&lt;/p&gt;

&lt;p&gt;The scary part to me - we’ve got a &lt;em&gt;differential equation&lt;/em&gt;. That’s right - remember how acceleration is the derivative of velocity? &lt;script type=&quot;math/tex&quot;&gt;\alpha(t)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt; aren’t just two random, independent values. Our equation really is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{d\omega_{wheel}}{dt} = C_1 V_{in}(t) - C_2 \omega_{wheel}(t)&lt;/script&gt;

&lt;p&gt;Which, indeed, is an equation which involves a function &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt; &lt;em&gt;and its derivative&lt;/em&gt;  &lt;script type=&quot;math/tex&quot;&gt;\frac{d\omega}{dt}&lt;/script&gt;. This makes it a differential equation.&lt;/p&gt;

&lt;h3 id=&quot;tackling-the-differential-equation&quot;&gt;Tackling the Differential Equation&lt;/h3&gt;
&lt;p&gt;The good news - this is a &lt;em&gt;very special&lt;/em&gt; type of differential equation - It’s called a “First Order, Ordinary Differential Equation” which, as it turns out, &lt;a href=&quot;https://en.wikipedia.org/wiki/Ordinary_differential_equation&quot;&gt;has a well defined analytical solution&lt;/a&gt;. Any college engineering program worth its salt will spend at least one semester teaching you about this.&lt;/p&gt;

&lt;p&gt;There’s a different way I prefer to introduce high schoolers to how to solve this, though. Let’s cheat a bit, and pretend we’re software. Software isn’t looking at the speed at &lt;em&gt;every&lt;/em&gt; time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;, in some continuous fashion. Instead, it is &lt;em&gt;sampling&lt;/em&gt; values at regular intervals. The length of the interval is called the “sample time”, indicated by &lt;script type=&quot;math/tex&quot;&gt;T_s&lt;/script&gt;. It is usually around 20ms on the roboRIO, or 1ms on a talon SRX.&lt;/p&gt;

&lt;p&gt;Let us quickly define some new nomenclature - when we describe some function that changes over time, we usually write it as &lt;script type=&quot;math/tex&quot;&gt;\omega(t)&lt;/script&gt;, where the &lt;script type=&quot;math/tex&quot;&gt;(t)&lt;/script&gt; indicates that &lt;script type=&quot;math/tex&quot;&gt;\omega&lt;/script&gt; is in fact a function defined for &lt;em&gt;every&lt;/em&gt; floating-point value time &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;. There’s another way of representing functions that indicates they are only really defined at regularly-sampled intervals, with the intervals counted by some integer &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;. The parenthesis are replaced with square brackets to indicate the sampled nature of the function, rather than a continuous definition.&lt;/p&gt;

&lt;p&gt;So, if we wanted to represent how &lt;em&gt;software&lt;/em&gt; sees this function, we write down &lt;script type=&quot;math/tex&quot;&gt;\omega[n]&lt;/script&gt;, where integer &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is in the range &lt;script type=&quot;math/tex&quot;&gt;0, 1, 2, 3, ...&lt;/script&gt;, and indicates the &lt;em&gt;loop iteration&lt;/em&gt; of software. For any given sample time &lt;script type=&quot;math/tex&quot;&gt;T_s&lt;/script&gt;, we can always know that &lt;script type=&quot;math/tex&quot;&gt;t = T_sn&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The key reason to do this - in discrete time, derivatives become &lt;em&gt;very&lt;/em&gt; easy to do - they’re just subtraction:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{d\omega}{dt} \Rightarrow \frac{(\omega[n] - \omega[n-1])}{T_s}&lt;/script&gt;

&lt;p&gt;This should make a decent amount of sense if you stare at it. Remember that &lt;em&gt;derivatives&lt;/em&gt; are like the &lt;em&gt;slope&lt;/em&gt; of a graph of the function, and slope is &lt;em&gt;rise&lt;/em&gt; over &lt;em&gt;run&lt;/em&gt;, or &lt;script type=&quot;math/tex&quot;&gt;dy&lt;/script&gt; over &lt;script type=&quot;math/tex&quot;&gt;dx&lt;/script&gt;. This is exactly what we have here - the change in &lt;script type=&quot;math/tex&quot;&gt;\omega&lt;/script&gt; divided by the change in time.&lt;/p&gt;

&lt;p&gt;Switching our equation to be discrete-time (“software view”), and substituting in the derivative:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{(\omega_{wheel}[n] - \omega_{wheel}[n-1])}{T_s}= C_1 V_{in}[n] - C_2 \omega_{wheel}[n]&lt;/script&gt;

&lt;p&gt;And re-arranging:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(\omega_{wheel}[n] + T_s C_2 \omega_{wheel}[n]  )= T_s C_1 V_{in}[n] + \omega_{wheel}[n-1]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n]  ( 1 + T_s C_2 )= T_s C_1 V_{in}[n] + \omega_{wheel}[n-1]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\omega_{wheel}[n] = \frac{T_s C_1 V_{in}[n] + \omega_{wheel}[n-1]}{( 1 + T_s C_2 )}&lt;/script&gt;

&lt;p&gt;And there we have it! An equation for the present speed of the shooter wheel, in terms of things we know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The speed calculated from the previous loop - &lt;script type=&quot;math/tex&quot;&gt;\omega_{wheel}[n-1]&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;The voltage getting applied to the motor this loop - &lt;script type=&quot;math/tex&quot;&gt;V_{in}[n]&lt;/script&gt;&lt;/li&gt;
  &lt;li&gt;Constants related to our physical system and software design - &lt;script type=&quot;math/tex&quot;&gt;C_1&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;C_2&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;T_s&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whoof. There we go. As my dog would say, that was ruff. But we’ve made it. We’ve arrived. We have our equation.&lt;/p&gt;

&lt;h2 id=&quot;non-time-domain-analysis-methods&quot;&gt;Non-time-domain Analysis Methods&lt;/h2&gt;

&lt;p&gt;Ok. So to levelset - so far, we’ve been using what controls engineers would call “Time Domain” analysis. This all means that our equations have &lt;em&gt;time&lt;/em&gt; as the independent variable. Whether we represent it as a continuously changing quantity &lt;script type=&quot;math/tex&quot;&gt;(t)&lt;/script&gt; or a discretely sampled value &lt;script type=&quot;math/tex&quot;&gt;[n]&lt;/script&gt;, we use time as our variable that marches along, and that we analyze behavior &lt;em&gt;across&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Time domain is intuitive. You can very easily think about how how physical quantities (like speed or voltage) change over time.&lt;/p&gt;

&lt;p&gt;However, this is not usually how controls engineers work. The reason is the same one we ran into right at the end - &lt;em&gt;differential equations&lt;/em&gt;. These are notoriously difficult to solve and work with in the time domain.&lt;/p&gt;

&lt;p&gt;As it turns out, or friends from pure mathematical fields have devised a whole slew of other tools to use. You don’t have to use &lt;em&gt;time&lt;/em&gt; as your independent variable - you can in fact use something else. &lt;em&gt;Frequency&lt;/em&gt;, or a complex number representing frequency-like information, is the more common choice. Just like our quantization assumption, these frequency-domain analysis techniques convert the difficult task of differentiation and integration into simpler tasks like multiplication and division.&lt;/p&gt;

&lt;p&gt;These transforms are not trivial concepts to cover, so I am calling them out of scope for now. If you’re interested in digging into these topics, the terminology to look up is &lt;a href=&quot;https://en.wikipedia.org/wiki/Fourier_transform&quot;&gt;Fourier Transform&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/S_transform&quot;&gt;S transform&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Z-transform&quot;&gt;Z transform&lt;/a&gt;. These topics are also covered in the &lt;a href=&quot;https://file.tavsys.net/control/controls-engineering-in-frc.pdf&quot;&gt;Control Systems in FRC&lt;/a&gt; textbook.&lt;/p&gt;

&lt;h2 id=&quot;on-units&quot;&gt;On Units&lt;/h2&gt;

&lt;p&gt;One piece of advice I would offer while working on these models - &lt;em&gt;units will kill you&lt;/em&gt;. You will want to be super careful and rigorous in ensuring all your math and your constants are using the same units, and when you write your code, the units assumptions come in as well. We’ve kinda skirted the whole topic so far, as to not clutter the explanation. Still though, you have to be careful.&lt;/p&gt;

&lt;p&gt;Honestly, I’ve only ever had success making these models using &lt;em&gt;metric&lt;/em&gt; units, and being super-consistent on what prefixes I choose for each value. I do all the internal math and constants calculations in metric. Imperial has too many “gotchas” for me on the conversions.&lt;/p&gt;

&lt;p&gt;However, I’m from the US. I grew up using feet and lbs, and I still have a far more intuitive understanding of what “10 feet per second” or “15 foot pounds of torque” looks and feels like - much more so that “15 meters per second” or “20 Newtons”. For this reason, any time we report values to a dashboard or log them to file, we convert back to imperial. It’s totally computational overhead, but I’d prefer to let the processor do that heavy lifting, and have a &lt;em&gt;feeling&lt;/em&gt; for what the numbers mean, rather than waste my time doing mental math to do the conversion.&lt;/p&gt;

&lt;p&gt;At the end of the day though, what matters most is that you produce a functional robot, and can tune and change things on it quickly. However you can best accomplish this is the right path for &lt;em&gt;your&lt;/em&gt; team.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I feel as though we’ve come a very long way, but we also still have quite a ways to go yet! Hopefully you’ve enjoyed this worked-example of creating a mathematical model for a shooter wheel. Next up, we’re going to try injecting a few input voltages to our system to see how it reacts, and decide what sort of strategies work well to control the system to a commanded speed. &lt;a href=&quot;/blog_posts/2019/10/07/pid_ctrl_design.html&quot;&gt;Check out Controller Design for more info!&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;For the incorrigibly questioning reader, this equation can be derived from the definition of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Radian&quot;&gt;radian&lt;/a&gt;, and the fact that, under the right conditions, you can take a &lt;a href=&quot;https://math.stackexchange.com/questions/407822/differentiating-both-sides-of-an-equation&quot;&gt;derivative of each side of an equality without changing its truthfulness&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;If we were to define a proper reference frame, assign coordinates to the centers of each gear, calculate the coordinate of the meshpoint, and actually make some free body diagrams, the negative sign would result as well. Trust me. But even without the formality, it should just make sense. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;There are ways to undo this assumption as needed, but it’s beyond our present discussion scope to look into them. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Through a circuit breaker, of course. Let’s be safe now. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">All models are wrong, but some are useful. - George Box</summary></entry><entry><title type="html">Control Theory - Systems &amp;amp; Control Engineering</title><link href="/blog_posts/2019/09/07/systems_and_controls.html" rel="alternate" type="text/html" title="Control Theory - Systems &amp; Control Engineering" /><published>2019-09-07T10:30:40-04:00</published><updated>2019-09-07T10:30:40-04:00</updated><id>/blog_posts/2019/09/07/systems_and_controls</id><content type="html" xml:base="/blog_posts/2019/09/07/systems_and_controls.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One of the most eye-opening courses I took in college was an &lt;a href=&quot;https://courses.grainger.illinois.edu/ece486&quot;&gt;introduction to control theory course&lt;/a&gt;. The topic was brand new to me. Prior to taking the course, I had never even heard of this concept of “control theory”.&lt;/p&gt;

&lt;p&gt;The course provided a brand new level of abstraction for thinking about how software fits in with the rest of the world. It provided the tools and vision for creating software and physical devices in harmony, to produce desireable, accurate, repeatable actions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Software and physical devices in harmony&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sounds sorta familiar, huh?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sw_hw_254.png&quot; alt=&quot;software and hardware together&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: team254.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I did a couple cool projects in the class, but largely didn’t touch the subject much academically. But boy, did it influence the way that I approach problem solving. And it has been the single greatest driving force in my design philosophy for robotics - both in college, and into FRC mentoring.&lt;/p&gt;

&lt;p&gt;I want to start a series of posts on the topic. We’ll start by talking more about the formal definitions of “System” and “Controls”, dig into a bit of the math (with lots of pictures, don’t worry), and finally talk a bit about controller design - leading into the mysterious land of &lt;em&gt;PID&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you’ve spent any time around robotics, you’ve most certainly heard the term PID - this mystical thing that you put in code, and then it magically solves problems! Right?&lt;/p&gt;

&lt;p&gt;Eeeh, not so much. It can solve certain problems, but only under certain constraints. The study of Control Theory will give us the answers on &lt;em&gt;which&lt;/em&gt; problems and &lt;em&gt;which&lt;/em&gt; constraints.&lt;/p&gt;

&lt;p&gt;The ultimate goal? &lt;a href=&quot;https://vimeo.com/110346531&quot;&gt;Make mechanical systems do our bidding&lt;/a&gt;. Nothing more, nothing less. Let’s dive in!&lt;/p&gt;

&lt;h2 id=&quot;defining-a-system&quot;&gt;Defining a &lt;em&gt;System&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;Control System&lt;/em&gt;, or simply a &lt;em&gt;System&lt;/em&gt;, is a carefully-selected collection of mechanical parts, electronics, and software. Additionally, these pieces interact with each other. That’s it. Its super vague by itself. The academic treatment is purposefully vague, so as to explore the surprising similarities between seemingly disparate situations.&lt;/p&gt;

&lt;p&gt;Usually, a control system in robotics consists of the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;em&gt;Input Command&lt;/em&gt;, which describes what the mechanism &lt;em&gt;should&lt;/em&gt; be doing.
    &lt;ul&gt;
      &lt;li&gt;This could be from a human operator’s gamepad, or maybe an autonomous routine.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Controller&lt;/em&gt;, a piece of software running on a processor which you can freely adjust
    &lt;ul&gt;
      &lt;li&gt;This usually lives on the roboRIO, but the software itself can be written as you please.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;An &lt;em&gt;Actuator&lt;/em&gt;, the set of electronics and motors and solenoids which exert a force on the mechanism
    &lt;ul&gt;
      &lt;li&gt;FRC rules restrict your set of choices here, but still allow some freedom.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;End Effector&lt;/em&gt;, the part of the mechanism you are attempting to move in some “desired” manner.
    &lt;ul&gt;
      &lt;li&gt;This is usually the thing your mechanical team designs and builds. There is some potential to change it, but its design is often fixed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Feedback Sensor&lt;/em&gt;, something which measures the mechanism, and provides information to the Controller.
    &lt;ul&gt;
      &lt;li&gt;This can often be freely chosen, though due to mechanical constraints often has to be mounted in a certain location on the mechanism.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can probably see, every control system has some parts which you can freely design (like the software in the Controller), some components which you have much less control over (like the actuator, or the mechanism connecting the end effector. The goal is to use the components you &lt;em&gt;can&lt;/em&gt; freely design to make the components you &lt;em&gt;can’t&lt;/em&gt; freely design still do what you want.&lt;/p&gt;

&lt;h3 id=&quot;practical-example&quot;&gt;Practical Example&lt;/h3&gt;

&lt;p&gt;As a concrete example, think about a shooter wheel from 2016 or 2017 games. In both games, a common design was to launch a ball by spinning a rubber wheel up to a certain speed, then injecting the ball into the spinning wheel. The common “controls” requirement (aka “desired” behavior) was to ensure the wheel had a particular speed prior to injecting the ball, in order to keep the trajectory consistent. Here’s a concrete example of components that could be used to build up such a system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;Input Command&lt;/em&gt; came from a button on an XBOX controller. Pressed and the command is something like 1000RPM, released and the command is 0 RPM.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Controller&lt;/em&gt;, as always, was some software on the roboRIO. We’ll delve into the design of this software later.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Actuator&lt;/em&gt; was some speed controller (like a Victor SP) wired to a motor (like a 775 Pro)&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;End Effector&lt;/em&gt; was some rotating, rubberized wheel. Usually, this was propelled by the actuator, via a gearbox.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Feedback Sensor&lt;/em&gt; was a &lt;a href=&quot;https://en.wikipedia.org/wiki/Rotary_encoder&quot;&gt;quadrature encoder&lt;/a&gt;, splined to some rotating member in the motor/gearbox/launch wheel system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vocabulary&quot;&gt;Vocabulary&lt;/h3&gt;

&lt;p&gt;In more standard control system terminology, the following nomenclature is used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The value of the &lt;em&gt;Input Command&lt;/em&gt; is called the &lt;em&gt;Desired&lt;/em&gt; value.&lt;/li&gt;
  &lt;li&gt;The value of the &lt;em&gt;Feedback Sensor&lt;/em&gt; is called the &lt;em&gt;Actual&lt;/em&gt; value.&lt;/li&gt;
  &lt;li&gt;The software and computer and actuator electrical components are collectively called the &lt;em&gt;Controller&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The mechanical portion of the actuator, the end effector, and the linkage between all this and the feedback sensor are collectively called the &lt;em&gt;Plant&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The output of the controller, into the plant, is called the &lt;em&gt;Control Effort&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Controller/Plant terminology dates back to when control systems were primarily for Chemical Engineering processes at chemical production plants - Engineers designed controllers to make their plants do what they wanted.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Actual&lt;/em&gt; and &lt;em&gt;Desired&lt;/em&gt; values must both describe the quantities associated with the end effector you are trying to control - its speed, its position, etc. In the case of the shooter wheel, it’s the rotational velocity of that launch wheel end effector.&lt;/p&gt;

&lt;p&gt;The Controller’s job is actually fairly simple: Make the &lt;em&gt;Actual&lt;/em&gt; value match the &lt;em&gt;Desired&lt;/em&gt; value as closely as needed. That’s it! &lt;em&gt;How&lt;/em&gt; this is accomplished is much more less simple, and is heavily dependant on the nature of the plant.&lt;/p&gt;

&lt;p&gt;One additional note: The feedback sensor is technically optional, and is not present in some systems. We will discuss this in more detail later.&lt;/p&gt;

&lt;h2 id=&quot;the-block-diagram&quot;&gt;The Block Diagram&lt;/h2&gt;

&lt;p&gt;The core tool used while describing control systems is the &lt;em&gt;block diagram&lt;/em&gt;. Teams who use Labview will already be well familiar with this concept. However, for the sake of the text-based language teams, let’s delve in a bit.&lt;/p&gt;

&lt;p&gt;A block diagram uses labeled &lt;em&gt;blocks&lt;/em&gt; to show entities, and &lt;em&gt;arrows&lt;/em&gt; to show relationships between the entities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/basic_block.png&quot; alt=&quot;Basic block diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The blocks can be defined to be anything you like - a controller, a plant, part of a plant, your dog, etc. You choose what to put inside the block, so as to communicate your intent most clearly. The block is an indication of an &lt;em&gt;abstraction&lt;/em&gt; - it shows the functional part you want your reader to be thinking about. No additional, unimportant details.&lt;/p&gt;

&lt;p&gt;As a silly example, let us explain a very critical concept for all FRC teams everywhere:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/silly_block_example.png&quot; alt=&quot;Cookies -&amp;gt; feed -&amp;gt; Mentors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we illustrate the concept of some sort of cookies providing sustenance to a group of mentors. It doesn’t matter what type of cookies, or how you made them, or what they cost. It doesn’t matter how the mentors eat the cookies, or how their bodies process the food, or whether you like the mentors or not. All these details are &lt;em&gt;abstracted&lt;/em&gt; behind those nicely named little boxes.&lt;/p&gt;

&lt;p&gt;Arrows indicate a quantitative relationship or flow of data from one block to another. Note we kinda violated that in our silly example. Maybe it’s “Calories”… doesn’t matter I suppose. It’s a silly example.&lt;/p&gt;

&lt;p&gt;For &lt;em&gt;real control system&lt;/em&gt; work, you’ll want your relationships to by quantifiable. That is to say, you can describe their value at any point in time using a number. It could be a command communicated to a motor controller, a force applied from one mechanism to another, a position detected by a sensor, an electrical signal generated by a sensor and sent to a controller… you get the picture. The key is &lt;em&gt;quantitative&lt;/em&gt; - arrows are like assignment in variables, and actually get interpreted as such when you write software or do math based in block diagrams.&lt;/p&gt;

&lt;p&gt;Note that we’ve provided a label over the arrow for clarity. This sometimes is useful, but also may be omitted in two cases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The relationship is obvious, such that the label crowds the diagram without adding additional information.&lt;/li&gt;
  &lt;li&gt;The relationship is purposefully left vague, such that the diagram may apply to many scenarios at once.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now for a more serious example. In our standard construction of a control system, we usually can draw the following block diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system_simple.png&quot; alt=&quot;Standard control system, very simple&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This illustrates the most basic breakdown of a system that control engineers will do. It illustrates the key concepts we’ve already discussed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some outside entity provides a Desired value&lt;/li&gt;
  &lt;li&gt;Something inside the Plant is measured, producing the Actual value&lt;/li&gt;
  &lt;li&gt;The controller exerts a Control Effort onto the Plant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thought not a hard and fast rule, I will generally draw things you &lt;em&gt;can&lt;/em&gt; freely design in the top row, and things you &lt;em&gt;cannot&lt;/em&gt; freely design in the bottom row. Just a convention to help visually organize the parts of the problem.&lt;/p&gt;

&lt;p&gt;Finally, if you ever hear about “Feedback” in a control system, you can take the words quite literally. As you can see in the bottom row, data is literally &lt;em&gt;fed back&lt;/em&gt; from the controller, through the plant, and back into the controller. The data in the bottom row literally flows backward, visually, in the diagram.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Often useful is a more detailed diagram, where we break up the &lt;em&gt;Controller&lt;/em&gt; and &lt;em&gt;Plant&lt;/em&gt; blocks into components that can be more easily mapped to real components on the robot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/standard_control_system.png&quot; alt=&quot;Standard control system&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, you should see that perform the following “un-abstractions” to give a more detailed and usable view of the world:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We specify that our &lt;em&gt;Controller&lt;/em&gt; shall be made up of software, plus some electronics to bring the software outputs to the physical world&lt;/li&gt;
  &lt;li&gt;We specify that our &lt;em&gt;Plant&lt;/em&gt; is made up of an electrically-powered actuator, some physical mechanism attached to that actuator, and a sensor measuring that mechanism.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is probably the most common permutation seen in FRC robotics, but note it doesn’t have to always be this way. For example, your controller might &lt;a href=&quot;https://www.briggsandstratton.com/eu/en_gb/support/faqs/browse/governor-system.html&quot;&gt;contain zero electronics&lt;/a&gt;. Or, your plant might &lt;a href=&quot;https://www.amazon.com/dp/3642100449/&quot;&gt;actually be the stock market&lt;/a&gt;. I say this more as an aside, just to show how broadly this Control Theory topic can be applied. However, for FRC purposes, we’ll focus on the software-electronics-hardware-sensor model.&lt;/p&gt;

&lt;p&gt;To further drive home this process, let’s put some specific component labels down in this diagram for our example shooter system described earlier:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/shooter_wheel_control_system.png&quot; alt=&quot;Shooter Wheel Control System&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we see the mechanism further broken down into a gearbox and shooter wheel, and some specific component choices made to simplify explanation later on. Play along with us, and by the end you’ll be able to fill in the boxes for your own bespoke robot systems!&lt;/p&gt;

&lt;h2 id=&quot;but-why-feedback&quot;&gt;But, Why Feedback?&lt;/h2&gt;

&lt;p&gt;Earlier on, I mentioned that the sensor (and therefor, the whole Feedback system) was not technically required. Such a system is called “Open Loop”, as there is no information about the results of the control effort passed back into the controller. The loop of signal flow is left “open”.&lt;/p&gt;

&lt;p&gt;This is, admittedly, a much simpler setup. No need to worry about feedback. It’s totally feasible too - as long as you know &lt;em&gt;exactly&lt;/em&gt; how your plant will respond to &lt;em&gt;each and every&lt;/em&gt; sequence of control effort inputs, you can 100% predict where your actuator will end up. If you just work this prediction math backward, you arrive at a solution for a control effort that puts your actuator exactly where you want it.&lt;/p&gt;

&lt;p&gt;The key - plant models are usually &lt;em&gt;unpredictable&lt;/em&gt;. Carpet has bumps. Battery voltage fluctuates. Parts expand and contract with temperature changes. Competition fields have slightly different dimensions than your practice field. Joe Freshman forgets to grease gears properly between matches. No matter how good at math you are, you can’t predict exactly how and when these will impact your system.&lt;/p&gt;

&lt;p&gt;Whenever these &lt;em&gt;disturbances&lt;/em&gt; are big enough to impact system function in a meaningful way, you need &lt;em&gt;feedback&lt;/em&gt; and &lt;em&gt;controller design&lt;/em&gt; that can deal for this variation, correcting for it.&lt;/p&gt;

&lt;h2 id=&quot;next-steps---control-system-design&quot;&gt;Next Steps - Control System Design&lt;/h2&gt;

&lt;p&gt;Ok, we’re at a good point to take a quick step back, and look at where we are at.&lt;/p&gt;

&lt;p&gt;The most general sequence of steps I can provide when it comes to problem solving are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Describe the problem&lt;/li&gt;
  &lt;li&gt;Design a solution&lt;/li&gt;
  &lt;li&gt;Implement the solution&lt;/li&gt;
  &lt;li&gt;Validate the solution works&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So far, we’re partway through step 1. We’re building up a language and technique for describing the problem.&lt;/p&gt;

&lt;p&gt;We’ve described how control systems are broken down into components, represented with nice little connected boxes. The next major task is to start to fill out the contents of each box.&lt;/p&gt;

&lt;p&gt;For standard control theory design, each one will require a mathematical description - a &lt;em&gt;model&lt;/em&gt; - of behavior. Fundamentally, each model will be description of how the input impacts the output.&lt;/p&gt;

&lt;p&gt;Finally, we can apply control theory principles to &lt;em&gt;design&lt;/em&gt; the mathematics of what we want the controller to look like, such that our &lt;em&gt;actual&lt;/em&gt; value converges to the &lt;em&gt;desired&lt;/em&gt; value in the most appropriate way.&lt;/p&gt;

&lt;p&gt;So, next up, we’ll look at some examples of how to build up these mathematical models, and what important takeaways from the models we should expect.&lt;/p&gt;

&lt;p&gt;After that, we’ll be able to move on to step 2, in which we &lt;em&gt;design&lt;/em&gt; the contents of the &lt;em&gt;Control Software&lt;/em&gt; box to make the whole system do what we want.&lt;/p&gt;

&lt;p&gt;We’ll finish off with some thoughts on techniques for validating behavior on real hardware, and troubleshooting when it doesn’t work. Stay tuned!&lt;/p&gt;

&lt;p&gt;Ready to keep going? Check out &lt;a href=&quot;/blog_posts/2019/09/20/math_models.html&quot;&gt;Mathematical Models!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;closing-note---on-other-resources&quot;&gt;Closing Note - On Other Resources&lt;/h2&gt;

&lt;p&gt;With any luck, I’ve at least peaked your interest in this topic. I do hope you will carry on in this sequence of posts. However, note, this will be an overview, with a focus on getting a ground up explanation of why certain FRC-relevant concepts work the way they do.&lt;/p&gt;

&lt;p&gt;For a &lt;em&gt;much&lt;/em&gt; more thorough and mathematically rigorous explanation of the topic, I &lt;strong&gt;HIGHLY&lt;/strong&gt; recommend reading the textbook &lt;a href=&quot;https://file.tavsys.net/control/controls-engineering-in-frc.pdf&quot;&gt;Controls Engineering in FRC&lt;/a&gt; - by far the best resource I’ve found on this topic. I’ll be making references to sections in this book throughout this series of posts. So far, we’ve discussed content from Chapter 1, Control System Basics.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Backward, assuming you read from left to right. Just the established convention. A convention which was clearly made by someone who didn’t read Hebrew. Sorry, Hebrew-reading friends. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Productive Team Mentality</title><link href="/blog_posts/2019/09/05/team_mentality.html" rel="alternate" type="text/html" title="Productive Team Mentality" /><published>2019-09-05T10:30:40-04:00</published><updated>2019-09-05T10:30:40-04:00</updated><id>/blog_posts/2019/09/05/team_mentality</id><content type="html" xml:base="/blog_posts/2019/09/05/team_mentality.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is largely inspired by &lt;a href=&quot;https://hbr.org/2017/08/high-performing-teams-need-psychological-safety-heres-how-to-create-it&quot;&gt;Laura Delizonna’s excellent article in the Harvard Business Review&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All technical team environments will operate best when team members do their best work. Effective teams go out of their way to &lt;em&gt;enable&lt;/em&gt; team members to perform well. Although every member will be different to some extent, there are many common team behaviors and qualities that are worth at least considering, if not implementing, in your own team.&lt;/p&gt;

&lt;p&gt;Throughout this discussion, keep in mind that no matter whether or not you have leadership responsibilities on a team, each member of a team is a steward of team culture. The culture is kept and maintained by each individual - leader and individual contributor alike. By acting in accordance with positive, desireable aspects of culture, you yourself build up the team to be a better form of itself.&lt;/p&gt;

&lt;p&gt;With that in mind, let’s explore a few of the aspects of productive, happy technical teams.&lt;/p&gt;

&lt;h2 id=&quot;cultivating-positivity-for-growth&quot;&gt;Cultivating Positivity for Growth&lt;/h2&gt;

&lt;p&gt;Keeping a positive attitude is, for me, the foundation of a good team.&lt;/p&gt;

&lt;p&gt;Technical subjects are, for better or worse, dry and impartial. Physics and Math are governed by cold and impartial laws. Though advantageous for their consistency, these laws do little to reassure human beings of their inherent value and worth. &lt;em&gt;Before&lt;/em&gt; spending time delving into these technical topics, it’s well worth the time to establish that you are &lt;em&gt;happy&lt;/em&gt; to simply be in the presence of your teammates. Make them know that you enjoy being with them - even if you’re not looking forward to the events of the day. Establishing knowledge of the desire to &lt;em&gt;be&lt;/em&gt; a team will provide the motivation to grow as a team.&lt;/p&gt;

&lt;p&gt;An established positive attitude greatly helps people be &lt;em&gt;internally motivated&lt;/em&gt; to find solutions to problems. They know their time is appreciated and well spent, and that their efforts are worthwhile for the success of the team. When individuals actively seek out solutions to problems, without relying on the solution of other team members, they grow their own capability and skill. This growth is essential for future team success.&lt;/p&gt;

&lt;p&gt;A positive team is one which is &lt;em&gt;inherently fun&lt;/em&gt; to be a part of. Not because someone made it fun, but because the team transforms the work into something which can be enjoyed. Something which has a purpose and meaning, and goes beyond a simple task to “take care of”. Team members build each other up, strengthening relationships of trust and mutual respect.&lt;/p&gt;

&lt;h2 id=&quot;building-trust-for-growth&quot;&gt;Building Trust for Growth&lt;/h2&gt;

&lt;p&gt;When we trust our teammates, we believe they will deliver on what we expect of them. Placing this trust in others, with the right attitude, gives them the opportunity to rise to the occasion. Your trust gives them the opportunity to grow - either through success or failure.&lt;/p&gt;

&lt;p&gt;If the other team members succeed and meet your expectations, the other team member has learned a new skill and done something they ordinarily would not have done themselves. A trusting team is one that can grow and expand without fear.&lt;/p&gt;

&lt;p&gt;By giving them trust, and appropriately handling failure, even this can still be a learning experience&lt;/p&gt;

&lt;h2 id=&quot;feeling-safe---handling-failure-for-growth&quot;&gt;Feeling Safe - Handling Failure for Growth&lt;/h2&gt;

&lt;p&gt;A fundamental goal of any technical team should be to mitigate the fallout of failure. Every team member will fail at some point. However, a team member should never be &lt;em&gt;afraid&lt;/em&gt; to fail. The fear of failure will block people from taking risks, and learning new skills. This in turn kills the growth mindset that is at the &lt;em&gt;very core&lt;/em&gt; of any FRC program. Additionally, given the pace of technological advance, any technical team which is unable to embrace change through active growth will &lt;em&gt;very quickly&lt;/em&gt; become obsolete. Fear of failure will absolutely &lt;em&gt;kill&lt;/em&gt; your team.&lt;/p&gt;

&lt;p&gt;Mitigating the fear of failure can be done through many ways. A few of my favorites:&lt;/p&gt;

&lt;h3 id=&quot;short-term-focus-on-solution-not-problem&quot;&gt;Short Term: Focus on Solution, not Problem&lt;/h3&gt;

&lt;p&gt;When failure occurs, the knee-jerk reaction is frequently to zero in on the problem. It’s glaring, everyone can see it, everyone is worried about it. It’s natural to focus on the problem. Well-meant or not, the focus is good at first - ensure that all team members understand the impacts of the problem, and those empowered to solve it understand it enough to go forward.&lt;/p&gt;

&lt;p&gt;But then, shift 100% to the solution. No more complaining, whining, finger-pointing, or getting distracted with “what-if” scenarios. Establish a laser-focus on finding a solution, and don’t look back till you have one. Even if it’s the most horrible hack you’ve ever seen, find something that &lt;em&gt;works&lt;/em&gt; (and is of course, &lt;em&gt;safe&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Separate things you can change from those you cannot, and focus on the former. The whole team depends on you to &lt;em&gt;solve&lt;/em&gt; the problem, so don’t waste their time by focusing on things you cannot change.&lt;/p&gt;

&lt;h3 id=&quot;long-term-establish-root-cause-and-solve&quot;&gt;Long Term: Establish Root Cause and Solve&lt;/h3&gt;

&lt;p&gt;Once the problem is solved, wrap back around for a &lt;em&gt;retrospective&lt;/em&gt;. Try to dig deep to realize why the problem started in the first place. There may be many causes. Causes will be related to each other, some being effects of the next. &lt;a href=&quot;https://en.wikipedia.org/wiki/Five_whys&quot;&gt;Ask the question “Why?” five times, and answer it genuinely each time.&lt;/a&gt; Keep going if you can.&lt;/p&gt;

&lt;p&gt;Inevitably, people will be involved. You must use &lt;em&gt;compassion&lt;/em&gt; when dealing with people. People, in general, do not act out of malice. With few exceptions, people do not generally &lt;em&gt;try&lt;/em&gt; to cause problems. It would be disingenuous to assume this to be the case from the start. People make decisions based on their own knowledge, biases, hopes, dreams, and opinions. Every person does this. Rarely is the person the issue - much more frequently, the &lt;em&gt;inputs&lt;/em&gt; to their problem solving methodologies were flawed.&lt;/p&gt;

&lt;p&gt;Once you feel comfortable you know why something happened, go about fixing it. Sometimes, it might just be some additional learning or training for a few team members. Sometimes, there’s a &lt;em&gt;process&lt;/em&gt; change to make, wherein your team modifies the usual steps it does while performing a task to prevent a problem from reoccurring.&lt;/p&gt;

&lt;p&gt;This process is a key component of what Dr. Delizonna refers to as “Replacing Blame with Curiosity”. This is an absolutely critical aspect to handling failures - the team attitude should be to approach all problems with a fundamental desire to learn about them and fix them, rather than establish blame. Focus on the solution, not solely on the actual problem itself.&lt;/p&gt;

&lt;h3 id=&quot;the-basket-cases&quot;&gt;The Basket Cases&lt;/h3&gt;

&lt;p&gt;Sometimes, you get a rotten apple of a team member. Someone who can’t work on the team. Someone who &lt;em&gt;trys&lt;/em&gt; to make you fail.&lt;/p&gt;

&lt;p&gt;Or sometimes, it’s the other way around. You find yourself on a team that refuses to have a positive attitude. A team that prioritizes griping over solution finding.&lt;/p&gt;

&lt;p&gt;In both cases, be &lt;em&gt;absolutely&lt;/em&gt; sure your observations are not biased. Have you talked to anyone else about your observations? Have you brought them up with the person/people in question, that you have your issues with? Have you confirmed, beyond all doubt, that no reasonable measure of personal change on your part will bring about the change you wish to see?&lt;/p&gt;

&lt;p&gt;If so, there are drastic actions that can be taken.&lt;/p&gt;

&lt;p&gt;One option is bringing in some higher authority to address the issue with their larger metaphorical “hammer”. This assumes such an authority exists.&lt;/p&gt;

&lt;p&gt;Temporary or permanent separation from the team is another options. Sometimes it is the only one. Keep in mind that this separation fundamentally ends the goal of team growth that all technical teams should strive for, so it must be used with extreme caution.&lt;/p&gt;

&lt;p&gt;Above all, keep in mind these “basket cases” are &lt;em&gt;different&lt;/em&gt; from technical problems. They are &lt;em&gt;people problems&lt;/em&gt;, and need to be addressed separately and differently from your usual technical problems. Most importantly, all interactions of this nature must be done with compassion for all the people involved, especially the group that stands to suffer the most from the solution. But, as Dr. Woodie Flowers reminds us, keep in mind a “complex definition of fairness” to ensure everyone’s needs are met as best possible.&lt;/p&gt;

&lt;h2 id=&quot;vulnerability-feedback-measurement&quot;&gt;Vulnerability, Feedback, Measurement&lt;/h2&gt;

&lt;p&gt;All of the aforementioned ideas are just that - ideas. They aren’t a prescriptive way to organize a team - indeed, if I knew how to tell you that, I’d be a much richer man. What I can tell you is this - &lt;em&gt;be vulnerable&lt;/em&gt;. Talk about these things with your team members. Bring them up (appropriately), and talk as a team about what you expect from each other. Let down your guard, and speak frankly.  Establish not just where you are, but where you want the team to be. Then build a roadmap for how to get there. As problems arise, discuss them swiftly and frankly, investigate with curiosity, design and implement a solution.&lt;/p&gt;

&lt;p&gt;Seeking constant feedback from each other is the key way that you, as a team, ensure your day to day interactions remain positive and productive.&lt;/p&gt;

&lt;p&gt;Additionally, consider a formal measurement of team engagement. Opinion surveys, “1 to 10” rank questions about team environment and member feelings, free-response anonymous questions may help track team engagement, uncover unknown issues, and show your team’s sustainable growth over many years.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully, you’ve gotten a few new ideas about what sorts of attitudes and mentalities are useful for maintaining a productive, growth-minded team. With good team discussion, hopefully you can hone your own team to its peak abilities, and know what to look for as you move on in your career (inside and outside of FIRST) while searching for good teams to spend your time with!&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Why I Use the MIT License</title><link href="/blog_posts/2019/08/27/why_mit.html" rel="alternate" type="text/html" title="Why I Use the MIT License" /><published>2019-08-27T10:30:40-04:00</published><updated>2019-08-27T10:30:40-04:00</updated><id>/blog_posts/2019/08/27/why_mit</id><content type="html" xml:base="/blog_posts/2019/08/27/why_mit.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sparkfun.com/news/2506&quot;&gt;Open source software is definitely an interesting beast.&lt;/a&gt; I didn’t spend too much time thinking about it until my college years, and the more I consider it the more impressive it gets. CAD programs, programming languages, even whole operating systems are developed by massive teams of people who have never met each other in person, and just enjoy engineering &lt;em&gt;so much&lt;/em&gt; they do it in their &lt;em&gt;personal time for free&lt;/em&gt;. And the software that is produced can be crazy good!&lt;/p&gt;

&lt;p&gt;The software that is produced has &lt;em&gt;inherent value&lt;/em&gt;. It’s useful! That means that if I have money, and I need software XYZ, and you are selling software XYZ, I very well might pay money to you to get software XYZ. If you happen to be in the business of making money (as a lot of us are), it would make sense to sell software XYZ. Or take it, and use it in some… unsavory… manner.&lt;/p&gt;

&lt;p&gt;At the end of the day, most open source software developers want to do just that - &lt;em&gt;develop open source software&lt;/em&gt;. They may or may not want others to take and sell and do as they please with it, but they generally don’t want to be bothered having to think about it. That would be open-source lawyering, which is not something I have known software engineers to enjoy.&lt;/p&gt;

&lt;p&gt;With this in mind, most open source software is assigned some specific &lt;em&gt;license&lt;/em&gt; to help take care of these issues.&lt;/p&gt;

&lt;p&gt;I am by no means an expert in this area, so please don’t take this post as real legal advice. What you can take it for is a summary of my knowledge at the time of writing, and the reasons I use for the license I usually select.&lt;/p&gt;

&lt;h2 id=&quot;copyright-basics&quot;&gt;Copyright Basics&lt;/h2&gt;

&lt;p&gt;In the United States, &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_copyright&quot;&gt;Copyright Laws&lt;/a&gt; say that anything you write, including source code, by default cannot be used by others. There are some limits to this, including if your source code is not original, or they change it a &lt;em&gt;lot&lt;/em&gt;, or various other conditions.&lt;/p&gt;

&lt;p&gt;However, these defaults and conditions are not consistent in other countries. To keep things simple, it is worthwhile to lay out the exact terms of usage of your &lt;em&gt;creative work&lt;/em&gt; in specific legal language within a license file.&lt;/p&gt;

&lt;p&gt;You can technically put whatever you want in a license, but it’s best to have a lawyer write it, so that you have some assurance your license will hold up in international courts of law. &lt;a href=&quot;https://opensource.org/licenses&quot;&gt;There are many popular licenses available&lt;/a&gt;, and you can pick and choose from them as you choose.&lt;/p&gt;

&lt;p&gt;For my projects, and most FRC projects, I usually choose the &lt;em&gt;MIT License&lt;/em&gt; (named after that same college with the really smart people).&lt;/p&gt;

&lt;h2 id=&quot;mit-basics&quot;&gt;MIT Basics&lt;/h2&gt;

&lt;p&gt;The “MIT License” is one of the most permissive open source licenses available. Individuals can take the source code and use it however they want. Companies can do the same, including using it to make money with their own products. Anyone can modify their copy of code as they see fit, and they don’t have to report the changes back to you.&lt;/p&gt;

&lt;p&gt;Someone could turn around and sell the source code verbatim, but given that it’s already freely available, that doesn’t seem like a good way to make money.&lt;/p&gt;

&lt;p&gt;The biggest thing they can’t do is strip away the license - any redistribution must include your initial MIT licensing. They must also retain your initial copyright notice, which helps contain a reference back to the original author.&lt;/p&gt;

&lt;p&gt;Finally, the software is always provided “As-Is” - it is intended for &lt;em&gt;no particular purposes at all&lt;/em&gt;. This is a fancy way of saying that, even if I describe the project as “Software for an FRC Robot”, it was never &lt;em&gt;really, leagally&lt;/em&gt; intended for that.&lt;/p&gt;

&lt;h2 id=&quot;why-mit&quot;&gt;Why MIT&lt;/h2&gt;

&lt;p&gt;Especially for FRC purposes, I choose MIT for a few reasons.&lt;/p&gt;

&lt;p&gt;For one, it’s a serious license. Lots of “real” projects use it, so it is &lt;em&gt;extermely&lt;/em&gt; likely to hold up in court, in case I ever have to do that. There are some &lt;a href=&quot;https://en.wikipedia.org/wiki/WTFPL&quot;&gt;much more light-hearted&lt;/a&gt; licenses out there, but I question whether these would actually hold up in court.&lt;/p&gt;

&lt;p&gt;Secondly, it is very open, which is what I want robot software to be. I want it to be super simple for other FRC teams to take our code and use it as they need. I’d appreciate if they give us a shout-out, or let us know if they find problems, or show us how they improved it, but I’d never &lt;em&gt;force&lt;/em&gt; that to be required. Build season is short, we’ve got bigger things to worry about.&lt;/p&gt;

&lt;p&gt;Even with companies - even though it would be &lt;em&gt;nice&lt;/em&gt; if they gave us some money for using our code, I still wouldn’t hold it against them if they seriously thought some random code written by a bunch of sleep-deprived high schoolers was better than their engineers could come up with. Are they hiring? I’ve got some resumes for interns I can forward.&lt;/p&gt;

&lt;p&gt;But, most importantly - it ensures the software will only ever be provided “As-Is”. Here’s the critical thing I worry about - say you claimed your software performed some function safely (as lots of our code comments do). Now say someone copy-pasted that code onto a different robot, fired it up, exercised some bug, and the robot ran over a small child and injured them (ow!). Then they came and sued me because our code claimed it was safe, but in fact it was not.&lt;/p&gt;

&lt;p&gt;This is a hopeless situation. Once I publish code on Github, I have no way of knowing who will copy and paste it, or how they will use it. I have no way of guaranteeing safety of functionality.&lt;/p&gt;

&lt;p&gt;Hopefully any judge who knows how software works wouldn’t actually side with the other person. Even still, I’d prefer not to take the chance. I’d rather be writing software than worrying about whether I’ll be sued or not. So, I am always sure to include an MIT License. Having this present is the legally-binding way of saying to a consumer of the software “It’s your responsibility to validate functionality, not mine”.&lt;/p&gt;

&lt;p&gt;Again, I am no lawyer, so I can’t say my line of thought is 100% correct here. It’s highly influenced by my personal research and desire to sleep well at night, but not much else.&lt;/p&gt;

&lt;h2 id=&quot;other-options&quot;&gt;Other Options&lt;/h2&gt;

&lt;p&gt;There are a bunch of other licenses which have some features you might want. These include requiring people who modify the code to notify you of changes. They also may restrict certain phrases or logos as trademarked, prevent changing the license, or prevent for-profit usage. &lt;a href=&quot;https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)&quot;&gt;GPL-3&lt;/a&gt; and &lt;a href=&quot;https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)&quot;&gt;Apache 2.0&lt;/a&gt; are two other common licenses.&lt;/p&gt;

&lt;p&gt;As a side note - I &lt;em&gt;always&lt;/em&gt; subscribe to the notion of what the industry calls “beerware”, under a broader definition. If I have ever used your open source software, and you happen to be in the Peoria IL area with some time to burn, a round of your favorite drinks or food is on me. And I’ve got plenty of good local suggestions! Perhaps for another post.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Looking to choose a license for your project? Choose wisely! &lt;a href=&quot;https://choosealicense.com/&quot;&gt;There are many good tools online&lt;/a&gt; to help you make the choice! Protect yourself and your software, and make it exactly as open for usage as you like!&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">My Computer Engineering Toolkit</title><link href="/blog_posts/2019/08/23/my_toolkit.html" rel="alternate" type="text/html" title="My Computer Engineering Toolkit" /><published>2019-08-23T10:30:40-04:00</published><updated>2019-08-23T10:30:40-04:00</updated><id>/blog_posts/2019/08/23/my_toolkit</id><content type="html" xml:base="/blog_posts/2019/08/23/my_toolkit.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This will be a bit of self promotion, but hopefully educational at the same time. Here’s a confession - I have many computers in my life &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. They have come and gone over the years, and all played a crucial role in my education and learning, leading me toward the engineer I am today.&lt;/p&gt;

&lt;p&gt;I wanted to spend a post talking about the machines I currently use to do my thing.&lt;/p&gt;

&lt;p&gt;For context, if you happen to go to my &lt;a href=&quot;https://www.linkedin.com/in/christopher-gerth-7b8b52126/&quot;&gt;linkedin page&lt;/a&gt;, you’ll notice I’m an &lt;em&gt;embedded&lt;/em&gt; software engineer by day. Basically, this just means my day job is the same as my robotics software-mentor job - just on bigger and yellower machines. My hobbies (robotics and otherwise) tend to flow straight from this occupation.&lt;/p&gt;

&lt;p&gt;What I’ll talk through are what sorts of machines I use day to day to accomplish my personal and mentorship software development tasks. I hope that by getting some insight into how I’ve configured the tools around me, you may get some ideas of your own to form your own custom toolkit to support your hobbies!&lt;/p&gt;

&lt;h2 id=&quot;computer-hardware&quot;&gt;Computer Hardware&lt;/h2&gt;

&lt;h3 id=&quot;the-main-show---the-desktop&quot;&gt;The Main Show - the Desktop&lt;/h3&gt;

&lt;p&gt;My “daily driver” machine is my custom-built desktop. It was fairly up-to-date when I built it in 2013, but it has aged very well - it’s still more than fast enough to run any internet browsing, code editing and building, and occasional video games I throw at it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/thePC.jpg&quot; alt=&quot;thePC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some basic specs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Intel i5 3350P CPU - 3.10 GHz&lt;/li&gt;
  &lt;li&gt;8GB RAM&lt;/li&gt;
  &lt;li&gt;128 GB Main SSD, 1Tb expansion Drive&lt;/li&gt;
  &lt;li&gt;NVIDIA GeForce GTX 660&lt;/li&gt;
  &lt;li&gt;Windows 10 Professional&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Samsung-LU28E570DS-ZA-Led-Lit-Monitor/dp/B07FBNPTDD/ref=sr_1_1?keywords=samsung+4k+monitor&amp;amp;qid=1566526097&amp;amp;s=gateway&amp;amp;sr=8-1&quot;&gt;Samsung 4K 28-inch monitor&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I’ve gone back and forth on this over the years. I really like all the screen real estate in one spot, and Windows 10 is great about managing it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Mad-Catz-RAT4-Programmable-Adjustable/dp/B01JBZMGAG&quot;&gt;RAT4 Mouse&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Gotta get something that looks cool, and has programmable buttons. If you’ve never experienced a mouse with a dedicated “back” button, you haven’t lived!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Adesso-AKB-635UB-Easy-Touch-635/dp/B00SX4X8WW/ref=sr_1_3?keywords=adesso+mechanical+keyboard&amp;amp;qid=1566526455&amp;amp;s=gateway&amp;amp;sr=8-3&quot;&gt;Adesso Mechanical Keyboard&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Mine is similar to this one, I don’t think they sell it anymore.&lt;/li&gt;
      &lt;li&gt;Mine has &lt;a href=&quot;https://www.keyboardco.com/blog/index.php/2012/12/an-introduction-to-cherry-mx-mechanical-switches/&quot;&gt;Cherry Blue switches&lt;/a&gt; - the really &lt;em&gt;really&lt;/em&gt; clicky ones. Drives the wife mad. But I &lt;em&gt;love&lt;/em&gt; the tactile feel.
        &lt;ul&gt;
          &lt;li&gt;Of course, it’s not for everyone. Try a bunch of different keyboards to see which one you like.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mousepad is a chunk of fabric-covered neoprene that was surplus from the manufacture of &lt;a href=&quot;https://www.hakenaudio.com/&quot;&gt;Haken Continuum&lt;/a&gt; continuous keyboard. It’s a fun souvenir from one of my favorite college classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/thePCguts.jpg&quot; alt=&quot;thePCGuts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again keep in mind - these specs are 6 years old at the time of writing. If I ever happen upon a spare couple hundred dollars, I this will probably be the first thing I upgrade. However, it’s still running so fast, it’s hard to bring myself to do so.&lt;/p&gt;

&lt;p&gt;None of this is really top-of-the-line - it’s middle to cheap, but more than sufficient to support my personal coding and development projects.&lt;/p&gt;

&lt;h3 id=&quot;the-new-guy---the-laptop&quot;&gt;The New Guy - the Laptop&lt;/h3&gt;

&lt;p&gt;For folks who do lots of FRC software mentoring, turns out the vast majority of my coding occurs on the road. For this reason, I recently splurged on getting a good machine that would take all the software-writing punishment I could throw at it. My choice? The &lt;a href=&quot;https://consumer.huawei.com/us/tablets/matebook-x-pro/&quot;&gt;Huawei MateBook X Pro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Electronic/2018/07/09/goods_img_big-v1/20180709131041_59936.jpg&quot; alt=&quot;matebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: gearbest.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s right - I got the Chinese hardware. But I have to say, it’s super awesome. Sleek and light, phenomenal battery life, a brilliant and giant display (my key criteria), and a pretty good keyboard and trackpad make for an excellent coding machine on the road.&lt;/p&gt;

&lt;p&gt;The device sports a plethora of USB-C connectors. I usually carry dongle adapters to get me to VGA and HDMI, as well as extra USB and Ethernet ports (all very important for robot usage).&lt;/p&gt;

&lt;p&gt;To address the elephant at the time of this post - &lt;em&gt;Yes, Huawei devices are considered a security risk in the US&lt;/em&gt;. Most of the concern has been targeted at their servers and networking hardware, as it relates to the 5G expansion of wireless telecom carriers. Their consumer hardware is under target too. It was a risk I took when purchasing. I’m hoping the situation gets cleared up soon, but also keeping my finger on the pulse of the conversation, and actively monitoring network traffic. If something starts “phoning home”, I will probably re-evaluate what sort of network permissions this device will get.&lt;/p&gt;

&lt;p&gt;No major changes to the OS or hardware since I’ve gotten it. I’ve got exactly what they say they sell on their website.&lt;/p&gt;

&lt;h3 id=&quot;the-old-standby---the-server&quot;&gt;The Old Standby - the Server&lt;/h3&gt;

&lt;p&gt;At my home, I run one additional machine that acts as a server. I run a Dell PowerEdge R200 in my basement.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2.33GHz Xenon CPU&lt;/li&gt;
  &lt;li&gt;4GB RAM&lt;/li&gt;
  &lt;li&gt;128 GB SSD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\server.png&quot; alt=&quot;the server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s really not much - the thing is 10 years old. I got it for a &lt;em&gt;steep&lt;/em&gt; discount on eBay - just had to provide my own hard drive.&lt;/p&gt;

&lt;p&gt;I run &lt;a href=&quot;https://www.archlinux.org/&quot;&gt;ArchLinux&lt;/a&gt;, one of the most trimmed down operating systems with the &lt;a href=&quot;https://www.linux.com/what-is-linux/&quot;&gt;Linux Kernel&lt;/a&gt; you can get. It’s a “no batteries included” approach to design - which means you get lots of configurability as a user. This server is the platform for a large number of continuous-running applications I keep at my house.&lt;/p&gt;

&lt;h3 id=&quot;network-storage&quot;&gt;Network Storage&lt;/h3&gt;

&lt;p&gt;For saving files and doing server backup, I run a 2-TB &lt;a href=&quot;https://www.buffalotech.com/products/category/network-attached-storage&quot;&gt;Buffalo Network Attached Storage&lt;/a&gt; device, with two hot-swapable drives in a RAID configuration allowing for full redundancy. It’s primarily to supplement the other devices on the network - I’ll get into that later.&lt;/p&gt;

&lt;h3 id=&quot;other-home-networking-equipment&quot;&gt;Other Home Networking Equipment&lt;/h3&gt;

&lt;p&gt;Along with the server, my small rack downstairs consists of two ethernet switches (one providing Power Over Ethernet, one not), an old Netgear combination Router &amp;amp; Wifi access point, and our modem. We’re lucky and have fiber internet service - I’m currently on a 300MBps plan that makes for a &lt;em&gt;blazing&lt;/em&gt; fast experience.&lt;/p&gt;

&lt;p&gt;When I moved into the house, one of my first projects was to install &lt;a href=&quot;https://www.monoprice.com/product?p_id=8103&quot;&gt;Cat6 ethernet wiring&lt;/a&gt; throughout the house. I added 7 new ports on two floors of the house, and ran all the wiring back down to the server &amp;amp; ethernet switches. This allows our media station (Roku &amp;amp; smart DVD Player) the desktop, and a few wired security cameras to connect to wired internet, even though they’re all in different rooms than the rest of the equipment. It also means the noisy server lives downstairs behind closed doors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/networkEquipment.png&quot; alt=&quot;Network Equip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In a super simplified (to the point of inaccurate) diagram, here’s how it all is hooked together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simplifiedNetwork.png&quot; alt=&quot;Home Network Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-software&quot;&gt;Key Software&lt;/h2&gt;

&lt;p&gt;This hardware would be nothing without the software that sits on top of it to be useful. I’ll give a quick survey of the pieces of software that get used on a daily basis in my household.&lt;/p&gt;

&lt;h3 id=&quot;on-the-desktop--laptop&quot;&gt;On the Desktop &amp;amp; Laptop&lt;/h3&gt;

&lt;p&gt;I have a strong preference for free software because I like to spend my money on other things, like food. Sometimes you have to pay for good stuff. However, we are lucky that in today’s world, the majority of the tools needed for day-to-day software development can be acquired free of cost!&lt;/p&gt;

&lt;h4 id=&quot;development-environment&quot;&gt;Development Environment&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; is my preferred code editor. The ability to support so many languages so flexibly, along with tons of built-in tools.&lt;/p&gt;

&lt;p&gt;I’m also a huge fan of dark mode, and I really like the built-in color theme. Call me shallow, but if you have to stare at code all day long, might as well do it in a way that looks ascetically pleasing to you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vsCodeSample.png&quot; alt=&quot;VSCodeSample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; is a daily part of my development experience. Ever since I learned how to use it in college and on my first job, it’s become an indispensible tool for keeping track of how I change my software over time, organizing my development process, and creating backups of projects. Though I often manipulate my repos via the command line, I still really like having a nice visualization of my version tree. &lt;a href=&quot;https://gitextensions.github.io/&quot;&gt;Git Extensions&lt;/a&gt; is my current choice for doing this, but there’s lots of great alternatives.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gitExtensionsSample.png&quot; alt=&quot;GitExtensionsSample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When connecting to the server, I generally use &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;SSH&lt;/a&gt; to get access to a command line on the other machine. &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt; is my tool of choice to get this done on Windows, though the one built into Git’s command prompt works just fine too.&lt;/p&gt;

&lt;p&gt;Connecting between the Windows machines usually involves Window’s built-in Remote Desktop application.&lt;/p&gt;

&lt;p&gt;For working with C code, I tend to prefer the &lt;a href=&quot;http://www.mingw.org/wiki/MSYS&quot;&gt;msys/minGW&lt;/a&gt; to get the parts of the GNU/Linux environment on my Windows machines required to build and link C code to an executable. &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; is another super common option.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; is my go-to language for most projects - it’s got easy &amp;amp; c-like syntax, cross-platform abilities, and batteries-included philosophy makes it a good choice for creating highly functional prototypes and super-flexible applications. For pure speed or robustness other options may be better, but Python is still my daily-driver for a language to implement my ideas in.&lt;/p&gt;

&lt;h4 id=&quot;general-engineering-tools&quot;&gt;General Engineering Tools&lt;/h4&gt;

&lt;p&gt;Of recent, &lt;a href=&quot;https://discordapp.com/&quot;&gt;Discord&lt;/a&gt; has become the defacto tool for maintaining communication in our FRC team, amongst friends, and even family.&lt;/p&gt;

&lt;p&gt;For CAD, I tend to like &lt;a href=&quot;https://librecad.org/&quot;&gt;LibreCAD&lt;/a&gt; in the 2D drawings, and use &lt;a href=&quot;https://www.autodesk.com/products/inventor/overview&quot;&gt;Autodesk Inventor&lt;/a&gt; for 3D work. Both have many alternatives, these are simply the ones that I learned first, so I’m still the most efficient with them. I don’t have to do this super often, so I tend to stick with what I know, rather than invest in a new tool.&lt;/p&gt;

&lt;p&gt;For electronics work, I have a few tools of choice. For doing research on the functionality of circuits and simulating their behavior, I use a program called &lt;a href=&quot;https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html&quot;&gt;LTspice&lt;/a&gt;. It’s a bit obtuse to get used to, I learned it in college. It helps when designing analog circuitry and validating functionality prior to building a real circuit.&lt;/p&gt;

&lt;p&gt;When designing an actual circuit that I’ll build, I switch over to a different tool. &lt;a href=&quot;http://www.kicad-pcb.org/&quot;&gt;KiCad&lt;/a&gt; has been my choice of recent, though &lt;a href=&quot;https://www.autodesk.com/products/eagle/free-download&quot;&gt;Autodesk Eagle&lt;/a&gt; was my choice in college. Both give a vast library of components that you first assemble into a nice circuit schematic, then lay out physically on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Printed_circuit_board&quot;&gt;printed circuit board (PCB)&lt;/a&gt;. In addition to printing the schematic, you can export various files from the PCB design side that manufacturers can use to create a custom board for you. This will likely be the subject of a future blog post.&lt;/p&gt;

&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;/h4&gt;

&lt;p&gt;For documenting my work, I tend toward two tools.&lt;/p&gt;

&lt;p&gt;For simple technical documentation, I really &lt;em&gt;really&lt;/em&gt; like &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;. That’s what this website is (mostly) written in! My liking is primarily because it’s super simple to write - basically just editing a text file. The rendering into nicely-formatted viewing is done by some other tool. To me, this is awesome because even if the visualization tool goes extinct, the base content is still super accessible and readable (unlike Microsoft Word or the like). Github and its clones support it natively, so &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; files you produce display very nicely via their web interface (which is how most 3rd party folks will first see your projects). The feature set provided is, for me, “just-right” - simple formatting of code, images, headings, lists. All without the overhead of pure HTML/CSS/Javascript to accomplish the same thing. Of course, if doing a website from the ground up, you’ll want to be more familiar with those. However, for something like this blog, Markdown is an awesome choice for entering the information with enough complexity to fully describe your ideas, without unneeded overhead.&lt;/p&gt;

&lt;p&gt;For more formal documentation (think, scientific papers or resumes), &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; is by far king, and I also love it. It produces &lt;a href=&quot;https://github.com/RobotCasserole1736/CasseroleLib/blob/master/doc/current_limiting.pdf&quot;&gt;beautifully formatted documents&lt;/a&gt; with top-of-the-line scientific equation editing. It also does great resumes - I recently moved mine over using the &lt;a href=&quot;https://ctan.org/pkg/moderncv?lang=en&quot;&gt;ModernCV&lt;/a&gt; templates! It’s a bit obtuse to learn at first, but the end results are well worth it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/latexResume.png&quot; alt=&quot;LatexResume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Looks even better unredacted!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;on-the-server&quot;&gt;On the Server&lt;/h3&gt;

&lt;p&gt;The Gerth Household Server (affectionately nicknamed “Geezer” for its age) runs a number of applications which improve out lives on daily basis. I got into having a household server after my college laptop’s screen died, leaving it only useful by SSH or Remote Desktop access. I was bored one weekend, got Arch Linux up and running, and it kinda just snowballed from there. A few years back I finally decided running my laptop to death wasn’t a great idea, and swapped for the PowerEdge server hardware.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;HomeAssistant&lt;/a&gt; is our home automation hub. It was one of the first things I attempted to get running on the server, and has been serving use well ever since! We’ve got a number of wifi-controlled light switches and outlets, smart speakers, &lt;a href=&quot;https://github.com/gerth2/smarthome-devices&quot;&gt;some homebrew devices&lt;/a&gt;, and of course many networked devices. HomeAssistant has a ton of built-in functionality - you just have to configure it that “yes, these things are in my home” and it will automatically do some really slick integration, providing a super useful user interface for controlling the devices. Additionally, I can write automation scripts to allow the smart speakers to trigger action on light switches and whatnot. Highly recommended!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hassSample.png&quot; alt=&quot;Home Assistant Sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; is my go-to service for hosting repos online, and making them publicly available. However, there are a handful of projects I really &lt;em&gt;don’t&lt;/em&gt; want to make it outside my home network. Some of them concern the internal configuration of my network, others contain personal info (like my tax returns or resumes). To still be able to have totally-private, not-at-all-in-the-outside-world git projects backed up on a separate device from my PC or laptop, the server also runs an instance of &lt;a href=&quot;https://gitea.io/en-us/&quot;&gt;Gitea&lt;/a&gt;, a simple Github-lookalike that I host myself. I’ll also back up critical projects (like this blog!) just in case Github disappears off the face of the earth - my data won’t disappear with it. Though I will have to find another host.&lt;/p&gt;

&lt;p&gt;For home media, we use &lt;a href=&quot;https://www.plex.tv/&quot;&gt;Plex&lt;/a&gt; to stream media files from our NAS to various viewing screens throughout the house. Both TV’s have some smarts built into them to where they can stream from the server.&lt;/p&gt;

&lt;p&gt;Both Gitea and Plex are backed up against the Network Attached Storage device, which is nice, since the big files don’t take up space on the server’s internal hard drives.&lt;/p&gt;

&lt;p&gt;For monitoring the server status, aside from just remoting in via SSH and running &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, I recently installed &lt;a href=&quot;https://www.netdata.cloud/&quot;&gt;NETDATA&lt;/a&gt; to provide a slick web-based view of how the server is running at the moment. It’s made basic checkups much quicker!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/netdataSample.png&quot; alt=&quot;netdata sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of the applications are contained behind our router’s firewall - no one should be able to access them externally. While on the go, my wife and I use &lt;a href=&quot;https://openvpn.net/&quot;&gt;openVPN&lt;/a&gt; on our phones and laptops to connect back to the home network. The server runs the server-side implementation of openVPN.&lt;/p&gt;

&lt;p&gt;The concept of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_private_network&quot;&gt;Virtual Private Network&lt;/a&gt; is simply putting your data in a “tunnel” - one end on the device your using, the other end inside our home network. This not only makes sure we have access to our home network applications, but also that we can protect our data from potentially untrusted wifi networks (Sorry random coffee shop XYZ, your baristas make great coffee, but probably don’t spend a ton of time analyzing the security of their local branch’s networking equipment). By encrypting our data with our own trusted devices and security keys, we can up our safety factor online quite a bit.&lt;/p&gt;

&lt;p&gt;The server also happens to be hooked up to an amplifier that powers some weatherproof speakers we have outside. The server runs both a &lt;a href=&quot;https://github.com/PromyLOPh/pianobar&quot;&gt;Pianobar&lt;/a&gt; instance controlled within HomeAssistant, as well as a &lt;a href=&quot;https://github.com/duncanthrax/scream&quot;&gt;Scream&lt;/a&gt; server. Using these, we can play and stream audio to our outdoor speakers from quite a few different devices.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ok, this is enough of a technical flex for now. I’m not necessarily recommending that anyone use these tools, or endorsing them in any particular way, other than to say that they work well for my family’s current purposes. If you’re in need of similar solutions, try out the tools and let me know what you think! I’m by no means an expert in any of them, but would be happy to give more feedback if needed.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Though, not as many as my friend whose insurance company wanted to classify him as a small business due to his sheer quantity of high-powered hardware. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Good Comments</title><link href="/blog_posts/2019/08/18/on_code_comments.html" rel="alternate" type="text/html" title="Good Comments" /><published>2019-08-18T10:30:40-04:00</published><updated>2019-08-18T10:30:40-04:00</updated><id>/blog_posts/2019/08/18/on_code_comments</id><content type="html" xml:base="/blog_posts/2019/08/18/on_code_comments.html">&lt;p&gt;&lt;img src=&quot;https://i.redd.it/fqq6ummu09431.png&quot; alt=&quot;the 90 percent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: reddit.com&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Code comments are one of those things that you have to see lots of wrong examples, before you get good at making them right.&lt;/p&gt;

&lt;p&gt;Full disclosure - by most standards, I am &lt;em&gt;horrible&lt;/em&gt; at writing code comments. However, my problem is the opposite that most newbies have - I write far too much in comments.&lt;/p&gt;

&lt;p&gt;I’m hoping to share a tidbit of the wisdom I’ve gotten so far. Rather than corrupt young minds with my excessively verbose ways, I’m hoping we can sorta meet in the middle - get an idea for what “good” or “too much” might look like, and land somewhere in the vicinity of “optimal”.&lt;/p&gt;

&lt;p&gt;All this ties back to a broader discussion of what “good code” is. It’s one sub-component of making sure your code is easily comprehensible, which allows for faster modification, which allows for faster delivery of functional software, which generally keeps the other subteams happy.&lt;/p&gt;

&lt;h2 id=&quot;what-to-comment-on&quot;&gt;What to Comment On&lt;/h2&gt;

&lt;p&gt;The first thing folks should know is that the text inside a comment needs to be helpful. The golden rule of commenting:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COMMENTS SAY &lt;em&gt;WHY&lt;/em&gt; THE CODE IS THE WAY IT IS, NEVER &lt;em&gt;WHAT&lt;/em&gt; IT IS DOING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The absolute worst form of code commenting, that I truly and utterly abhor:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Here is the start of the function named &quot;periodic&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//I have declared two local variables named speed and encoderReading&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//set encoderReading to the return value from the thing getSensorValue()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSensorValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Divide encoderReading by ten and then multiply by fifty.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Return the value within the variable Speed to the caller function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//This function is now done&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, ok. Maybe you’ve seen comments like these on the blog. But that’s different- when I explain &lt;em&gt;what&lt;/em&gt; code is doing, it’s to help teach new people.&lt;/p&gt;

&lt;p&gt;Production robot code is not the place to put tutorials on the nuances of Java/C++/Kotlin/insert-obscure-language-here.&lt;/p&gt;

&lt;p&gt;The comments in the above example contain &lt;em&gt;literally&lt;/em&gt; zero additional information. You are literally sucking up bits of storage on your PC’s hard drive with no added benefit. Even worse, you have written code that &lt;em&gt;appears&lt;/em&gt; to have at least some volume of contents, but on closer inspection has &lt;em&gt;lied&lt;/em&gt; about its usefulness.&lt;/p&gt;

&lt;p&gt;Even worse, some of the comments have &lt;em&gt;wrong&lt;/em&gt; information. You may laugh, but this happens all the time - developer A writes the code and the comment, developer B comes along and updates the code but not the comment. Then developer C is confused and frustrated.&lt;/p&gt;

&lt;p&gt;And, believe it or not, often developers A, B, and C are the same person. I’ve been there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/it_was_me.png&quot; alt=&quot;it was me all the time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: me.me or Stephen Hillenburg, you choose.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please please please please please never ever ever write comments like this.&lt;/p&gt;

&lt;p&gt;Here’s a much better approach:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Stores Speed in RPM&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Stores encoder measured speed in pulses per second&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Read all inputs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Sample from the encoders&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSensorValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Convert to RPM&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Encoder is measuring a target which produces 10 pulses per revolution&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  and speed is supposed to be per-minute, not per-second.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The comments are like a good tour guide in the art gallery - they never describe the actual painting itself, but rather give context to the author’s thought process, and how it connects to the broader culture and time in which it was created. Write your comments to be good tour guides to your own thought process, assumptions, and desires.&lt;/p&gt;

&lt;p&gt;A good practice is to &lt;a href=&quot;https://www.youtube.com/watch?v=eNZsWIzEhP4&quot;&gt;always leave a note&lt;/a&gt; when you still need to come back and finish something:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got condition 1!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This helps you and the next person recall that the code isn’t finished, and there will be more functionality. It also means that if you’re ever wondering “what else should I do?”, one quick answer is search for all occurrences of the string &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; in your code files. If you find &lt;code class=&quot;highlighter-rouge&quot;&gt;//TODO&lt;/code&gt; comments, well, you’ve got something to do!&lt;/p&gt;

&lt;h2 id=&quot;ascii-aesthetics-for-visual-separation&quot;&gt;ASCII-Aesthetics for Visual Separation&lt;/h2&gt;

&lt;p&gt;I’ve been a fan of using comments, whitespace, and ascii art to visually separate different parts of a source code file, as I wish a user to see them separately. This means I’ll usually add some extra spaces between function definitions, maybe an extra newline here or there within a function to mark off different segments of execution.  It’s all about communication - if you want the reader to see two things together, remove whitespace. If you want them to see two things separately, add more whitespace.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_the_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this C code works just fine, I personally like to add a bit more whitespace to separate out the components of the &lt;code class=&quot;highlighter-rouge&quot;&gt;if()&lt;/code&gt; statement condition, into the parts that a human more easily parses:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_the_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not everyone is like me, though, and I’m not even super consistent with my own styles. Still, I feel there’s some value in visually separating things that are (somehow) separate, and visually aligning things which are (somehow) aligned. Communicating intent. That’s all we’re doing here.&lt;/p&gt;

&lt;p&gt;When doing the same thing with comments, I’ve got some favorite ascii-art style ways of doing this visual separation as well:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is a block of comment, hard to miss&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Here is another block, even harder to miss.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//!! HERE IS A SUPER URGENT WARNING YOU CANNOT MISS !!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//~~ Here is a new section of code&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yay!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//~~ Now the code is done.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to take and tweak these as you prefer.&lt;/p&gt;

&lt;h2 id=&quot;standardization-strategies&quot;&gt;Standardization strategies&lt;/h2&gt;

&lt;p&gt;One of the key to writing good code is consistency - making similar things look similar makes your code way easier to read and comprehend, especially to someone who isn’t familiar with it. It helps them know that once they’ve learned one thing in the code, if they see it again, they don’t have to re-learn it.&lt;/p&gt;

&lt;p&gt;A good chunk of this consistency is keeping the &lt;em&gt;quantity&lt;/em&gt; of your comments level throughout the code. As a team, decide what an appropriate level is, and try to stick to it. Make note of it while reviewing each other’s code, and add or remove as needed to keep the level even.&lt;/p&gt;

&lt;p&gt;Once nice practice is to put a description block above every major public function or method. Include key information, such as a description of the function’s usage, what its inputs are supposed to be, what its return value is, any global variables it modifies, etc.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//***************************************************************&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Function Name: myCode&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Description: Displays a happy message, and calculates&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//**               the meaning of life.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Inputs: None&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Outputs: Returns the meaning to life, in an integer.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Globals: No interaction&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//***************************************************************&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yay!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are super careful with how you do something like this, you can use specialized programs like &lt;a href=&quot;https://en.wikipedia.org/wiki/Javadoc&quot;&gt;Javadoc&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Doxygen&quot;&gt;Doxygen&lt;/a&gt; to convert these comment blocks into some very nice looking and easy-to-navigate HTML, producing non-code documentation of how your code works. It’s super useful if someone else has to use your code (like if you were writing &lt;em&gt;for&lt;/em&gt; WPI), but is also just nice to have as a reference anyway.&lt;/p&gt;

&lt;p&gt;One closing note - I always recommend using proper grammar, punctuation, capitalization, spelling, etc. when writing comments. Even if your meaning is communicated without these, taking the time on the comments indicates you also took time writing the code, and are competent at your job. Which, presumably, is the message you’d like to communicate outward.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Code comments are a necessity of writing code which is easily comprehended by humans. Since we want our code to be first and foremost understandable to humans, it makes sense to have good comments. Hopefully you’ve got a few new, good ideas on how to do your commenting. Try them out yourself next time you write some software, talk about it with your team, and let this lead you toward better code!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">C to Assembly</title><link href="/blog_posts/2019/08/17/c_to_assembly.html" rel="alternate" type="text/html" title="C to Assembly" /><published>2019-08-17T10:30:40-04:00</published><updated>2019-08-17T10:30:40-04:00</updated><id>/blog_posts/2019/08/17/c_to_assembly</id><content type="html" xml:base="/blog_posts/2019/08/17/c_to_assembly.html">&lt;p&gt;&lt;em&gt;“Programs must be written for people to read, and only incidentally for machines to execute.” - H. Abelson and G. Sussman (in &lt;a href=&quot;https://web.mit.edu/alexmv/6.037/sicp.pdf&quot;&gt;“The Structure and Interpretation of Computer Programs”&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is going to be like the ending of a Hallmark movie. If you’ve been even mildly following so far, you could have predicted it from a mile away. What we’re about to do is show how C code gets transformed into x86 assembly. With this keystone topic in place we now see the full cascade:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C syntax is built into assembly instructions&lt;/li&gt;
  &lt;li&gt;Assembly instructions are built into bits&lt;/li&gt;
  &lt;li&gt;Bits are loaded into RAM&lt;/li&gt;
  &lt;li&gt;RAM is used to evolve the state of registers in a processor over time&lt;/li&gt;
  &lt;li&gt;Registers in the processor, and the logic gluing them together, are built up from logic gates&lt;/li&gt;
  &lt;li&gt;Logic gates are built up from transistors&lt;/li&gt;
  &lt;li&gt;Transistors are analog electrical components that follow basic laws of physics&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this capstone, you’ll have a &lt;em&gt;very&lt;/em&gt; good grasp of the same background knowledge that’s sitting inside my head as I write code. Not all the knowledge, and not all the answers for sure - but you’ll know enough to &lt;em&gt;know how to ask questions&lt;/em&gt;. This is probably the biggest thing I run into while doing technical work. For better or worse, &lt;em&gt;you don’t know what you don’t know&lt;/em&gt;. It’s impossible to get all the knowledge into your head at once. What you do want to get into your head is a framework for how things work - this way, when it matters, you know what to go look up - how to start a search for the info you actually need. We’ll always have textbooks and the Internet for that.&lt;/p&gt;

&lt;p&gt;Finding the answer is easy. Finding the question is hard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikiquote.org/wiki/Family_Guy/Season_6&quot;&gt;But I digest.&lt;/a&gt; On to our inevitable conclusion…&lt;/p&gt;

&lt;h2 id=&quot;c-code-to-x86&quot;&gt;C code to x86&lt;/h2&gt;

&lt;p&gt;Even though it’s not directly applicable to FRC robots, let’s do a brief description of how C code turns into bits on a processor. If you’re in C++ the process will be extremely similar. Java a little bit less similar (the tools have different names and act at different times, but ultimately do the same job). Labview will be out of scope for now, &lt;a href=&quot;http://www.ni.com/tutorial/11472/en/&quot;&gt;though NI does have some good documentation on how they do their thing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;basics-of-the-compilation-process&quot;&gt;Basics of the Compilation Process&lt;/h3&gt;

&lt;h4 id=&quot;toolchain&quot;&gt;Toolchain&lt;/h4&gt;

&lt;p&gt;In C code land, the there are two tools that work together to create bits.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Compiler&lt;/em&gt; is responsible for converting the .c text files into &lt;em&gt;mostly&lt;/em&gt; 1’s and 0’s which can be run on the processor. However, it doesn’t compute the final layout in memory - it’s designed to work on single .c files at a time. In a multi-file project, files frequently access variables defined in other files. To account for this, the compiler will assign placeholders to things it knows about, or is &lt;em&gt;promised&lt;/em&gt; will exist elsewhere. The results of this operation produces &lt;em&gt;object files&lt;/em&gt;, frequently named the same as the source code file, with the file extension &lt;em&gt;.o&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Linker&lt;/em&gt; is responsible pulling together all the various .o files created by the compiler, along with any built-in system libraries (like, where functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;printf()&lt;/code&gt; are implemented for your machine), and creating the final .exe. This means the &lt;em&gt;linker&lt;/em&gt; creates the final memory address layout, and is what actually confirms that all the variable placeholders that were promised actually exist.&lt;/p&gt;

&lt;p&gt;For simple projects, these steps often happen together in the same executable, right after each other, transparent to the user. More complex projects split the steps up and manually coordinate them using a &lt;em&gt;make&lt;/em&gt; utility.&lt;/p&gt;

&lt;p&gt;For our discussion, we’re going to focus on how the &lt;em&gt;Compiler&lt;/em&gt; does its work, carefully avoiding some of the hoops the linker has to jump through. It will be an abbreviated process that works for small files, which will be sufficient to start learning.&lt;/p&gt;

&lt;h4 id=&quot;lexing--parsing--compiling--linking-oh-my&quot;&gt;Lexing &amp;amp; Parsing &amp;amp; Compiling &amp;amp; Linking, oh my!&lt;/h4&gt;

&lt;p&gt;The compiler’s job is generally divided into 3 phases.&lt;/p&gt;

&lt;p&gt;The first step is to walk through the input file line by line, and separate out each part of each statement. For example, given &lt;code class=&quot;highlighter-rouge&quot;&gt;out = in * 6.0 + 5/in2;&lt;/code&gt;, the first step is to identify that the character strings &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;in2&lt;/code&gt; are variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;6.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; are constants, and &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; are all math and assignment operations. Sometimes, when you see &lt;em&gt;syntax errors&lt;/em&gt;, they come from this first step, where the compiler can’t properly separate out a line into known components. Each of these components is called a &lt;em&gt;token&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The second step is to build up a representation of which variables are related to each other, into something called an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;&lt;em&gt;abstract syntax tree&lt;/em&gt;&lt;/a&gt; (or AST). In our previous example, this representation would show the hierarchy of how &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; is being multiplied by &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;, and how that result must be added with &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; divided by another variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;in2&lt;/code&gt;, and how that whole thing gets stored into a variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The advantage of generating this intermediate representation is having the ability to further understand how each element of code is related to each other. It is the representation that makes it easy to identify when variables haven’t been declared properly (or were misspelled), when variables are read before they are written to, or when code statements don’t actually have any effect on program execution.&lt;/p&gt;

&lt;p&gt;After generating and analyzing the AST, the compiler can finally start to generate assembly instructions. Memory locations for variables are laid out as needed, appropriate assembly functions are chosen to perform the associations described by the tree.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;exact&lt;/em&gt; specifics, of course, will vary language to language, and compiler to compiler. Digging into the specifics of how a particular version of a particular compiler is academically interesting, but actually violates the intent - the Compiler is a tool to be trusted to take your C code, and turn it into executable files. You can always deconstruction what happened if you need to, but generally you won’t need to do that!&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Still though, let’s dig into a few examples concretely of how this would play out. We’ll be doing things simply enough such that we won’t be simmulating the full compiler process, but jumping straight to assembly code.&lt;/p&gt;

&lt;h4 id=&quot;variables-and-math&quot;&gt;Variables and Math&lt;/h4&gt;

&lt;p&gt;Let’s take a super simple example. In C code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This super trivial program calculates a new value for the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;. It’s good that all the variables we’re using are declared, and the program is free of syntax errors.&lt;/p&gt;

&lt;p&gt;To get something like this in assembly code, we’ll need a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Three memory addresses to hold our three variables&lt;/li&gt;
  &lt;li&gt;A segment of code to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function&lt;/li&gt;
  &lt;li&gt;Assembly instructions that work from the &lt;em&gt;inside outward&lt;/em&gt; on our one line of code that does real computation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since this is pretty straightforward, let’s just jump right in!&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input2]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Load the inner-most input&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;imul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; perform input2*5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input1]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; add input1 to that result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[output],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; move the full calculation out to the output variable&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;if-statements&quot;&gt;If Statements&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;If&lt;/code&gt; statements get a bit more complex. One basic strategy is to compute the condition on the inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;’s, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; to go to different sections of code. Choose a flavor of &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; to match the condition. Finally, use unconditional &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt;’s to “rejoin” code after execution has completed.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similar to above, we create global variables, and produce some reasonable-looking assembly instructions:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input1]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Load the inputs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input2]&lt;/span&gt;   

    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run comparison operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; Jump to else if condition is not satisfied&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_if_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_after_if&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;imul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_after_if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few interesting things to note here.&lt;/p&gt;

&lt;p&gt;Since we have a limited number of variables, we make the assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; will correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;input1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt; will correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;input2&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; will correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;. Before using the registers we load them from their global variables, and then move back to memory at the very end.&lt;/p&gt;

&lt;p&gt;Note that even though in C code we compare if &lt;code class=&quot;highlighter-rouge&quot;&gt;input1&lt;/code&gt; is &lt;em&gt;greater&lt;/em&gt; than &lt;code class=&quot;highlighter-rouge&quot;&gt;input2&lt;/code&gt;, in assembly we use a &lt;code class=&quot;highlighter-rouge&quot;&gt;jle&lt;/code&gt; - or &lt;em&gt;jump if less than or equal to&lt;/em&gt;. This is because we chose to check the &lt;em&gt;opposite&lt;/em&gt; of the C code condition, and jump to the &lt;em&gt;else&lt;/em&gt; statement. We also could have done the comparison more akin to the C code:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run comparison operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jg&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_if_start&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_if_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this requires two assembly instructions, so it’s a slightly larger program. Most compilers are capable of generating code both ways, and allow you to tell it “optimize for speed” or “optimize for program size”, and it will choose between options like these to best fit your needs.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; actually acts as an input of sorts, in the body of the &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; statement. Therefor, in the assembly code, we can &lt;em&gt;delay&lt;/em&gt; loading &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; from memory until we know for sure we need it - this helps prevent unnecessary operations.&lt;/p&gt;

&lt;p&gt;Note also the lack of a &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; at the end of section &lt;code class=&quot;highlighter-rouge&quot;&gt;_else_start&lt;/code&gt;. It’s not needed, since the next operation is always the &lt;code class=&quot;highlighter-rouge&quot;&gt;_after_if&lt;/code&gt; statement. We can save a tiny bit of memory by not putting it in, as the processor will do the right thing without it naturally.&lt;/p&gt;

&lt;h4 id=&quot;for-loop&quot;&gt;For Loop&lt;/h4&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop is more or less a combination of the IF statement, with a bit of creative jumping. Take for example this simple C code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In yet another contrived example, we take some input value (25 here), and for that many loops, add the input into some other variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;. After &lt;code class=&quot;highlighter-rouge&quot;&gt;input1&lt;/code&gt; loops, we are done. In assembly, the compiler will have to add the logic of checking “if done”, jumping &lt;em&gt;back&lt;/em&gt; in time if needed to repeat the code. The assembly code could produce something like this:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input1]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Load the inputs. EAX will hold input1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[iter]&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;; EBX will hold our value for iter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; ECX will hold our value for output.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; Perform Loop startup code, &quot;iter=0&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_loop_check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run comparison operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loop_body_start&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; if iter &amp;lt; input1, run a loop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loop_body_end&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Otherwise, we are done. Skip past the loop body to the end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_loop_body_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run the loop body code. In our case, this is just &quot;output += input1&quot; &lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; Perform the loop iteration code, &quot;iter++&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loop_check&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; Go back up to check the iteration condition&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_loop_body_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; Return the newly calculated values to their memory locations&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[iter],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note you can see distinct instructions for all the major components of our standard &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop - the initialization, the loop condition check, the iteration logic, and of course the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop body itself.&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;It should be strongly noted that the examples here are for demonstration purposes only - they show &lt;em&gt;one&lt;/em&gt; possible way to translate &lt;em&gt;specific examples&lt;/em&gt; of higher-level language (C) into a lower level language (x86 asm). More experienced readers may observe that I’ve casually skirted concepts like local variables, the .bss segment, function calls, debugging symbols, optimization, not-always-storing-variables-in-registers, and a whole host of other compiler-related topics that are relevant if you want to write your own compiler. However, though that may be a post one day, it’s not the purpose of this post.&lt;/p&gt;

&lt;p&gt;All a reader should walk away with is a simple understanding - Higher level languages &lt;em&gt;can&lt;/em&gt; be translated to lower level languages. The syntax of each language defines the constraints on how such a translation will happen, which in turn is what drives the rules on why we write programs the way we do.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And this, sadly, is the end of our initial training. We’ve walked ourselves all the way from base physics and math principles, up through the way that boolean logic can be used to perform useful computation, and how circuits can implement that logic and store data. We’ve looked at how to assemble the circuitry into a useful architecture, which can store and execute instructions. And finally, we’ve looked at how the high level languages we are familiar with get translated into those instructions. It is indeed a lot of information, and you shoudl be proud that you have made it to this point.&lt;/p&gt;

&lt;p&gt;But, the work is not yet complete! Expect many more blog posts. We have so much more to discuss about software - both the hard technical skills, and the soft skills of working on a software development team.&lt;/p&gt;

&lt;p&gt;Stay tuned for many more. And until next time, happy coding!&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;To be honest, I am no sure yet. Maybe go get yourself some food.&lt;/p&gt;

&lt;p&gt;If you’re not hungry, go back to the home page and find another blog post!&lt;/p&gt;</content><author><name></name></author><summary type="html">“Programs must be written for people to read, and only incidentally for machines to execute.” - H. Abelson and G. Sussman (in “The Structure and Interpretation of Computer Programs”)</summary></entry></feed>