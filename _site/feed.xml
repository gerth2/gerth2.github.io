<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-08-27T22:36:51-05:00</updated><id>/feed.xml</id><title type="html">Tricking Rocks to Think</title><subtitle>Thoughts on software development, leadership, and sundry other topics in the context of the FIRST robotics competition.</subtitle><entry><title type="html">Why I Use the MIT License</title><link href="/blog_posts/2019/08/27/why_mit.html" rel="alternate" type="text/html" title="Why I Use the MIT License" /><published>2019-08-27T09:30:40-05:00</published><updated>2019-08-27T09:30:40-05:00</updated><id>/blog_posts/2019/08/27/why_mit</id><content type="html" xml:base="/blog_posts/2019/08/27/why_mit.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sparkfun.com/news/2506&quot;&gt;Open source software is definitely an interesting beast.&lt;/a&gt; I didn’t spend too much time thinking about it until my college years, and the more I consider it the more impressive it gets. CAD programs, programming languages, even whole operating systems are developed by massive teams of people who have never met each other in person, and just enjoy engineering &lt;em&gt;so much&lt;/em&gt; they do it in their &lt;em&gt;personal time for free&lt;/em&gt;. And the software that is produced can be crazy good!&lt;/p&gt;

&lt;p&gt;The software that is produced has &lt;em&gt;inherent value&lt;/em&gt;. It’s useful! That means that if I have money, and I need software XYZ, and you are selling software XYZ, I very well might pay money to you to get software XYZ. If you happen to be in the business of making money (as a lot of us are), it would make sense to sell software XYZ. Or take it, and use it in some… unsavory… manner.&lt;/p&gt;

&lt;p&gt;At the end of the day, most open source software developers want to do just that - &lt;em&gt;develop open source software&lt;/em&gt;. They may or may not want others to take and sell and do as they please with it, but they generally don’t want to be bothered having to think about it. That would be open-source lawyering, which is not something I have known software engineers to enjoy.&lt;/p&gt;

&lt;p&gt;With this in mind, most open source software is assigned some specific &lt;em&gt;license&lt;/em&gt; to help take care of these issues.&lt;/p&gt;

&lt;p&gt;I am by no means an expert in this area, so please don’t take this post as real legal advice. What you can take it for is a summary of my knowledge at the time of writing, and the reasons I use for the license I usually select.&lt;/p&gt;

&lt;h2 id=&quot;copyright-basics&quot;&gt;Copyright Basics&lt;/h2&gt;

&lt;p&gt;In the United States, &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_copyright&quot;&gt;Copyright Laws&lt;/a&gt; say that anything you write, including source code, by default cannot be used by others. There are some limits to this, including if your source code is not original, or they change it a &lt;em&gt;lot&lt;/em&gt;, or various other conditions.&lt;/p&gt;

&lt;p&gt;However, these defaults and conditions are not consistent in other countries. To keep things simple, it is worthwhile to lay out the exact terms of usage of your &lt;em&gt;creative work&lt;/em&gt; in specific legal language within a license file.&lt;/p&gt;

&lt;p&gt;You can technically put whatever you want in a license, but it’s best to have a lawyer write it, so that you have some assurance your license will hold up in international courts of law. &lt;a href=&quot;https://opensource.org/licenses&quot;&gt;There are many popular licenses available&lt;/a&gt;, and you can pick and choose from them as you choose.&lt;/p&gt;

&lt;p&gt;For my projects, and most FRC projects, I usually choose the &lt;em&gt;MIT License&lt;/em&gt; (named after that same college with the really smart people).&lt;/p&gt;

&lt;h2 id=&quot;mit-basics&quot;&gt;MIT Basics&lt;/h2&gt;

&lt;p&gt;The “MIT License” is one of the most permissive open source licenses available. Individuals can take the source code and use it however they want. Companies can do the same, including using it to make money with their own products. Anyone can modify their copy of code as they see fit, and they don’t have to report the changes back to you.&lt;/p&gt;

&lt;p&gt;Someone could turn around and sell the source code verbatim, but given that it’s already freely available, that doesn’t seem like a good way to make money.&lt;/p&gt;

&lt;p&gt;The biggest thing they can’t do is strip away the license - any redistribution must include your initial MIT licensing. They must also retain your initial copyright notice, which helps contain a reference back to the original author.&lt;/p&gt;

&lt;p&gt;Finally, the software is always provided “As-Is” - it is intended for &lt;em&gt;no particular purposes at all&lt;/em&gt;. This is a fancy way of saying that, even if I describe the project as “Software for an FRC Robot”, it was never &lt;em&gt;really, leagally&lt;/em&gt; intended for that.&lt;/p&gt;

&lt;h2 id=&quot;why-mit&quot;&gt;Why MIT&lt;/h2&gt;

&lt;p&gt;Especially for FRC purposes, I choose MIT for a few reasons.&lt;/p&gt;

&lt;p&gt;For one, it’s a serious license. Lots of “real” projects use it, so it is &lt;em&gt;extermely&lt;/em&gt; likely to hold up in court, in case I ever have to do that. There are some &lt;a href=&quot;https://en.wikipedia.org/wiki/WTFPL&quot;&gt;much more light-hearted&lt;/a&gt; licenses out there, but I question whether these would actually hold up in court.&lt;/p&gt;

&lt;p&gt;Secondly, it is very open, which is what I want robot software to be. I want it to be super simple for other FRC teams to take our code and use it as they need. I’d appreciate if they give us a shout-out, or let us know if they find problems, or show us how they improved it, but I’d never &lt;em&gt;force&lt;/em&gt; that to be required. Build season is short, we’ve got bigger things to worry about.&lt;/p&gt;

&lt;p&gt;Even with companies - even though it would be &lt;em&gt;nice&lt;/em&gt; if they gave us some money for using our code, I still wouldn’t hold it against them if they seriously thought some random code written by a bunch of sleep-deprived high schoolers was better than their engineers could come up with. Are they hiring? I’ve got some resumes for interns I can forward.&lt;/p&gt;

&lt;p&gt;But, most importantly - it ensures the software will only ever be provided “As-Is”. Here’s the critical thing I worry about - say you claimed your software performed some function safely (as lots of our code comments do). Now say someone copy-pasted that code onto a different robot, fired it up, exercised some bug, and the robot ran over a small child and injured them (ow!). Then they came and sued me because our code claimed it was safe, but in fact it was not.&lt;/p&gt;

&lt;p&gt;This is a hopeless situation. Once I publish code on Github, I have no way of knowing who will copy and paste it, or how they will use it. I have no way of guaranteeing safety of functionality.&lt;/p&gt;

&lt;p&gt;Hopefully any judge who knows how software works wouldn’t actually side with the other person. Even still, I’d prefer not to take the chance. I’d rather be writing software than worrying about whether I’ll be sued or not. So, I am always sure to include an MIT License. Having this present is the legally-binding way of saying to a consumer of the software “It’s your responsibility to validate functionality, not mine”.&lt;/p&gt;

&lt;p&gt;Again, I am no lawyer, so I can’t say my line of thought is 100% correct here. It’s highly influenced by my personal research and desire to sleep well at night, but not much else.&lt;/p&gt;

&lt;h2 id=&quot;other-options&quot;&gt;Other Options&lt;/h2&gt;

&lt;p&gt;There are a bunch of other licenses which have some features you might want. These include requiring people who modify the code to notify you of changes. They also may restrict certain phrases or logos as trademarked, prevent changing the license, or prevent for-profit usage. &lt;a href=&quot;https://tldrlegal.com/license/gnu-general-public-license-v3-(gpl-3)&quot;&gt;GPL-3&lt;/a&gt; and &lt;a href=&quot;https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)&quot;&gt;Apache 2.0&lt;/a&gt; are two other common licenses.&lt;/p&gt;

&lt;p&gt;As a side note - I &lt;em&gt;always&lt;/em&gt; subscribe to the notion of what the industry calls “beerware”, under a broader definition. If I have ever used your open source software, and you happen to be in the Peoria IL area with some time to burn, a round of your favorite drinks or food is on me. And I’ve got plenty of good local suggestions! Perhaps for another post.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Looking to choose a license for your project? Choose wisely! &lt;a href=&quot;https://choosealicense.com/&quot;&gt;There are many good tools online&lt;/a&gt; to help you make the choice! Protect yourself and your software, and make it exactly as open for usage as you like!&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">My Computer Engineering Toolkit</title><link href="/blog_posts/2019/08/23/my_toolkit.html" rel="alternate" type="text/html" title="My Computer Engineering Toolkit" /><published>2019-08-23T09:30:40-05:00</published><updated>2019-08-23T09:30:40-05:00</updated><id>/blog_posts/2019/08/23/my_toolkit</id><content type="html" xml:base="/blog_posts/2019/08/23/my_toolkit.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This will be a bit of self promotion, but hopefully educational at the same time. Here’s a confession - I have many computers in my life &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. They have come and gone over the years, and all played a crucial role in my education and learning, leading me toward the engineer I am today.&lt;/p&gt;

&lt;p&gt;I wanted to spend a post talking about the machines I currently use to do my thing.&lt;/p&gt;

&lt;p&gt;For context, if you happen to go to my &lt;a href=&quot;https://www.linkedin.com/in/christopher-gerth-7b8b52126/&quot;&gt;linkedin page&lt;/a&gt;, you’ll notice I’m an &lt;em&gt;embedded&lt;/em&gt; software engineer by day. Basically, this just means my day job is the same as my robotics software-mentor job - just on bigger and yellower machines. My hobbies (robotics and otherwise) tend to flow straight from this occupation.&lt;/p&gt;

&lt;p&gt;What I’ll talk through are what sorts of machines I use day to day to accomplish my personal and mentorship software development tasks. I hope that by getting some insight into how I’ve configured the tools around me, you may get some ideas of your own to form your own custom toolkit to support your hobbies!&lt;/p&gt;

&lt;h2 id=&quot;computer-hardware&quot;&gt;Computer Hardware&lt;/h2&gt;

&lt;h3 id=&quot;the-main-show---the-desktop&quot;&gt;The Main Show - the Desktop&lt;/h3&gt;

&lt;p&gt;My “daily driver” machine is my custom-built desktop. It was fairly up-to-date when I built it in 2013, but it has aged very well - it’s still more than fast enough to run any internet browsing, code editing and building, and occasional video games I throw at it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/thePC.jpg&quot; alt=&quot;thePC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some basic specs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Intel i5 3350P CPU - 3.10 GHz&lt;/li&gt;
  &lt;li&gt;8GB RAM&lt;/li&gt;
  &lt;li&gt;128 GB Main SSD, 1Tb expansion Drive&lt;/li&gt;
  &lt;li&gt;NVIDIA GeForce GTX 660&lt;/li&gt;
  &lt;li&gt;Windows 10 Professional&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Samsung-LU28E570DS-ZA-Led-Lit-Monitor/dp/B07FBNPTDD/ref=sr_1_1?keywords=samsung+4k+monitor&amp;amp;qid=1566526097&amp;amp;s=gateway&amp;amp;sr=8-1&quot;&gt;Samsung 4K 28-inch monitor&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;I’ve gone back and forth on this over the years. I really like all the screen real estate in one spot, and Windows 10 is great about managing it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Mad-Catz-RAT4-Programmable-Adjustable/dp/B01JBZMGAG&quot;&gt;RAT4 Mouse&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Gotta get something that looks cool, and has programmable buttons. If you’ve never experienced a mouse with a dedicated “back” button, you haven’t lived!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Adesso-AKB-635UB-Easy-Touch-635/dp/B00SX4X8WW/ref=sr_1_3?keywords=adesso+mechanical+keyboard&amp;amp;qid=1566526455&amp;amp;s=gateway&amp;amp;sr=8-3&quot;&gt;Adesso Mechanical Keyboard&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Mine is similar to this one, I don’t think they sell it anymore.&lt;/li&gt;
      &lt;li&gt;Mine has &lt;a href=&quot;https://www.keyboardco.com/blog/index.php/2012/12/an-introduction-to-cherry-mx-mechanical-switches/&quot;&gt;Cherry Blue switches&lt;/a&gt; - the really &lt;em&gt;really&lt;/em&gt; clicky ones. Drives the wife mad. But I &lt;em&gt;love&lt;/em&gt; the tactile feel.
        &lt;ul&gt;
          &lt;li&gt;Of course, it’s not for everyone. Try a bunch of different keyboards to see which one you like.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mousepad is a chunk of fabric-covered neoprene that was surplus from the manufacture of &lt;a href=&quot;https://www.hakenaudio.com/&quot;&gt;Haken Continuum&lt;/a&gt; continuous keyboard. It’s a fun souvenir from one of my favorite college classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/thePCguts.jpg&quot; alt=&quot;thePCGuts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again keep in mind - these specs are 6 years old at the time of writing. If I ever happen upon a spare couple hundred dollars, I this will probably be the first thing I upgrade. However, it’s still running so fast, it’s hard to bring myself to do so.&lt;/p&gt;

&lt;p&gt;None of this is really top-of-the-line - it’s middle to cheap, but more than sufficient to support my personal coding and development projects.&lt;/p&gt;

&lt;h3 id=&quot;the-new-guy---the-laptop&quot;&gt;The New Guy - the Laptop&lt;/h3&gt;

&lt;p&gt;For folks who do lots of FRC software mentoring, turns out the vast majority of my coding occurs on the road. For this reason, I recently splurged on getting a good machine that would take all the software-writing punishment I could throw at it. My choice? The &lt;a href=&quot;https://consumer.huawei.com/us/tablets/matebook-x-pro/&quot;&gt;Huawei MateBook X Pro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gloimg.gbtcdn.com/soa/gb/pdm-product-pic/Electronic/2018/07/09/goods_img_big-v1/20180709131041_59936.jpg&quot; alt=&quot;matebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: gearbest.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That’s right - I got the Chinese hardware. But I have to say, it’s super awesome. Sleek and light, phenomenal battery life, a brilliant and giant display (my key criteria), and a pretty good keyboard and trackpad make for an excellent coding machine on the road.&lt;/p&gt;

&lt;p&gt;The device sports a plethora of USB-C connectors. I usually carry dongle adapters to get me to VGA and HDMI, as well as extra USB and Ethernet ports (all very important for robot usage).&lt;/p&gt;

&lt;p&gt;To address the elephant at the time of this post - &lt;em&gt;Yes, Huawei devices are considered a security risk in the US&lt;/em&gt;. Most of the concern has been targeted at their servers and networking hardware, as it relates to the 5G expansion of wireless telecom carriers. Their consumer hardware is under target too. It was a risk I took when purchasing. I’m hoping the situation gets cleared up soon, but also keeping my finger on the pulse of the conversation, and actively monitoring network traffic. If something starts “phoning home”, I will probably re-evaluate what sort of network permissions this device will get.&lt;/p&gt;

&lt;p&gt;No major changes to the OS or hardware since I’ve gotten it. I’ve got exactly what they say they sell on their website.&lt;/p&gt;

&lt;h3 id=&quot;the-old-standby---the-server&quot;&gt;The Old Standby - the Server&lt;/h3&gt;

&lt;p&gt;At my home, I run one additional machine that acts as a server. I run a Dell PowerEdge R200 in my basement.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2.33GHz Xenon CPU&lt;/li&gt;
  &lt;li&gt;4GB RAM&lt;/li&gt;
  &lt;li&gt;128 GB SSD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;\assets\server.png&quot; alt=&quot;the server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s really not much - the thing is 10 years old. I got it for a &lt;em&gt;steep&lt;/em&gt; discount on eBay - just had to provide my own hard drive.&lt;/p&gt;

&lt;p&gt;I run &lt;a href=&quot;https://www.archlinux.org/&quot;&gt;ArchLinux&lt;/a&gt;, one of the most trimmed down operating systems with the &lt;a href=&quot;https://www.linux.com/what-is-linux/&quot;&gt;Linux Kernel&lt;/a&gt; you can get. It’s a “no batteries included” approach to design - which means you get lots of configurability as a user. This server is the platform for a large number of continuous-running applications I keep at my house.&lt;/p&gt;

&lt;h3 id=&quot;network-storage&quot;&gt;Network Storage&lt;/h3&gt;

&lt;p&gt;For saving files and doing server backup, I run a 2-TB &lt;a href=&quot;https://www.buffalotech.com/products/category/network-attached-storage&quot;&gt;Buffalo Network Attached Storage&lt;/a&gt; device, with two hot-swapable drives in a RAID configuration allowing for full redundancy. It’s primarily to supplement the other devices on the network - I’ll get into that later.&lt;/p&gt;

&lt;h3 id=&quot;other-home-networking-equipment&quot;&gt;Other Home Networking Equipment&lt;/h3&gt;

&lt;p&gt;Along with the server, my small rack downstairs consists of two ethernet switches (one providing Power Over Ethernet, one not), an old Netgear combination Router &amp;amp; Wifi access point, and our modem. We’re lucky and have fiber internet service - I’m currently on a 300MBps plan that makes for a &lt;em&gt;blazing&lt;/em&gt; fast experience.&lt;/p&gt;

&lt;p&gt;When I moved into the house, one of my first projects was to install &lt;a href=&quot;https://www.monoprice.com/product?p_id=8103&quot;&gt;Cat6 ethernet wiring&lt;/a&gt; throughout the house. I added 7 new ports on two floors of the house, and ran all the wiring back down to the server &amp;amp; ethernet switches. This allows our media station (Roku &amp;amp; smart DVD Player) the desktop, and a few wired security cameras to connect to wired internet, even though they’re all in different rooms than the rest of the equipment. It also means the noisy server lives downstairs behind closed doors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/networkEquipment.png&quot; alt=&quot;Network Equip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In a super simplified (to the point of inaccurate) diagram, here’s how it all is hooked together:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simplifiedNetwork.png&quot; alt=&quot;Home Network Diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;key-software&quot;&gt;Key Software&lt;/h2&gt;

&lt;p&gt;This hardware would be nothing without the software that sits on top of it to be useful. I’ll give a quick survey of the pieces of software that get used on a daily basis in my household.&lt;/p&gt;

&lt;h3 id=&quot;on-the-desktop--laptop&quot;&gt;On the Desktop &amp;amp; Laptop&lt;/h3&gt;

&lt;p&gt;I have a strong preference for free software because I like to spend my money on other things, like food. Sometimes you have to pay for good stuff. However, we are lucky that in today’s world, the majority of the tools needed for day-to-day software development can be acquired free of cost!&lt;/p&gt;

&lt;h4 id=&quot;development-environment&quot;&gt;Development Environment&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; is my preferred code editor. The ability to support so many languages so flexibly, along with tons of built-in tools.&lt;/p&gt;

&lt;p&gt;I’m also a huge fan of dark mode, and I really like the built-in color theme. Call me shallow, but if you have to stare at code all day long, might as well do it in a way that looks ascetically pleasing to you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vsCodeSample.png&quot; alt=&quot;VSCodeSample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; is a daily part of my development experience. Ever since I learned how to use it in college and on my first job, it’s become an indispensible tool for keeping track of how I change my software over time, organizing my development process, and creating backups of projects. Though I often manipulate my repos via the command line, I still really like having a nice visualization of my version tree. &lt;a href=&quot;https://gitextensions.github.io/&quot;&gt;Git Extensions&lt;/a&gt; is my current choice for doing this, but there’s lots of great alternatives.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gitExtensionsSample.png&quot; alt=&quot;GitExtensionsSample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When connecting to the server, I generally use &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;SSH&lt;/a&gt; to get access to a command line on the other machine. &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt; is my tool of choice to get this done on Windows, though the one built into Git’s command prompt works just fine too.&lt;/p&gt;

&lt;p&gt;Connecting between the Windows machines usually involves Window’s built-in Remote Desktop application.&lt;/p&gt;

&lt;p&gt;For working with C code, I tend to prefer the &lt;a href=&quot;http://www.mingw.org/wiki/MSYS&quot;&gt;msys/minGW&lt;/a&gt; to get the parts of the GNU/Linux environment on my Windows machines required to build and link C code to an executable. &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt; is another super common option.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; is my go-to language for most projects - it’s got easy &amp;amp; c-like syntax, cross-platform abilities, and batteries-included philosophy makes it a good choice for creating highly functional prototypes and super-flexible applications. For pure speed or robustness other options may be better, but Python is still my daily-driver for a language to implement my ideas in.&lt;/p&gt;

&lt;h4 id=&quot;general-engineering-tools&quot;&gt;General Engineering Tools&lt;/h4&gt;

&lt;p&gt;Of recent, &lt;a href=&quot;https://discordapp.com/&quot;&gt;Discord&lt;/a&gt; has become the defacto tool for maintaining communication in our FRC team, amongst friends, and even family.&lt;/p&gt;

&lt;p&gt;For CAD, I tend to like &lt;a href=&quot;https://librecad.org/&quot;&gt;LibreCAD&lt;/a&gt; in the 2D drawings, and use &lt;a href=&quot;https://www.autodesk.com/products/inventor/overview&quot;&gt;Autodesk Inventor&lt;/a&gt; for 3D work. Both have many alternatives, these are simply the ones that I learned first, so I’m still the most efficient with them. I don’t have to do this super often, so I tend to stick with what I know, rather than invest in a new tool.&lt;/p&gt;

&lt;p&gt;For electronics work, I have a few tools of choice. For doing research on the functionality of circuits and simulating their behavior, I use a program called &lt;a href=&quot;https://www.analog.com/en/design-center/design-tools-and-calculators/ltspice-simulator.html&quot;&gt;LTspice&lt;/a&gt;. It’s a bit obtuse to get used to, I learned it in college. It helps when designing analog circuitry and validating functionality prior to building a real circuit.&lt;/p&gt;

&lt;p&gt;When designing an actual circuit that I’ll build, I switch over to a different tool. &lt;a href=&quot;http://www.kicad-pcb.org/&quot;&gt;KiCad&lt;/a&gt; has been my choice of recent, though &lt;a href=&quot;https://www.autodesk.com/products/eagle/free-download&quot;&gt;Autodesk Eagle&lt;/a&gt; was my choice in college. Both give a vast library of components that you first assemble into a nice circuit schematic, then lay out physically on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Printed_circuit_board&quot;&gt;printed circuit board (PCB)&lt;/a&gt;. In addition to printing the schematic, you can export various files from the PCB design side that manufacturers can use to create a custom board for you. This will likely be the subject of a future blog post.&lt;/p&gt;

&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;/h4&gt;

&lt;p&gt;For documenting my work, I tend toward two tools.&lt;/p&gt;

&lt;p&gt;For simple technical documentation, I really &lt;em&gt;really&lt;/em&gt; like &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt;. That’s what this website is (mostly) written in! My liking is primarily because it’s super simple to write - basically just editing a text file. The rendering into nicely-formatted viewing is done by some other tool. To me, this is awesome because even if the visualization tool goes extinct, the base content is still super accessible and readable (unlike Microsoft Word or the like). Github and its clones support it natively, so &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt; files you produce display very nicely via their web interface (which is how most 3rd party folks will first see your projects). The feature set provided is, for me, “just-right” - simple formatting of code, images, headings, lists. All without the overhead of pure HTML/CSS/Javascript to accomplish the same thing. Of course, if doing a website from the ground up, you’ll want to be more familiar with those. However, for something like this blog, Markdown is an awesome choice for entering the information with enough complexity to fully describe your ideas, without unneeded overhead.&lt;/p&gt;

&lt;p&gt;For more formal documentation (think, scientific papers or resumes), &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; is by far king, and I also love it. It produces &lt;a href=&quot;https://github.com/RobotCasserole1736/CasseroleLib/blob/master/doc/current_limiting.pdf&quot;&gt;beautifully formatted documents&lt;/a&gt; with top-of-the-line scientific equation editing. It also does great resumes - I recently moved mine over using the &lt;a href=&quot;https://ctan.org/pkg/moderncv?lang=en&quot;&gt;ModernCV&lt;/a&gt; templates! It’s a bit obtuse to learn at first, but the end results are well worth it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/latexResume.png&quot; alt=&quot;LatexResume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Looks even better unredacted!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;on-the-server&quot;&gt;On the Server&lt;/h3&gt;

&lt;p&gt;The Gerth Household Server (affectionately nicknamed “Geezer” for its age) runs a number of applications which improve out lives on daily basis. I got into having a household server after my college laptop’s screen died, leaving it only useful by SSH or Remote Desktop access. I was bored one weekend, got Arch Linux up and running, and it kinda just snowballed from there. A few years back I finally decided running my laptop to death wasn’t a great idea, and swapped for the PowerEdge server hardware.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.home-assistant.io/&quot;&gt;HomeAssistant&lt;/a&gt; is our home automation hub. It was one of the first things I attempted to get running on the server, and has been serving use well ever since! We’ve got a number of wifi-controlled light switches and outlets, smart speakers, &lt;a href=&quot;https://github.com/gerth2/smarthome-devices&quot;&gt;some homebrew devices&lt;/a&gt;, and of course many networked devices. HomeAssistant has a ton of built-in functionality - you just have to configure it that “yes, these things are in my home” and it will automatically do some really slick integration, providing a super useful user interface for controlling the devices. Additionally, I can write automation scripts to allow the smart speakers to trigger action on light switches and whatnot. Highly recommended!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hassSample.png&quot; alt=&quot;Home Assistant Sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; is my go-to service for hosting repos online, and making them publicly available. However, there are a handful of projects I really &lt;em&gt;don’t&lt;/em&gt; want to make it outside my home network. Some of them concern the internal configuration of my network, others contain personal info (like my tax returns or resumes). To still be able to have totally-private, not-at-all-in-the-outside-world git projects backed up on a separate device from my PC or laptop, the server also runs an instance of &lt;a href=&quot;https://gitea.io/en-us/&quot;&gt;Gitea&lt;/a&gt;, a simple Github-lookalike that I host myself. I’ll also back up critical projects (like this blog!) just in case Github disappears off the face of the earth - my data won’t disappear with it. Though I will have to find another host.&lt;/p&gt;

&lt;p&gt;For home media, we use &lt;a href=&quot;https://www.plex.tv/&quot;&gt;Plex&lt;/a&gt; to stream media files from our NAS to various viewing screens throughout the house. Both TV’s have some smarts built into them to where they can stream from the server.&lt;/p&gt;

&lt;p&gt;Both Gitea and Plex are backed up against the Network Attached Storage device, which is nice, since the big files don’t take up space on the server’s internal hard drives.&lt;/p&gt;

&lt;p&gt;For monitoring the server status, aside from just remoting in via SSH and running &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, I recently installed &lt;a href=&quot;https://www.netdata.cloud/&quot;&gt;NETDATA&lt;/a&gt; to provide a slick web-based view of how the server is running at the moment. It’s made basic checkups much quicker!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/netdataSample.png&quot; alt=&quot;netdata sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of the applications are contained behind our router’s firewall - no one should be able to access them externally. While on the go, my wife and I use &lt;a href=&quot;https://openvpn.net/&quot;&gt;openVPN&lt;/a&gt; on our phones and laptops to connect back to the home network. The server runs the server-side implementation of openVPN.&lt;/p&gt;

&lt;p&gt;The concept of this &lt;a href=&quot;https://en.wikipedia.org/wiki/Virtual_private_network&quot;&gt;Virtual Private Network&lt;/a&gt; is simply putting your data in a “tunnel” - one end on the device your using, the other end inside our home network. This not only makes sure we have access to our home network applications, but also that we can protect our data from potentially untrusted wifi networks (Sorry random coffee shop XYZ, your baristas make great coffee, but probably don’t spend a ton of time analyzing the security of their local branch’s networking equipment). By encrypting our data with our own trusted devices and security keys, we can up our safety factor online quite a bit.&lt;/p&gt;

&lt;p&gt;The server also happens to be hooked up to an amplifier that powers some weatherproof speakers we have outside. The server runs both a &lt;a href=&quot;https://github.com/PromyLOPh/pianobar&quot;&gt;Pianobar&lt;/a&gt; instance controlled within HomeAssistant, as well as a &lt;a href=&quot;https://github.com/duncanthrax/scream&quot;&gt;Scream&lt;/a&gt; server. Using these, we can play and stream audio to our outdoor speakers from quite a few different devices.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ok, this is enough of a technical flex for now. I’m not necessarily recommending that anyone use these tools, or endorsing them in any particular way, other than to say that they work well for my family’s current purposes. If you’re in need of similar solutions, try out the tools and let me know what you think! I’m by no means an expert in any of them, but would be happy to give more feedback if needed.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Though, not as many as my friend whose insurance company wanted to classify him as a small business due to his sheer quantity of high-powered hardware. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Good Comments</title><link href="/blog_posts/2019/08/18/on_code_comments.html" rel="alternate" type="text/html" title="Good Comments" /><published>2019-08-18T09:30:40-05:00</published><updated>2019-08-18T09:30:40-05:00</updated><id>/blog_posts/2019/08/18/on_code_comments</id><content type="html" xml:base="/blog_posts/2019/08/18/on_code_comments.html">&lt;p&gt;&lt;img src=&quot;https://i.redd.it/fqq6ummu09431.png&quot; alt=&quot;the 90 percent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: reddit.com&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Code comments are one of those things that you have to see lots of wrong examples, before you get good at making them right.&lt;/p&gt;

&lt;p&gt;Full disclosure - by most standards, I am &lt;em&gt;horrible&lt;/em&gt; at writing code comments. However, my problem is the opposite that most newbies have - I write far too much in comments.&lt;/p&gt;

&lt;p&gt;I’m hoping to share a tidbit of the wisdom I’ve gotten so far. Rather than corrupt young minds with my excessively verbose ways, I’m hoping we can sorta meet in the middle - get an idea for what “good” or “too much” might look like, and land somewhere in the vicinity of “optimal”.&lt;/p&gt;

&lt;p&gt;All this ties back to a broader discussion of what “good code” is. It’s one sub-component of making sure your code is easily comprehensible, which allows for faster modification, which allows for faster delivery of functional software, which generally keeps the other subteams happy.&lt;/p&gt;

&lt;h2 id=&quot;what-to-comment-on&quot;&gt;What to Comment On&lt;/h2&gt;

&lt;p&gt;The first thing folks should know is that the text inside a comment needs to be helpful. The golden rule of commenting:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COMMENTS SAY &lt;em&gt;WHY&lt;/em&gt; THE CODE IS THE WAY IT IS, NEVER &lt;em&gt;WHAT&lt;/em&gt; IT IS DOING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The absolute worst form of code commenting, that I truly and utterly abhor:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Here is the start of the function named &quot;periodic&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//I have declared two local variables named speed and encoderReading&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//set encoderReading to the return value from the thing getSensorValue()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSensorValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Divide encoderReading by ten and then multiply by fifty.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Return the value within the variable Speed to the caller function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//This function is now done&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, ok. Maybe you’ve seen comments like these on the blog. But that’s different- when I explain &lt;em&gt;what&lt;/em&gt; code is doing, it’s to help teach new people.&lt;/p&gt;

&lt;p&gt;Production robot code is not the place to put tutorials on the nuances of Java/C++/Kotlin/insert-obscure-language-here.&lt;/p&gt;

&lt;p&gt;The comments in the above example contain &lt;em&gt;literally&lt;/em&gt; zero additional information. You are literally sucking up bits of storage on your PC’s hard drive with no added benefit. Even worse, you have written code that &lt;em&gt;appears&lt;/em&gt; to have at least some volume of contents, but on closer inspection has &lt;em&gt;lied&lt;/em&gt; about its usefulness.&lt;/p&gt;

&lt;p&gt;Even worse, some of the comments have &lt;em&gt;wrong&lt;/em&gt; information. You may laugh, but this happens all the time - developer A writes the code and the comment, developer B comes along and updates the code but not the comment. Then developer C is confused and frustrated.&lt;/p&gt;

&lt;p&gt;And, believe it or not, often developers A, B, and C are the same person. I’ve been there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/it_was_me.png&quot; alt=&quot;it was me all the time&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source: me.me or Stephen Hillenburg, you choose.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Please please please please please never ever ever write comments like this.&lt;/p&gt;

&lt;p&gt;Here’s a much better approach:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Stores Speed in RPM&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Stores encoder measured speed in pulses per second&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Read all inputs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Sample from the encoders&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSensorValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Convert to RPM&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Encoder is measuring a target which produces 10 pulses per revolution&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  and speed is supposed to be per-minute, not per-second.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoderReading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The comments are like a good tour guide in the art gallery - they never describe the actual painting itself, but rather give context to the author’s thought process, and how it connects to the broader culture and time in which it was created. Write your comments to be good tour guides to your own thought process, assumptions, and desires.&lt;/p&gt;

&lt;p&gt;A good practice is to &lt;a href=&quot;https://www.youtube.com/watch?v=eNZsWIzEhP4&quot;&gt;always leave a note&lt;/a&gt; when you still need to come back and finish something:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;periodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got condition 1!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//TODO&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This helps you and the next person recall that the code isn’t finished, and there will be more functionality. It also means that if you’re ever wondering “what else should I do?”, one quick answer is search for all occurrences of the string &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; in your code files. If you find &lt;code class=&quot;highlighter-rouge&quot;&gt;//TODO&lt;/code&gt; comments, well, you’ve got something to do!&lt;/p&gt;

&lt;h2 id=&quot;ascii-aesthetics-for-visual-separation&quot;&gt;ASCII-Aesthetics for Visual Separation&lt;/h2&gt;

&lt;p&gt;I’ve been a fan of using comments, whitespace, and ascii art to visually separate different parts of a source code file, as I wish a user to see them separately. This means I’ll usually add some extra spaces between function definitions, maybe an extra newline here or there within a function to mark off different segments of execution.  It’s all about communication - if you want the reader to see two things together, remove whitespace. If you want them to see two things separately, add more whitespace.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_the_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this C code works just fine, I personally like to add a bit more whitespace to separate out the components of the &lt;code class=&quot;highlighter-rouge&quot;&gt;if()&lt;/code&gt; statement condition, into the parts that a human more easily parses:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_the_thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not everyone is like me, though, and I’m not even super consistent with my own styles. Still, I feel there’s some value in visually separating things that are (somehow) separate, and visually aligning things which are (somehow) aligned. Communicating intent. That’s all we’re doing here.&lt;/p&gt;

&lt;p&gt;When doing the same thing with comments, I’ve got some favorite ascii-art style ways of doing this visual separation as well:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This is a block of comment, hard to miss&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//----------------------------------------------&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Here is another block, even harder to miss.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//!! HERE IS A SUPER URGENT WARNING YOU CANNOT MISS !!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//~~ Here is a new section of code&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yay!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//~~ Now the code is done.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Feel free to take and tweak these as you prefer.&lt;/p&gt;

&lt;h2 id=&quot;standardization-strategies&quot;&gt;Standardization strategies&lt;/h2&gt;

&lt;p&gt;One of the key to writing good code is consistency - making similar things look similar makes your code way easier to read and comprehend, especially to someone who isn’t familiar with it. It helps them know that once they’ve learned one thing in the code, if they see it again, they don’t have to re-learn it.&lt;/p&gt;

&lt;p&gt;A good chunk of this consistency is keeping the &lt;em&gt;quantity&lt;/em&gt; of your comments level throughout the code. As a team, decide what an appropriate level is, and try to stick to it. Make note of it while reviewing each other’s code, and add or remove as needed to keep the level even.&lt;/p&gt;

&lt;p&gt;Once nice practice is to put a description block above every major public function or method. Include key information, such as a description of the function’s usage, what its inputs are supposed to be, what its return value is, any global variables it modifies, etc.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//***************************************************************&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Function Name: myCode&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Description: Displays a happy message, and calculates&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//**               the meaning of life.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Inputs: None&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Outputs: Returns the meaning to life, in an integer.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//** Globals: No interaction&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//***************************************************************&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yay!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are super careful with how you do something like this, you can use specialized programs like &lt;a href=&quot;https://en.wikipedia.org/wiki/Javadoc&quot;&gt;Javadoc&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Doxygen&quot;&gt;Doxygen&lt;/a&gt; to convert these comment blocks into some very nice looking and easy-to-navigate HTML, producing non-code documentation of how your code works. It’s super useful if someone else has to use your code (like if you were writing &lt;em&gt;for&lt;/em&gt; WPI), but is also just nice to have as a reference anyway.&lt;/p&gt;

&lt;p&gt;One closing note - I always recommend using proper grammar, punctuation, capitalization, spelling, etc. when writing comments. Even if your meaning is communicated without these, taking the time on the comments indicates you also took time writing the code, and are competent at your job. Which, presumably, is the message you’d like to communicate outward.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Code comments are a necessity of writing code which is easily comprehended by humans. Since we want our code to be first and foremost understandable to humans, it makes sense to have good comments. Hopefully you’ve got a few new, good ideas on how to do your commenting. Try them out yourself next time you write some software, talk about it with your team, and let this lead you toward better code!&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">C to Assembly</title><link href="/blog_posts/2019/08/17/c_to_assembly.html" rel="alternate" type="text/html" title="C to Assembly" /><published>2019-08-17T09:30:40-05:00</published><updated>2019-08-17T09:30:40-05:00</updated><id>/blog_posts/2019/08/17/c_to_assembly</id><content type="html" xml:base="/blog_posts/2019/08/17/c_to_assembly.html">&lt;p&gt;&lt;em&gt;“Programs must be written for people to read, and only incidentally for machines to execute.” - H. Abelson and G. Sussman (in &lt;a href=&quot;https://web.mit.edu/alexmv/6.037/sicp.pdf&quot;&gt;“The Structure and Interpretation of Computer Programs”&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is going to be like the ending of a Hallmark movie. If you’ve been even mildly following so far, you could have predicted it from a mile away. What we’re about to do is show how C code gets transformed into x86 assembly. With this keystone topic in place we now see the full cascade:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C syntax is built into assembly instructions&lt;/li&gt;
  &lt;li&gt;Assembly instructions are built into bits&lt;/li&gt;
  &lt;li&gt;Bits are loaded into RAM&lt;/li&gt;
  &lt;li&gt;RAM is used to evolve the state of registers in a processor over time&lt;/li&gt;
  &lt;li&gt;Registers in the processor, and the logic gluing them together, are built up from logic gates&lt;/li&gt;
  &lt;li&gt;Logic gates are built up from transistors&lt;/li&gt;
  &lt;li&gt;Transistors are analog electrical components that follow basic laws of physics&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this capstone, you’ll have a &lt;em&gt;very&lt;/em&gt; good grasp of the same background knowledge that’s sitting inside my head as I write code. Not all the knowledge, and not all the answers for sure - but you’ll know enough to &lt;em&gt;know how to ask questions&lt;/em&gt;. This is probably the biggest thing I run into while doing technical work. For better or worse, &lt;em&gt;you don’t know what you don’t know&lt;/em&gt;. It’s impossible to get all the knowledge into your head at once. What you do want to get into your head is a framework for how things work - this way, when it matters, you know what to go look up - how to start a search for the info you actually need. We’ll always have textbooks and the Internet for that.&lt;/p&gt;

&lt;p&gt;Finding the answer is easy. Finding the question is hard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikiquote.org/wiki/Family_Guy/Season_6&quot;&gt;But I digest.&lt;/a&gt; On to our inevitable conclusion…&lt;/p&gt;

&lt;h2 id=&quot;c-code-to-x86&quot;&gt;C code to x86&lt;/h2&gt;

&lt;p&gt;Even though it’s not directly applicable to FRC robots, let’s do a brief description of how C code turns into bits on a processor. If you’re in C++ the process will be extremely similar. Java a little bit less similar (the tools have different names and act at different times, but ultimately do the same job). Labview will be out of scope for now, &lt;a href=&quot;http://www.ni.com/tutorial/11472/en/&quot;&gt;though NI does have some good documentation on how they do their thing&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;basics-of-the-compilation-process&quot;&gt;Basics of the Compilation Process&lt;/h3&gt;

&lt;h4 id=&quot;toolchain&quot;&gt;Toolchain&lt;/h4&gt;

&lt;p&gt;In C code land, the there are two tools that work together to create bits.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Compiler&lt;/em&gt; is responsible for converting the .c text files into &lt;em&gt;mostly&lt;/em&gt; 1’s and 0’s which can be run on the processor. However, it doesn’t compute the final layout in memory - it’s designed to work on single .c files at a time. In a multi-file project, files frequently access variables defined in other files. To account for this, the compiler will assign placeholders to things it knows about, or is &lt;em&gt;promised&lt;/em&gt; will exist elsewhere. The results of this operation produces &lt;em&gt;object files&lt;/em&gt;, frequently named the same as the source code file, with the file extension &lt;em&gt;.o&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Linker&lt;/em&gt; is responsible pulling together all the various .o files created by the compiler, along with any built-in system libraries (like, where functions like &lt;code class=&quot;highlighter-rouge&quot;&gt;printf()&lt;/code&gt; are implemented for your machine), and creating the final .exe. This means the &lt;em&gt;linker&lt;/em&gt; creates the final memory address layout, and is what actually confirms that all the variable placeholders that were promised actually exist.&lt;/p&gt;

&lt;p&gt;For simple projects, these steps often happen together in the same executable, right after each other, transparent to the user. More complex projects split the steps up and manually coordinate them using a &lt;em&gt;make&lt;/em&gt; utility.&lt;/p&gt;

&lt;p&gt;For our discussion, we’re going to focus on how the &lt;em&gt;Compiler&lt;/em&gt; does its work, carefully avoiding some of the hoops the linker has to jump through. It will be an abbreviated process that works for small files, which will be sufficient to start learning.&lt;/p&gt;

&lt;h4 id=&quot;lexing--parsing--compiling--linking-oh-my&quot;&gt;Lexing &amp;amp; Parsing &amp;amp; Compiling &amp;amp; Linking, oh my!&lt;/h4&gt;

&lt;p&gt;The compiler’s job is generally divided into 3 phases.&lt;/p&gt;

&lt;p&gt;The first step is to walk through the input file line by line, and separate out each part of each statement. For example, given &lt;code class=&quot;highlighter-rouge&quot;&gt;out = in * 6.0 + 5/in2;&lt;/code&gt;, the first step is to identify that the character strings &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;in2&lt;/code&gt; are variables, &lt;code class=&quot;highlighter-rouge&quot;&gt;6.0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; are constants, and &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; are all math and assignment operations. Sometimes, when you see &lt;em&gt;syntax errors&lt;/em&gt;, they come from this first step, where the compiler can’t properly separate out a line into known components. Each of these components is called a &lt;em&gt;token&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The second step is to build up a representation of which variables are related to each other, into something called an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;&lt;em&gt;abstract syntax tree&lt;/em&gt;&lt;/a&gt; (or AST). In our previous example, this representation would show the hierarchy of how &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; is being multiplied by &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;, and how that result must be added with &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; divided by another variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;in2&lt;/code&gt;, and how that whole thing gets stored into a variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The advantage of generating this intermediate representation is having the ability to further understand how each element of code is related to each other. It is the representation that makes it easy to identify when variables haven’t been declared properly (or were misspelled), when variables are read before they are written to, or when code statements don’t actually have any effect on program execution.&lt;/p&gt;

&lt;p&gt;After generating and analyzing the AST, the compiler can finally start to generate assembly instructions. Memory locations for variables are laid out as needed, appropriate assembly functions are chosen to perform the associations described by the tree.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;exact&lt;/em&gt; specifics, of course, will vary language to language, and compiler to compiler. Digging into the specifics of how a particular version of a particular compiler is academically interesting, but actually violates the intent - the Compiler is a tool to be trusted to take your C code, and turn it into executable files. You can always deconstruction what happened if you need to, but generally you won’t need to do that!&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Still though, let’s dig into a few examples concretely of how this would play out. We’ll be doing things simply enough such that we won’t be simmulating the full compiler process, but jumping straight to assembly code.&lt;/p&gt;

&lt;h4 id=&quot;variables-and-math&quot;&gt;Variables and Math&lt;/h4&gt;

&lt;p&gt;Let’s take a super simple example. In C code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This super trivial program calculates a new value for the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;. It’s good that all the variables we’re using are declared, and the program is free of syntax errors.&lt;/p&gt;

&lt;p&gt;To get something like this in assembly code, we’ll need a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Three memory addresses to hold our three variables&lt;/li&gt;
  &lt;li&gt;A segment of code to implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; function&lt;/li&gt;
  &lt;li&gt;Assembly instructions that work from the &lt;em&gt;inside outward&lt;/em&gt; on our one line of code that does real computation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Since this is pretty straightforward, let’s just jump right in!&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input2]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Load the inner-most input&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;imul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; perform input2*5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input1]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; add input1 to that result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[output],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; move the full calculation out to the output variable&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;if-statements&quot;&gt;If Statements&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;If&lt;/code&gt; statements get a bit more complex. One basic strategy is to compute the condition on the inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt;’s, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; to go to different sections of code. Choose a flavor of &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; to match the condition. Finally, use unconditional &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt;’s to “rejoin” code after execution has completed.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similar to above, we create global variables, and produce some reasonable-looking assembly instructions:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input1]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Load the inputs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input2]&lt;/span&gt;   

    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run comparison operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; Jump to else if condition is not satisfied&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_if_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_after_if&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;imul&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_after_if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few interesting things to note here.&lt;/p&gt;

&lt;p&gt;Since we have a limited number of variables, we make the assumption that &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; will correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;input1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt; will correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;input2&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; will correspond to &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;. Before using the registers we load them from their global variables, and then move back to memory at the very end.&lt;/p&gt;

&lt;p&gt;Note that even though in C code we compare if &lt;code class=&quot;highlighter-rouge&quot;&gt;input1&lt;/code&gt; is &lt;em&gt;greater&lt;/em&gt; than &lt;code class=&quot;highlighter-rouge&quot;&gt;input2&lt;/code&gt;, in assembly we use a &lt;code class=&quot;highlighter-rouge&quot;&gt;jle&lt;/code&gt; - or &lt;em&gt;jump if less than or equal to&lt;/em&gt;. This is because we chose to check the &lt;em&gt;opposite&lt;/em&gt; of the C code condition, and jump to the &lt;em&gt;else&lt;/em&gt; statement. We also could have done the comparison more akin to the C code:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run comparison operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jg&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_if_start&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_if_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_else_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this requires two assembly instructions, so it’s a slightly larger program. Most compilers are capable of generating code both ways, and allow you to tell it “optimize for speed” or “optimize for program size”, and it will choose between options like these to best fit your needs.&lt;/p&gt;

&lt;p&gt;Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; actually acts as an input of sorts, in the body of the &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; statement. Therefor, in the assembly code, we can &lt;em&gt;delay&lt;/em&gt; loading &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; from memory until we know for sure we need it - this helps prevent unnecessary operations.&lt;/p&gt;

&lt;p&gt;Note also the lack of a &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; at the end of section &lt;code class=&quot;highlighter-rouge&quot;&gt;_else_start&lt;/code&gt;. It’s not needed, since the next operation is always the &lt;code class=&quot;highlighter-rouge&quot;&gt;_after_if&lt;/code&gt; statement. We can save a tiny bit of memory by not putting it in, as the processor will do the right thing without it naturally.&lt;/p&gt;

&lt;h4 id=&quot;for-loop&quot;&gt;For Loop&lt;/h4&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop is more or less a combination of the IF statement, with a bit of creative jumping. Take for example this simple C code:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In yet another contrived example, we take some input value (25 here), and for that many loops, add the input into some other variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;. After &lt;code class=&quot;highlighter-rouge&quot;&gt;input1&lt;/code&gt; loops, we are done. In assembly, the compiler will have to add the logic of checking “if done”, jumping &lt;em&gt;back&lt;/em&gt; in time if needed to repeat the code. The assembly code could produce something like this:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[input1]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Load the inputs. EAX will hold input1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[iter]&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;; EBX will hold our value for iter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output]&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; ECX will hold our value for output.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; Perform Loop startup code, &quot;iter=0&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_loop_check&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run comparison operation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loop_body_start&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; if iter &amp;lt; input1, run a loop&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loop_body_end&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Otherwise, we are done. Skip past the loop body to the end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_loop_body_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;; Run the loop body code. In our case, this is just &quot;output += input1&quot; &lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; Perform the loop iteration code, &quot;iter++&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_loop_check&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; Go back up to check the iteration condition&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_loop_body_end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[output],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;; Return the newly calculated values to their memory locations&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[iter],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iter&lt;/span&gt;        &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note you can see distinct instructions for all the major components of our standard &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop - the initialization, the loop condition check, the iteration logic, and of course the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop body itself.&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;It should be strongly noted that the examples here are for demonstration purposes only - they show &lt;em&gt;one&lt;/em&gt; possible way to translate &lt;em&gt;specific examples&lt;/em&gt; of higher-level language (C) into a lower level language (x86 asm). More experienced readers may observe that I’ve casually skirted concepts like local variables, the .bss segment, function calls, debugging symbols, optimization, not-always-storing-variables-in-registers, and a whole host of other compiler-related topics that are relevant if you want to write your own compiler. However, though that may be a post one day, it’s not the purpose of this post.&lt;/p&gt;

&lt;p&gt;All a reader should walk away with is a simple understanding - Higher level languages &lt;em&gt;can&lt;/em&gt; be translated to lower level languages. The syntax of each language defines the constraints on how such a translation will happen, which in turn is what drives the rules on why we write programs the way we do.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And this, sadly, is the end of our initial training. We’ve walked ourselves all the way from base physics and math principles, up through the way that boolean logic can be used to perform useful computation, and how circuits can implement that logic and store data. We’ve looked at how to assemble the circuitry into a useful architecture, which can store and execute instructions. And finally, we’ve looked at how the high level languages we are familiar with get translated into those instructions. It is indeed a lot of information, and you shoudl be proud that you have made it to this point.&lt;/p&gt;

&lt;p&gt;But, the work is not yet complete! Expect many more blog posts. We have so much more to discuss about software - both the hard technical skills, and the soft skills of working on a software development team.&lt;/p&gt;

&lt;p&gt;Stay tuned for many more. And until next time, happy coding!&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;To be honest, I am no sure yet. Maybe go get yourself some food.&lt;/p&gt;

&lt;p&gt;If you’re not hungry, go back to the home page and find another blog post!&lt;/p&gt;</content><author><name></name></author><summary type="html">“Programs must be written for people to read, and only incidentally for machines to execute.” - H. Abelson and G. Sussman (in “The Structure and Interpretation of Computer Programs”)</summary></entry><entry><title type="html">x86 Assembly Introduction</title><link href="/blog_posts/2019/08/10/x86_intro.html" rel="alternate" type="text/html" title="x86 Assembly Introduction" /><published>2019-08-10T09:30:40-05:00</published><updated>2019-08-10T09:30:40-05:00</updated><id>/blog_posts/2019/08/10/x86_intro</id><content type="html" xml:base="/blog_posts/2019/08/10/x86_intro.html">&lt;p&gt;&lt;em&gt;“It is well-known that the x86 instruction set is baroque, overcomplicated, and redundantly redundant.” - &lt;a href=&quot;https://github.com/stedolan&quot;&gt;Stephen Dolan&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In our grand arc of introductory topics, this sadly is nearing the end.&lt;/p&gt;

&lt;p&gt;We now most of the basic required components to analyze how a high-level C code program can get translated into 1’s and 0’s on a processor. One last piece of the puzzle - we’ll introduce a particular assembly language - x86 - and then show how C code constructs are implemented using the assembly language.&lt;/p&gt;

&lt;h2 id=&quot;x86&quot;&gt;x86&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;x86&lt;/em&gt; (pronounced “ecks - eighty - six”) is the name for one of the most ubiquitous processor architectures in the world today. x86 is very old, dating back to some of the initial processors that Intel manufactured. Intel has been very rigirous about keeping it backward compatible, so the full specification carries most of the legacy functionality of processors manufactured 20 to 30 years ago. This makes the full specification around 2900 pages long - not exactly light reading.&lt;/p&gt;

&lt;p&gt;When learning about x86, it’s better to start not with the actual documentation, but one of &lt;a href=&quot;https://www.cs.virginia.edu/~evans/cs216/guides/x86.html&quot;&gt;the many helpful guides&lt;/a&gt; out there. &lt;a href=&quot;https://en.wikibooks.org/wiki/X86_Assembly/X86_Architecture&quot;&gt;Here is another good one.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-basics&quot;&gt;The Basics&lt;/h3&gt;

&lt;p&gt;In order to introduce how your C code gets executed on a processor, we’re going to start by a basic overview of how programming in x86 assembly works.&lt;/p&gt;

&lt;p&gt;As a basic review, recall that when we write assembly code, there is a &lt;em&gt;one to one&lt;/em&gt; mapping from assembly instructions to bits that go into and out of the processor. Whenever we describe some particular &lt;em&gt;assembly instruction&lt;/em&gt; in this post, just remember that you can go straight from that to bits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Which bits&lt;/em&gt; is described within the &lt;a href=&quot;https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf&quot;&gt;x86 software developer’s reference manual&lt;/a&gt;. This behemoth of documentation describes, in great detail, the operation of every assembly instruction, and how to encode it into bits. Diagrams like this one explain the mapping:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/intel_inst_format.png&quot; alt=&quot;Intel instruction set bit format&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Which, as you are probably guessing, is not the most straightforward of methodologies. It’s totally feasable to figure out though, but that figuring will be left as an exerices to the user. It’s all there in that manual though, I promise.&lt;/p&gt;

&lt;p&gt;Again though, at least for the sake of this post, keep in mind that given an assembly instruction, you can get bits which go into a processor. All such that we can define what the starting layout of 1’s and 0’s in our RAM looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitMemoryLayout.png&quot; alt=&quot;Control Unit RAM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When writing assembly code, what you are really doing is defining the bits that will go into memory as the &lt;em&gt;stored program&lt;/em&gt;, eventually executed by a processor. Once you have the right set of bits, you just have to load them into memory at just the right spot, then fire up the processor. It will pick the first address, and start running your program from the beginning.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How&lt;/em&gt; these instructions are loaded into Memory will have to be a future post, as it’s beyond the scope of this discussion. For now, I promise, there &lt;em&gt;is&lt;/em&gt; a way to make it happen, and it does happen.&lt;/p&gt;

&lt;h4 id=&quot;setting-aside-memory-for-storage&quot;&gt;Setting Aside Memory for Storage&lt;/h4&gt;

&lt;p&gt;In addition to the actual instructions to run, you’ll also generally want to reserve memory locations to store values. Here’s a brief hint of where we’re going - remember variables from C syntax? Any time you have a variable, you’ll need some memory to store it. When writing x86 assembly, you can mark off a sets of bits for usage as variables:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myVariable&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myOtherVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.data&lt;/code&gt; directive tells the assembler that the things which follow are memory locations for variables, not code. The name of the variable comes first, followed by some string like &lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;DW&lt;/code&gt; to indicate &lt;em&gt;how many&lt;/em&gt; bytes the variable occupies. &lt;code class=&quot;highlighter-rouge&quot;&gt;DB&lt;/code&gt; is one byte, &lt;code class=&quot;highlighter-rouge&quot;&gt;DW&lt;/code&gt; is two, &lt;code class=&quot;highlighter-rouge&quot;&gt;DD&lt;/code&gt; is four… others exist. The final thing can be optional, and dictates what the memory is to be set to prior to any code running. In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;myVariable&lt;/code&gt; gets set to &lt;a href=&quot;https://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life,_the_Universe,_and_Everything_(42)&quot;&gt;The Answer to the Ultimate Question of Life, the Universe, and Everything&lt;/a&gt;, while &lt;code class=&quot;highlighter-rouge&quot;&gt;myOtherVariable&lt;/code&gt; gets set to 25.&lt;/p&gt;

&lt;p&gt;It’s worthwhile to note that when working with these labeled memory locations, the name (eg, &lt;code class=&quot;highlighter-rouge&quot;&gt;myVariable&lt;/code&gt;) refers to the actual memory &lt;em&gt;address&lt;/em&gt;, while putting it in brackets (eg, &lt;code class=&quot;highlighter-rouge&quot;&gt;[myVariable]&lt;/code&gt;) refers to the &lt;em&gt;value at that address&lt;/em&gt;. When working with instructions, sometimes the assembly instruction needs a memory address, and other times it needs a value. Use each form as needed.&lt;/p&gt;

&lt;p&gt;As in all programming languages worth their salt, it is also possible to write comments in your assembly code.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;;---------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Herp Derp this is where the global variables go!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Aren't comments the best?&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;;---------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myVariable&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myOtherVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;registers&quot;&gt;Registers&lt;/h4&gt;

&lt;p&gt;We’ll now attempt to describe the General Purpose registers of interest to us in x86 processor architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitRegisters.png&quot; alt=&quot;Control Unit GPRs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Accessing memory addresses can be slow, so for rapid access of heavily-manipulated values, it’s common place to use a &lt;em&gt;general purpose&lt;/em&gt; register to store the quantity. Physically located close to the center of the processor and implemented with high-speed circuitry, these registers are limited in quantity but abundant in speed and capiability. Additionally, some assembly instructions can only work with certain registers, so it’s required to populate the register first before running the restricted assembly instruction.&lt;/p&gt;

&lt;p&gt;There are a lof these on the x86 architecture, but there’s just a handful we’ll focus on for now. Their names are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EDX&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These four in particular can be used to store pretty much whatever values you want. Other registers have more restrictions, but these are the most general-purpose of all the general-purpose registers.&lt;/p&gt;

&lt;h4 id=&quot;memory-and-register-transfer&quot;&gt;Memory and Register Transfer&lt;/h4&gt;

&lt;p&gt;To do anything useful, we’ll first want to know how to assign and move data values around in the processor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitMemoryOps.png&quot; alt=&quot;Control Unit Memory Operations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; is the first assembly instruction we will cover. &lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; stands for &lt;em&gt;move&lt;/em&gt;. It’s the true workhorse of the x86 assembly language. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; It’s primary job - move values from one place to another. Fundamentally the syntax is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mov &amp;lt;dst&amp;gt; &amp;lt;src&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It can move constant values into registers or memory, move between registers, or move between registers and memory:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; sample.asm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code Starts Here&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[myVariable]&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;; Move the value at myVariable into EAX &lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;; EAX now contains 42&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;; Move the constant value 1234 into EBX&lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;; EBX now contains 1234&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EDX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;                     &lt;span class=&quot;c&quot;&gt;; Load EDX with the present value of EAX&lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;; EDX is now also 42&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[myOtherVariable],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Load the constant value 25 into &lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;;   all 32 of the bits of myOtherVariable&lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;; The memory allocated at label &lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;;   &quot;myOtherVariable&quot; now has value 25&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[myOtherVariable]&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;; Load ECX with the value from memory &lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;;   labeled &quot;myOtherVariable&quot;&lt;/span&gt;
                                     &lt;span class=&quot;c&quot;&gt;; ECX is now also 25&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myVariable&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myOtherVariable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xBEEFBEEF&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;myBeefVariable&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0BADBEEF&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note due to hardware restrictions, direct memory-to-memory moves are not allowed. You have to store in a register first.&lt;/p&gt;

&lt;p&gt;Similarly to before, &lt;code class=&quot;highlighter-rouge&quot;&gt;.text&lt;/code&gt; is a marker to indicate the things which come next are code to be executed.&lt;/p&gt;

&lt;p&gt;We’ve also introduced a special label &lt;code class=&quot;highlighter-rouge&quot;&gt;_main&lt;/code&gt; to tell the compiler exactly where our code begins. This is required for running this on Windows, so Windows knows how to place our bits into RAM such that they will be executed.&lt;/p&gt;

&lt;p&gt;Finally, the final &lt;code class=&quot;highlighter-rouge&quot;&gt;retn&lt;/code&gt; instruction is how we say our code is done. It &lt;em&gt;returns&lt;/em&gt; from the main function, which returns control to the operating system to clean up as needed and do something else. If you had no operating system, you might use &lt;code class=&quot;highlighter-rouge&quot;&gt;hlt&lt;/code&gt; to actually halt the processor.&lt;/p&gt;

&lt;p&gt;After all this, we can assemble, link, and run the code. Using a special tool (called a debugger), we inspect the results of the registers after our code is run and see the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sample_mov_asm_run_result.png&quot; alt=&quot;Code run result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected, our variables and registers got updated as promised in the comments! Our new unused variable friend &lt;code class=&quot;highlighter-rouge&quot;&gt;myBeefVariable&lt;/code&gt; remains as it was when we started.&lt;/p&gt;

&lt;h4 id=&quot;math-and-logic&quot;&gt;Math And Logic&lt;/h4&gt;

&lt;p&gt;Moving values from here to there is all well and good, but we generally also want to do math on those values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitMath.png&quot; alt=&quot;Control Unit Math&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, x86 provides a wide array of math operations for us to choose from. These include, but are not limited to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; - Adds or Subtracts two values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;imul&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;idiv&lt;/code&gt; - performs integer multiplication or division on two values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt; - performs bit-wise boolean operations on one or two values.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many more, some involving floating point numbers. While super useful they’re beyond the scope of this discussion.&lt;/p&gt;

&lt;p&gt;Usually these take two or three operands - &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;operation&amp;gt; &amp;lt;input1&amp;gt; &amp;lt;input2&amp;gt;&lt;/code&gt;. Here, &lt;em&gt;operation&lt;/em&gt; is performed on &lt;em&gt;input1&lt;/em&gt; and &lt;em&gt;input2&lt;/em&gt;, and the result gets stored back into &lt;em&gt;input1&lt;/em&gt;. This is convenient if you are keeping a running total of something, and just requires an extra &lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; if your destination is different than the inputs.&lt;/p&gt;

&lt;p&gt;For example, to add &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt; together, and store the result into &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt;, you would provide the assembly code:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Add the value in ECX (same as EAX) to EBX, storing back into ECX&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; works very similarly. As a worked example:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; sample.asm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code Starts Here&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Init our inputs with some values&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Add the value in ECX (same as EAX) to EBX, storing back into ECX&lt;/span&gt;
                  &lt;span class=&quot;c&quot;&gt;; ECX should be 10+15 = 25&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EDX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EDX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Subtract the value in EDX (same as EAX) from EBX, storing back into EDX&lt;/span&gt;
                  &lt;span class=&quot;c&quot;&gt;; EDX should be 10-15 = -5&lt;/span&gt;


    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;True to the comments, add and subtract operations put the results into &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EDX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sample_math_asm_run_result.png&quot; alt=&quot;Code run result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we can do bitwise logic operations on values. Instructions like &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt; do exactly what you’d expect, and follow very similar formatting to our math instruction friends. Yet another worked example of their operation:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; sample.asm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code Starts Here&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10101100110000111010110011000011&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Init our inputs  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00001111000011110000111100001111&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Use random-ish 32-bit values&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; Perform bitwise AND on the two values&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[andResult],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Store into the global variable for later inspection&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;; Perform bitwise OR on the two values&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[orResult],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Store into the global variable for later inspection&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;; Perform bitwise NOT on the first value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[notResult],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Store into the global variable for later inspection&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; Copy first operand into the output location&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;; Perform bitwise NOT on the two values&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[xorResult],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Store into the global variable for later inspection&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Global Variables&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;andResult&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orResult&lt;/span&gt;       &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notResult&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;xorResult&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The bitwise action performs the corresponding logic operation on the two numbers, one bit at a time, never inter-mixing the bits. Despite how painful it is to look at theses 32-bit sequences, the results are what you’d expect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sample_logic_asm_run_result.png&quot; alt=&quot;Code run result&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conditional-execution&quot;&gt;Conditional Execution&lt;/h4&gt;

&lt;p&gt;So far our code is very linear in execution - we start at the top, execute all instructions in order, and then we are done. However, to actually make decisions and be more than a glorified calculator, we need to be able to tell the processor to skip or repeat instructions. This functionality is accomplished by the paired set of operations - &lt;em&gt;compare&lt;/em&gt; and &lt;em&gt;jump&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt;, or &lt;em&gt;compare&lt;/em&gt;, is probably the easiest to understand. It takes two inputs, and compares them! In x86, the result of the comparison is stored in a very special register that is called the &lt;em&gt;EFLAGS&lt;/em&gt; register. On our diagram for processor architecture, we had a “P/N/Z” register that served the same purpose. It is just a set of bits to indicate if the previous operation resulted in overflow or underflow, a positive or negative result, a zero or non-zero result, and a number of other things.&lt;/p&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; sets the &lt;em&gt;EFLAGS&lt;/em&gt; register, we can call a &lt;em&gt;jump&lt;/em&gt; right after it to use the result.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Jump&lt;/em&gt; comes in many different flavors, but all do the same thing - they alter the value of the next-address to be decoded as an instruction. By interrupting the normal “add-one-to-instruction-register” behavior of the processor, it enables you (the user) to change the order of execution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitCompareJump.png&quot; alt=&quot;Compare and jum processor data flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The instruction &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; itself is called an &lt;em&gt;unconditional jump&lt;/em&gt; - no matter what &lt;em&gt;EFLAGS&lt;/em&gt; is set to, it will always go to the provided memory address. For example, consider the following:&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_countBeverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[numBottlesBeverageOnWall],&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; put one additional bottle of beverage on the wall&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_countBeverage&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;; do it again.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; ??? ummmmm when do we end?&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numBottlesBeverageOnWall&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;DD&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;; Zero beverage to start.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like that annoying singing brother in the car ride, this code just keeps counting the number of bottles of beverage on the wall. Maybe this is what you wanted to do - doom your machine to an eternity of counting. But, let’s say we want to do something a bit more meaningful….&lt;/p&gt;

&lt;p&gt;The other flavors of &lt;em&gt;jump&lt;/em&gt; use the value in &lt;em&gt;EFLAGS&lt;/em&gt; to &lt;em&gt;conditionally&lt;/em&gt; go to the provided memory address. If the condition is not met, the usual “add-one” behavior is kept. The most common flavors are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;je&lt;/code&gt; - Jump if Equal&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jne&lt;/code&gt; - Jump if not Equal&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jl&lt;/code&gt; - Jump if less than&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jle&lt;/code&gt; - Jump if less than or equal to&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jg&lt;/code&gt; - Jump if greater than&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jge&lt;/code&gt; - Jump if greater than or equal to&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously there’s some redundancy here, but it does let your assembly code be more intuitive to look at.&lt;/p&gt;

&lt;p&gt;To show how to use these, let’s do a bit of a contrived, but still useful, example. We’ll load numbers into &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt; and compare them. Based on the outcome of the result, we’ll set &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; - using (very convinenetly) &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0A&lt;/code&gt; for “&lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; bigger”, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0B&lt;/code&gt; for “&lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt; bigger”, and &lt;code class=&quot;highlighter-rouge&quot;&gt;0xAB&lt;/code&gt; for “&lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; equals &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt;”.&lt;/p&gt;

&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; sample.asm&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;global&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; ----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; Code Starts Here&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x25&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; Init some values for comparison&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8F&lt;/span&gt;   

    &lt;span class=&quot;k&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EBX&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;; Perform the comparison operation of EAX against EBX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jg&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_a_big&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;; if EAX was greater, go to section _a_big&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;je&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_same&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;; Otherwise, if equal, go to section _same&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_b_big&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;; Otherwise, EBX must have been bigger. &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_a_big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0A&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; since A was greater, put &quot;A&quot; into ECX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_b_big&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0B&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; since B was greater, put &quot;B&quot; into ECX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_same&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAB&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;; since they were equal, put &quot;AB&quot; into ECX&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;; We are done executing - return control to the operating system&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running this produces the expected output - since &lt;script type=&quot;math/tex&quot;&gt;5 &gt; 2&lt;/script&gt;, we expect &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0A&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt;, and that’s what we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sample_jmp_asm_run_result.png&quot; alt=&quot;Code run result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also as you’d expect - if you tweak the initial values of &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt;, you get different results in &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sample_jmp_asm_run_result_b_greater.png&quot; alt=&quot;Code run result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sample_jmp_asm_run_result_eq.png&quot; alt=&quot;Code run result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A couple things of interest in this example: Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; or its flavors do &lt;em&gt;not&lt;/em&gt; set &lt;em&gt;EFLAGS&lt;/em&gt;, so you can do a “chain” of jump instructions after one cmp instruction as above. Based off of just that one comparison, we branch off to the most-appropriate of the three subsections for manipulating &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also note that at the end of each small “chunk” where &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; is set, we have an unconditional &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; down to &lt;code class=&quot;highlighter-rouge&quot;&gt;_done&lt;/code&gt;. Remember that without &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp&lt;/code&gt; calls, assembly instructions happen one after another. The assembler doesn’t know (or care) that we divided our code up with different labels like &lt;code class=&quot;highlighter-rouge&quot;&gt;_a_big&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;_b_big&lt;/code&gt; - it just goes through instructions one after another. Without unconditional &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp _done&lt;/code&gt; instructions, we’d potentailyl be setting &lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt; multiple times, which would be incorrect.&lt;/p&gt;

&lt;p&gt;However, the astute reader may be saying “Hey, one of those isn’t actually needed!” and you’re 100% right. In &lt;code class=&quot;highlighter-rouge&quot;&gt;_same&lt;/code&gt;, the last &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp _done&lt;/code&gt; instruction is totally unnecessary from a functionality point of view.&lt;/p&gt;

&lt;p&gt;This chunk of code:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_same&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAB&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is functionally the exact same thing as:&lt;/p&gt;
&lt;div class=&quot;language-nasm highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_same&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ECX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xAB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;retn&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because jumping to the next instruction is, well, exactly what the processor does by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HOWEVER&lt;/strong&gt;. A key component of “good” code usually is &lt;em&gt;consistency&lt;/em&gt;. If you have three chunks of code that are &lt;em&gt;supposed&lt;/em&gt; to do similar things, you should make them &lt;em&gt;look&lt;/em&gt; very similar. Even if it works just fine, removing that &lt;code class=&quot;highlighter-rouge&quot;&gt;jmp _done&lt;/code&gt; line forces the next person looking at your code to stop and think “Wait, why is this one different? Is that OK? Is this actually a bug?” and then a little while later come to the same conclusion as the original author did that, no, this still works fine. But, that was just some time that was wasted. Obviously, in a small case like this, it’s pretty easy to see and prove the equivalency. But, as you write more and more (and bigger and bigger) code, making a similar determination is not nearly as trivial. Best practice is to keep similar things as similar as possible.&lt;/p&gt;

&lt;p&gt;Finally. It should be noted that lots of other instructions set the &lt;em&gt;EFLAGS&lt;/em&gt; register - most math and logic operations, actually. Always check the manual. However, you can use this to skip the &lt;code class=&quot;highlighter-rouge&quot;&gt;cmp&lt;/code&gt; instruction sometimes. Doing so will produce smaller and faster code, though sometimes at the loss of readability…. sometimes. Buyer beware.&lt;/p&gt;

&lt;h2 id=&quot;what-we-skipped&quot;&gt;What We Skipped&lt;/h2&gt;

&lt;p&gt;Ok, so this should be enough for now - we’ll be able to move on to explain the basics of how C code turns into bits. Of course, there is … a lot … more to x86 than what we’ve discussed here. The biggest thing we’ve left out is how you create chunks of code that can be called from anywhere, and return back where they came from when done (&lt;em&gt;functions&lt;/em&gt;, for the folks who know about them already). Suffice to say, x86 has specific built in hardware support for making this happen, and we’ll probably hit it in a later blog post. No matter, it won’t be critical for the immediate discussion.&lt;/p&gt;

&lt;p&gt;Similarly, there’s a whole discussion to be had as to how an x86 processor allows certain code to be “privileged” or “unprivileged”, and keeps various chunks of code isolated from each other. We’ve also completely ignored how and why the code we’re writing shows up in “.exe” files, and how said “.exe” file happens to end up with its contents on the processor. These are all inter-related topics, which hopefully we’ll touch on when we discuss how operating systems work. Again suffice to say, it won’t be required to go through now, but keep in mind that the onion still has more layers&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;With the end of this post, hopefully we’ve presented a decent introduction to the bare-bones components of x86, a real assembly language that works on real processors. We’ll use this knowledge to help deconstruct how our high level language (C code) gets converted to 1’s and 0’s on a processor, with x86 assembly as the intermediate description of the bits. &lt;a href=&quot;/blog_posts/2019/08/17/c_to_assembly.html&quot;&gt;Check out the last chapter here!&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;When I say workhorse, I really do mean it works hard, and can do a lot! Turns out, &lt;a href=&quot;https://youtu.be/R7EEoWg6Ekk?t=39&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; by itself is &lt;em&gt;Turing Complete&lt;/em&gt;&lt;/a&gt;. That’s right, you could build a computer that only know how to do &lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt;, or limit yourself to only using &lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt;, and still be able to &lt;em&gt;compute anything you want to&lt;/em&gt;. And even more so, &lt;a href=&quot;https://github.com/xoreaxeaxeax/movfuscator&quot;&gt;&lt;em&gt;someone did it&lt;/em&gt;&lt;/a&gt;. Seriously, this is one of my favorite exercises in all of computer science, just for its simultaneous absurdity and technical prowess. The video is long, but actually worthwhile, and totally approachable to someone who has kept pace with this blog thus far! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">“It is well-known that the x86 instruction set is baroque, overcomplicated, and redundantly redundant.” - Stephen Dolan</summary></entry><entry><title type="html">Programming Language - C Syntax</title><link href="/blog_posts/2019/07/28/programming_language_c_syntax.html" rel="alternate" type="text/html" title="Programming Language - C Syntax" /><published>2019-07-28T09:31:00-05:00</published><updated>2019-07-28T09:31:00-05:00</updated><id>/blog_posts/2019/07/28/programming_language_c_syntax</id><content type="html" xml:base="/blog_posts/2019/07/28/programming_language_c_syntax.html">&lt;p&gt;&lt;em&gt;C is quirky, flawed, and an enormous success. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;Dennis Ritchie, co-creator of the C programming language&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this post, we’ll explain the basics of the C programming language syntax, showing how it accomplishes the major goals of any high-level programming language.&lt;/p&gt;

&lt;h2 id=&quot;the-c-like-syntax&quot;&gt;The “C-like” Syntax&lt;/h2&gt;

&lt;p&gt;Though we’re about to describe software syntax for the C programming language, the implications of these facts and examples are much broader.&lt;/p&gt;

&lt;p&gt;Many of the concepts C introduced in how a high-level language is to specify program behavior were inherited into other programming languages. For this reason, many languages are said to have “C-like syntax”, meaning that the fundamental way you specify behavior follows lots of the same design patterns laid out by C. The lion’s share of commonly used programming languages follow these patterns, so it seems to be a good place to start!&lt;/p&gt;

&lt;p&gt;For most of the readers of this blog, I’m assuming you have some casual familiarity with how to write software. But even if not, don’t worry - we’re going to go through the basics, again using a ground-up format to explain how computer programs are put together.&lt;/p&gt;

&lt;h3 id=&quot;storage-of-source-code&quot;&gt;Storage of Source Code&lt;/h3&gt;

&lt;p&gt;C code source files are just plain-text, ASCII or utf-encoded &lt;a href=&quot;https://en.wikipedia.org/wiki/Text_file&quot;&gt;text files&lt;/a&gt;, which just happen to have extensions like &lt;code class=&quot;highlighter-rouge&quot;&gt;.c&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.h&lt;/code&gt;. They can be opened and edited by any text editor: &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;, &lt;a href=&quot;https://notepad-plus-plus.org/&quot;&gt;Notepad++&lt;/a&gt;, &lt;a href=&quot;https://www.vim.org/&quot;&gt;VIM&lt;/a&gt;, &lt;a href=&quot;https://www.gnu.org/software/emacs/&quot;&gt;Emacs&lt;/a&gt;, even the built-in Windows Notepad (not recommended).&lt;/p&gt;

&lt;p&gt;A word to the wise - choose a good text editor which knows about C code syntax, so it can properly &lt;a href=&quot;https://en.wikipedia.org/wiki/Syntax_highlighting&quot;&gt;highlight different parts of each line&lt;/a&gt;. These visual cues are invaluable as a software developer to visualize the behavior of your code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/syntaxHighlighting.png&quot; alt=&quot;Syntax Highlighting&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;c-code-statements--their-components&quot;&gt;C Code Statements &amp;amp; Their Components&lt;/h3&gt;

&lt;p&gt;Programs are fundamentally built up of a series individual statements. Each statement may contain directions to perform one or more of the common abilities of programming languages.&lt;/p&gt;

&lt;p&gt;Every statement has some content, and is terminated by a semicolon (&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;). It’s just like putting a period at the end of your sentences. We use semicolons instead of periods because some numbers have periods inside them (ex: &lt;code class=&quot;highlighter-rouge&quot;&gt;3.14159&lt;/code&gt;), and using a unique symbol for unique meaning is easier than having to use the context around the symbol to determine meaning.&lt;/p&gt;

&lt;p&gt;Here is an example of a simple statement:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;result = 3 + 5.7 * input;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will use this for reference as we go forward in the next few sections.&lt;/p&gt;

&lt;h4 id=&quot;constants&quot;&gt;Constants&lt;/h4&gt;

&lt;p&gt;C syntax allows software writers to use numbers in statements. THese numbers can be simple integers, like &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; in the sample statement. They can also be fractional or &lt;em&gt;floating point&lt;/em&gt; numbers, such &lt;code class=&quot;highlighter-rouge&quot;&gt;5.7&lt;/code&gt; in the sample statement.&lt;/p&gt;

&lt;p&gt;A single negative sign (&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;) in front of a number will of course make it negative - &lt;code class=&quot;highlighter-rouge&quot;&gt;-26&lt;/code&gt; is an allowed constant, equal to negative twenty six.&lt;/p&gt;

&lt;h4 id=&quot;variables&quot;&gt;Variables&lt;/h4&gt;

&lt;p&gt;C syntax also allows you to define names for memory locations. By using the name in a statement, the contents of that memory location will be used. Since a memory location can generally hold a range of numbers, these named memory locations act just like the variables in algebra. Therefor, we call them &lt;em&gt;variables&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the statement above, &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; are both variables.&lt;/p&gt;

&lt;p&gt;Note that C does not allow variables to simply come into existence and disappear at runtime - each variable that is required must be &lt;em&gt;declared&lt;/em&gt; prior to usage. The precise manner in how you declare the variable will dictate how many bits are used to store values, whether the value is read/write or read-only, which portions of code are allowed to access the variable, and a whole slew of other properties.&lt;/p&gt;

&lt;p&gt;Built into the C programming language are a few basic variable types:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; is the basic integer storage. It is interpreted as a 2’s compliment signed integer.
&lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;short&lt;/code&gt; both store integers as well, but take up fewer bits than &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; (and therefore have a more restricted range).
&lt;code class=&quot;highlighter-rouge&quot;&gt;long&lt;/code&gt; will also be an integer, but take more bits than &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt; (and therefore have a wider range`).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt; is usually treated as unsigned by default. Any type can get the qualifier &lt;code class=&quot;highlighter-rouge&quot;&gt;unsigned&lt;/code&gt; put in front of it to force it to be unsigned.&lt;/p&gt;

&lt;p&gt;The exact number of bits for each of these is not fixed - it depends on what type of processor you are on. This is incredibly horrible when attempting to write code that works the same on multiple machines, so other types like &lt;code class=&quot;highlighter-rouge&quot;&gt;int8_t&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;int16_t&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;int32_t&lt;/code&gt; are actually better to use - these explicitly specify the bit width.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;float&lt;/code&gt; are both floating point representations, allowing you to store decimal values.&lt;/p&gt;

&lt;p&gt;A number of other types are built in, and the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt; even allows you to define your own!&lt;/p&gt;

&lt;h4 id=&quot;assignment&quot;&gt;Assignment&lt;/h4&gt;

&lt;p&gt;Once we have variables, we have to have a way to get information into them. In C code statements, the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; equals sign character is used to perform an assignment operation. Assignment takes whatever is on the right-hand side of the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;, and places it into the variable on the left-hand side.&lt;/p&gt;

&lt;p&gt;It’s roughly equivalent to a “store” operation, rather than an expression of equality (more on that later). Think of it as memory movement - you do some calculation to get a number. Then, the equals sign indicates the calculation’s result needs to be stored somewhere. The variable on the left hand side provides the memory address where the value is to be stored at.&lt;/p&gt;

&lt;p&gt;In the sample statement above, the value calculated on the right-hand side of the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; is being stored into the variable named &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; - and by this, we really mean the value is being put into the RAM memory bits associated with the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, combining our knowledge of Variables and Assignment:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;534&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;574029&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Will do weird stuff.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;67&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Will also do weird stuff.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;operators&quot;&gt;Operators&lt;/h4&gt;

&lt;p&gt;On the right-hand side of any &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; sign is a set of operations which perform the actual calculation of interest. C syntax reserves a set of characters for performing this calculation. There are a few broad categories of Operators.&lt;/p&gt;

&lt;h5 id=&quot;combining-numbers-with-math&quot;&gt;Combining Numbers with Math&lt;/h5&gt;

&lt;p&gt;Some common math functions are implemented:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; adds the thing on the left and on the right of the symbol together&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; multiplies the thing on the left and on the right of the symbol together&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; subtracts the thing on right from the thing on the left of the symbol&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; divides the thing on the left by the thing on the right of the symbol&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the example above, the statement says to first multiply the value stored in the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;5.7&lt;/code&gt;, then add &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; to the value. Finally, as already mentioned, that calculated value gets stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Normal order of operations does apply here (mult/div, then add/subtract). Parenthesis &lt;code class=&quot;highlighter-rouge&quot;&gt;( )&lt;/code&gt; can be used to group operations if a different operation order is required.&lt;/p&gt;

&lt;p&gt;For example, the statement &lt;code class=&quot;highlighter-rouge&quot;&gt;result = (3 + 5.7) * input;&lt;/code&gt; simply multiplies &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;8.7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are some “specialty” math functions that C also defines. These aren’t strictly necessary, but provide useful shortcuts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variable++&lt;/code&gt; will &lt;em&gt;change&lt;/em&gt; the value stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt; by adding 1 to it. This is called “incrementing” the variable.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variable--&lt;/code&gt; will &lt;em&gt;change&lt;/em&gt; the value stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt; by subtracting 1 from it. This is called “decrementing” the   variable.
    &lt;ul&gt;
      &lt;li&gt;Note &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; operators perform an &lt;em&gt;assignment&lt;/em&gt; without an explicit &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;. This is different than other math operators.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; symbol is called the &lt;em&gt;modulo&lt;/em&gt; operator - it calculates the remainder after division.
    &lt;ul&gt;
      &lt;li&gt;For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;7 % 5&lt;/code&gt; equals to 2 (since 7 divided by 5 is 1, remainder 2).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;combining-bits-with-boolean-logic&quot;&gt;Combining Bits with Boolean Logic&lt;/h5&gt;

&lt;p&gt;C syntax also allows you to perform the basic boolean operations &lt;a href=&quot;/blog_posts/2019/06/14/boolean_logic.html&quot;&gt;we described earlier&lt;/a&gt;. Just like regular math, special symbols are reserved to indicate the operation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; performs the AND operation between two values&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; performs the OR operation between  two values
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; is the symbol on the key right below backspace, accessed when you hit shift.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; performs the NOT operation on a single value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these are called the “Logical” operators, since they treat their numbers like a single boolean value. The reason we say “treat” is because C doesn’t have a dedicated “boolean” type - the best we can do is just use one byte (named &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;, as we will see later). Given these bite-sized variables, the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; is treated as FALSE, while any other value is TRUE. As it turns out, these are the more commonly used set of boolean operators.&lt;/p&gt;

&lt;p&gt;Lesser used, but worth a mention, are the &lt;em&gt;bitwise&lt;/em&gt; operators - they do the same boolean operation, but work bit-by-bit on the number. For example, the bitwise-NOT of &lt;code class=&quot;highlighter-rouge&quot;&gt;0b1100&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;0b0011&lt;/code&gt; (note how each bit is flipped to the opposite value). Similarly, the bitwise-OR of &lt;code class=&quot;highlighter-rouge&quot;&gt;0b1100&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0b0101&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;0b1101&lt;/code&gt; (each bit in the first number OR’ed with the corresponding bit in the second number).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; performs the bitwise AND operation between two numbers&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; performs the bitwise OR operation between two numbers&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; performs the bitwise NOT on a number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See examples of the usage of these things later on. The key for now - these operators provide ways of combining boolean values to create new boolean values.&lt;/p&gt;

&lt;h5 id=&quot;creating-boolean-values-from-numbers-with-comparison&quot;&gt;Creating Boolean values from Numbers with Comparison&lt;/h5&gt;

&lt;p&gt;Just like in math that you’ve probably done in high school, there are a set of operators that will do comparison between two integer numbers to create boolean values. These operators do almost exactly what you would expect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt; check if one number is greater than (or equal to) another number.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; check if one number is less than (or equal to) another number.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; will check if two numbers are exactly equal&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt; will check if two numbers are not equal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note this distinction between the action of &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;, it’s a very common thing that gets lots of new software developers. &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; performs &lt;em&gt;assignment&lt;/em&gt; - it takes one number and stores it into a memory address. &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; performs &lt;em&gt;comparison&lt;/em&gt; - it checks whether two numbers are equal or not, creating a boolean from the result.&lt;/p&gt;

&lt;h4 id=&quot;comments&quot;&gt;Comments&lt;/h4&gt;

&lt;p&gt;Some special statements are called &lt;em&gt;comments&lt;/em&gt;. These are wrapped in special characters that tell the compiler to completely ignore the statement. The statement is only there to help human beings.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;// Some comments begin with two slashes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/* Others are between slash and star sequences */&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Put comments wherever you want to remember (or tell the next developer) what your code is doing. Use comments to describe the “why”, and not the “what”.&lt;/p&gt;

&lt;h3 id=&quot;grouping&quot;&gt;Grouping&lt;/h3&gt;

&lt;p&gt;A flat list of instructions is just fine for a computer, but generally humans like to visually organize their code a bit more. Therefor, in most programming languages, &lt;em&gt;statements&lt;/em&gt; are grouped together into clumps called &lt;em&gt;blocks&lt;/em&gt; based on the functionality that is desired.&lt;/p&gt;

&lt;h4 id=&quot;blocks&quot;&gt;Blocks&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;block&lt;/em&gt; of code is simply a logical subset of statements which form one cohesive action, and are meant to be run together. &lt;em&gt;Which&lt;/em&gt; statements belong together and &lt;em&gt;why&lt;/em&gt; will be discussed in due time, but for now consider just that statements will be grouped into units called &lt;em&gt;blocks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;C code uses the symbols &lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt; to mark the start and end of each block. By convention, the contents of the block are indented with whitespace by some amount (the author is a &lt;a href=&quot;https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/&quot;&gt;strong advocate for 4 spaces&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This is the start of a block&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Here is some code&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00001111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// This is the end of a block of code.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that multiple blocks can be nested together:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// start of outer block&lt;/span&gt;
  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Inner block 1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Inner block 2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
    &lt;span class=&quot;c1&quot;&gt;// end of outer block&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Blocks are used to group pieces of code together to defining when certain parts of logic should be executed or skipped based on conditions (&lt;em&gt;conditional flow&lt;/em&gt;), or for doing a chunk of code multiple times (&lt;em&gt;Releating Flow&lt;/em&gt;).&lt;/p&gt;

&lt;h4 id=&quot;grouping-for-conditional-flow&quot;&gt;Grouping for Conditional Flow&lt;/h4&gt;

&lt;p&gt;In C, you can use a set of statement as a prefix to a block, to define conditions on which the block should be run. The prefix statement must use some value or quantity that resolve to a boolean. Then, when the boolean is True, the block is executed. Otherwise, the block is skipped.&lt;/p&gt;

&lt;p&gt;The basic syntax for the prefix is &lt;code class=&quot;highlighter-rouge&quot;&gt;if(&amp;lt;condition&amp;gt;) { &amp;lt;code to execute&amp;gt; }&lt;/code&gt;. For a more concrete example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be run.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Now this code will be skipped.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C also provides a few other tools for making more complex combinations of these if- blocks. The &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; statement is the alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; - when &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;’s condition is false, then the code for &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; is run instead. Concretely:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be run.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be skipped.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Now this code will be skipped.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and this code will be run.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is one more construct, which allows you to stack many if statements together, if the conditions should be mutually exclusive (zero or one are true), or a priority is needed (if multiple conditions are true, only one is acted on).&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be run.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be skipped, since we &quot;hit&quot; the condition1 statement first.  &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be skipped.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be skipped&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be run&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code will be skipped.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we go forward we will see more and more practical examples of this usage, so don’t worry too much about understanding the nuance and memorizing it now. Just keep in mind that there is a construct that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; to control if certain pieces of code get executed or not!&lt;/p&gt;

&lt;h4 id=&quot;grouping-for-repeating-flow&quot;&gt;Grouping for Repeating Flow&lt;/h4&gt;

&lt;p&gt;The other common usage for grouping blocks of statements is for when you want to have a chunk of code repeat many times over and over. Admittedly this is less common for robots, but still happens. As a simple example, say you had 20 numbers you wanted to print to the screen - using loops, you can use the same print code many times, minimizing the amount of copy/paste or rewrite work you have to do.&lt;/p&gt;

&lt;p&gt;A block of code which is run many times over and over is called a &lt;em&gt;loop&lt;/em&gt;. There are two main types of loops available in C.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;while&lt;/em&gt; loop repeats a chunk of code so long as a condition is TRUE. The syntax used in C is &lt;code class=&quot;highlighter-rouge&quot;&gt;while(&amp;lt;condition&amp;gt;) { &amp;lt;code to repeat&amp;gt; }&lt;/code&gt;. In a more concrete example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//Code to repeat&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you trace the code execution, you should see that the code on the inside of the while loop runs until our counter is 10 or larger. THe counter starts at 0, and gets incremented every loop until we exit.&lt;/p&gt;

&lt;p&gt;The condition of &lt;code class=&quot;highlighter-rouge&quot;&gt;counter &amp;gt;= 10&lt;/code&gt; is referred to as the &lt;em&gt;terminal condition&lt;/em&gt; of the loop - it’s the condition which triggers the loop to stop running, and allows execution to continue past the final &lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt; of the block.&lt;/p&gt;

&lt;p&gt;Now, of course, &lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt; doesn’t have to be tied to a fixed number of loops - it could be some event on the robot (like receiving a packet over ethernet) or user interaction (driver pushes a button), for example. But for when you are looking to run for a set number of loops, there is a syntax which allows expressing it more concisely.&lt;/p&gt;

&lt;p&gt;Enter the &lt;em&gt;for&lt;/em&gt; loop in C. It looks way more complex than it actually is. For loops are used when you know the exact number of times you want to iterate, rather than simply &lt;em&gt;wait&lt;/em&gt; for some external event (for an unknown duration).&lt;/p&gt;

&lt;p&gt;Just like &lt;em&gt;while&lt;/em&gt; loops, &lt;em&gt;for&lt;/em&gt; loops cause a block of code to get executed many times. The prefix to that block has extra syntax to provide a concise way of describing how long you will loop for.&lt;/p&gt;

&lt;p&gt;This syntax is &lt;code class=&quot;highlighter-rouge&quot;&gt;for(&amp;lt;init action&amp;gt;; &amp;lt;loop condition&amp;gt;; &amp;lt;loop action&amp;gt;){ &amp;lt;Code to be executed&amp;gt; }&lt;/code&gt;. THe Init action is simply a statement to be done right before starting the loop, and the loop action is a statement to be run at the end of the loop.&lt;/p&gt;

&lt;p&gt;99% of the time, &lt;em&gt;for&lt;/em&gt; loops will be written something like this:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code runs 10 times&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The sequence of steps that is summarized all in that one line:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Before running anything inside the loop, &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt; is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Every loop, before doing the contents of loop, we check if the condition &lt;code class=&quot;highlighter-rouge&quot;&gt;idx &amp;lt; 10&lt;/code&gt; evaluates to TRUE. This happens for the first 10 loops, but not for any subsequent one.&lt;/li&gt;
  &lt;li&gt;After running the contents of the loop, we perform the action &lt;code class=&quot;highlighter-rouge&quot;&gt;idx++&lt;/code&gt;, which keeps idx up to date with the number of times we have completed the loop action.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In C, the &lt;em&gt;for&lt;/em&gt; loop is pure syntactical candy. There’s no reason you can’t do the exact same thing with a while loop:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This code runs 10 times&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, that takes two extra lines. Since this pattern is very common, the C language built in the &lt;em&gt;for&lt;/em&gt; loop shortcut.&lt;/p&gt;

&lt;p&gt;We’ll get into more of the nuances of how to make the choice between &lt;em&gt;for&lt;/em&gt; and &lt;em&gt;while&lt;/em&gt; in future posts.&lt;/p&gt;

&lt;h4 id=&quot;grouping-for-reusability&quot;&gt;Grouping for Reusability&lt;/h4&gt;

&lt;p&gt;Another major usage of blocks of instructions is to create reusable chunks of code which perform a specific subset of functionality. In C code, we refer to such blocks of code as &lt;em&gt;functions&lt;/em&gt;. A function is simply a block of code with a specific prefix to create the name of the function, specify what inputs it has (the &lt;em&gt;arguments&lt;/em&gt;), and define the type of output (the &lt;em&gt;return value&lt;/em&gt;) it has.&lt;/p&gt;

&lt;p&gt;Generally, the syntax for creating a function is:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;return type&amp;gt; &amp;lt;function name&amp;gt;(&amp;lt;arguments&amp;gt;){ &amp;lt;contents of function&amp;gt;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Functions should generally perform one monolithic task, and one task alone.&lt;/p&gt;

&lt;p&gt;For example, let’s create a function with calculates the square of some input number, but preserves the sign of the number. This is a common operation done while conditioning joystick inputs from a driver - it gives them less sensitivity near the center for precise slow motions.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squareSigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In painstaking detail, here’s what the handful of lines of code actually mean:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The function is first declared. &lt;code class=&quot;highlighter-rouge&quot;&gt;double squareSigned&lt;/code&gt; says “There is a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned&lt;/code&gt; which returns a value of type &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned(double in){&lt;/code&gt; says “Function &lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned&lt;/code&gt; takes one argument named &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;, which must be of type &lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whenever &lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned&lt;/code&gt; is run, the first step is to set aside some memory to keep track of the result while we’re performing the operation. We’ll refer to that memory with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;, treating it as a double floating point value.&lt;/li&gt;
  &lt;li&gt;The first real step calculation is to multiply &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; by itself, and store that into &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;After we have the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;in * in&lt;/code&gt; stored into &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;, we now need to re-apply the sign of &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; (since squaring it always produces a positive value).&lt;/li&gt;
  &lt;li&gt;We calculate whether in was negative or not by comparing it to zero with the statement &lt;code class=&quot;highlighter-rouge&quot;&gt;in &amp;lt; 0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt; was in fact negative, we also need to make &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; negative. To accomplish this, we use the &lt;em&gt;if&lt;/em&gt; statement to conditionally run our negating logic.&lt;/li&gt;
  &lt;li&gt;Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;if(){&lt;/code&gt; block, multiply &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; by negative one, and store it back into result. This means that &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; will now have the same sign as &lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Finally, we specify that the value in &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; is to be the return value of the function. With the statement &lt;code class=&quot;highlighter-rouge&quot;&gt;return result;&lt;/code&gt;, we return execution control to whatever chunk of code called this function in the first place, returning the value from &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; at the same time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, keep in mind this is just one basic, contrived example, targeted at the first-time learner. We’ll get more into the “when” and “why” of function usage in later posts, but for now, just remember that such a tool for reusing functionality is available in any programming language worth its salt.&lt;/p&gt;

&lt;h2 id=&quot;miscellaneous-code-examples&quot;&gt;Miscellaneous Code Examples&lt;/h2&gt;

&lt;h3 id=&quot;boolean-values&quot;&gt;Boolean Values&lt;/h3&gt;

&lt;p&gt;A very common use-case of the bitwise operators is forcing a single bit to 1 or to 0 in a number. For example:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//Force the least-significant bit of value to 0, but leave the rest untouched.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111110&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//Force the least-significant bit of value to 1, but leave the rest untouched.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b00000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another usecase is to check if a particular bit is 1 or 0:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Check if the most-significant bit is set to 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bit_is_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bit_is_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// bit was 1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// bit was 0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the constant &lt;code class=&quot;highlighter-rouge&quot;&gt;0b10000000&lt;/code&gt; is referred to as the “bitmask” since it masks off all bits except the first one (aka forces the to 0). This way, if the top bit is zero, &lt;code class=&quot;highlighter-rouge&quot;&gt;bit_is_set&lt;/code&gt; will be non-zero, and can be used in the &lt;code class=&quot;highlighter-rouge&quot;&gt;if()&lt;/code&gt; statement to change the action of the program.&lt;/p&gt;

&lt;h3 id=&quot;using-functions&quot;&gt;Using Functions&lt;/h3&gt;

&lt;p&gt;Consider the &lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned()&lt;/code&gt; function we looked at earlier. Back in main robot code, this would get used in a fashion something like this:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;motValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;joyValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDriverXJoystick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;motValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squareSigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setLeftDriveMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setRightDriveMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;motValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this highly contrived example, we declare two variables to store the value of the joystick, and the value we want to power the motors at. We’ll assume that functions named &lt;code class=&quot;highlighter-rouge&quot;&gt;getDriverXJoystick()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setLeftDriveMotor()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;setRightDriveMotor()&lt;/code&gt; exist and have been provided to us for interaction with the physical hardware. Our job is just to hook up one piece of hardware to another.&lt;/p&gt;

&lt;p&gt;Since this isn’t the only joystick on the robot, we’ll use our common &lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned()&lt;/code&gt; function to perform the desired mapping from a joystick reading to a motor command.&lt;/p&gt;

&lt;p&gt;In this example, we first populate our &lt;code class=&quot;highlighter-rouge&quot;&gt;joyValue&lt;/code&gt; with some value read in from the joysticks.&lt;/p&gt;

&lt;p&gt;We then pass that value into our function &lt;code class=&quot;highlighter-rouge&quot;&gt;squareSigned()&lt;/code&gt;, which transfers control of the program to that function. When the function is done with its transformation, its &lt;em&gt;return value&lt;/em&gt; is stored into our variable &lt;code class=&quot;highlighter-rouge&quot;&gt;motValue&lt;/code&gt;. We can then use &lt;code class=&quot;highlighter-rouge&quot;&gt;motValue&lt;/code&gt; as the command to send to both motors.&lt;/p&gt;

&lt;p&gt;Note that for these examples, we’ve chosen some very obvious names for our variables. Clearly, to any reasonably astute observer, &lt;code class=&quot;highlighter-rouge&quot;&gt;joyValue&lt;/code&gt; would tend to imply something along the lines of “value from a joystick”, and &lt;code class=&quot;highlighter-rouge&quot;&gt;motValue&lt;/code&gt; would imply “value for a motor”. This is intentional - choose meaningful names so its easier for you to remember exactly what each variable is for, when you come back and look at the code in 5 weeks and have no idea what it was doing.&lt;/p&gt;

&lt;p&gt;Of course, the compiler is not a human, and doesn’t know that the string of characters &lt;code class=&quot;highlighter-rouge&quot;&gt;joyValue&lt;/code&gt; has any real relationship to a joystick. No matter how good of names you choose for your variables, the compiler will still always expect you to populate them with meaningful values yourself - ie, call &lt;code class=&quot;highlighter-rouge&quot;&gt;getDriverXJoystick()&lt;/code&gt; and assign it into &lt;code class=&quot;highlighter-rouge&quot;&gt;joyValue&lt;/code&gt;. The above code could be written as:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;woodieFlowers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deanKamen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;woodieFlowers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDriverXJoystick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;deanKamen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squareSigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;woodieFlowers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setLeftDriveMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deanKamen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setRightDriveMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deanKamen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it would work the exact same way. The only difference is you’ll be hating yourself in three days when you have no recollection what a &lt;code class=&quot;highlighter-rouge&quot;&gt;woodieFlowers&lt;/code&gt; is for.&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;We’re nearing the end of the story-arc for our introductory content! Next up, we’ll start exploring how these basic C constructs are accomplished on a real processor. This will be the last major building block in understanding, at a high level, how lines of code actually perform their action under the hood. &lt;a href=&quot;/blog_posts/2019/08/10/x86_intro.html&quot;&gt;To get started, check out our introduction to the x86 assembly language!&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">C is quirky, flawed, and an enormous success. - Dennis Ritchie, co-creator of the C programming language.</summary></entry><entry><title type="html">Programming Languages - Introduction</title><link href="/blog_posts/2019/07/28/programming_language_intro.html" rel="alternate" type="text/html" title="Programming Languages - Introduction" /><published>2019-07-28T09:30:00-05:00</published><updated>2019-07-28T09:30:00-05:00</updated><id>/blog_posts/2019/07/28/programming_language_intro</id><content type="html" xml:base="/blog_posts/2019/07/28/programming_language_intro.html">&lt;p&gt;&lt;em&gt;Let us change our traditional attitude to the construction of programs. Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.  - &lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post marks our first “pure” venture into the world of software. As a start, we’ll level-set everyone on the programming language syntax we’ll need to all understand to move forward. This is a bit of an “aside” from our normal progression, but required to move forward effectively.&lt;/p&gt;

&lt;h3 id=&quot;on-our-selection-of-introductory-languages&quot;&gt;On our Selection of Introductory Languages&lt;/h3&gt;

&lt;h4 id=&quot;the-options&quot;&gt;The Options&lt;/h4&gt;

&lt;p&gt;In FRC land, there are a handful of different programming languages that are commonly supported. Labview is in its own special class. Aside from this, the big players are Java and C++, followed by Python and Kotlin. These are all powerful, professional, and (relatively) modern programming languages, each rich with its own features and quirks. For &lt;em&gt;FRC&lt;/em&gt; purposes, any of them make a fine choice for writing robot software.&lt;/p&gt;

&lt;p&gt;It should be noted that &lt;a href=&quot;https://www.chiefdelphi.com/t/c-or-java/358070&quot;&gt;people have opinions&lt;/a&gt; on the selection of programming languages.&lt;/p&gt;

&lt;h4 id=&quot;the-choice&quot;&gt;The Choice&lt;/h4&gt;

&lt;p&gt;In order to do the ground-up approach properly, we’re going to not start with any of these languages, but rather with pure C. This will simplify the connection between how bits are manipulated on a processor, and the actual code we write.  Additionally, once you understand the concepts of how C is put together, it becomes easy to see how the additional features provided by C++, Kotlin, Java, or Python could be implemented in C.&lt;/p&gt;

&lt;p&gt;In this way, by focusing on an understanding of how C code works on a processor, we provide a pathway for understanding how &lt;em&gt;any&lt;/em&gt; programming language works on a processor.&lt;/p&gt;

&lt;h3 id=&quot;high-level-vs-low-level&quot;&gt;High Level vs. Low Level&lt;/h3&gt;

&lt;p&gt;When describing programming languages, we’ve already used the description &lt;em&gt;high level&lt;/em&gt;. As you’d probably expect, &lt;em&gt;low level&lt;/em&gt; is also a description. Loosely, these terms describe “how close to the actual silicon of the processor are you?”. Closeness here refers to the number of layers of abstraction formally defined between the thing you are typing out on a keyboard, and the logic gates doing useful things in response to your typing.&lt;/p&gt;

&lt;p&gt;The literal 1’s and 0’s going through your processor is probably the lowest level way to write a program. The people who truly believe this is the best way to write software are either dead, or literally crazy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/supercoder2000.jpg&quot; alt=&quot;expert keyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;source - reddit.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Just barely one step up, we can represent these 1’s and 0’s with much more useful pneumonics, like ADD (addition), SUB (subtract), MOV (move), LD (load), ST (store), etc. Rather than forcing a human to remember that &lt;script type=&quot;math/tex&quot;&gt;0010001010011&lt;/script&gt; means “Add general purpose register 1 to general purpose register 2 and store the result in general purpose register 3”, we simply by writing something like &lt;strong&gt;ADD R1 R2 R3&lt;/strong&gt;. Isn’t that better than staring at &lt;script type=&quot;math/tex&quot;&gt;0010001010011&lt;/script&gt;? I think so. This abstraction to pneumonics is called &lt;em&gt;assembly code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Depending on the application, it still makes sense to write code at this level. When you need very fast code, very efficient code, or very very precise code for working with specialized hardware, assembly is your go-to solution. And, if you know the hardware well, it’s admittedly not bad. Chris Sawyer wrote multiple video games using it &lt;a href=&quot;https://en.wikipedia.org/wiki/RollerCoaster_Tycoon_(video_game)&quot;&gt;nearly&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/RollerCoaster_Tycoon_2&quot;&gt;exclusively&lt;/a&gt;. People who like writing software here are still a special breed of folks, but not as crazy as the ones who have the ink on their 1 and 0 keys rubbed off from excessive usage.&lt;/p&gt;

&lt;p&gt;For the rest of us folks, we usually use some sort of &lt;em&gt;high level&lt;/em&gt; programming language. The official definition of a &lt;em&gt;High Level&lt;/em&gt; programming language is simply one that attempts to abstract away the details of &lt;em&gt;exactly&lt;/em&gt; which assembly instructions are supported or needed, and hide them behind a more generalized way of describing desired behavior. The key advantage of doing this is that you can write one program, and rely on different compiler tools to take that same source code, and emit assembly instructions which can work on many different types of computers. This interoperability is a key driver in lots of the design of high level languages, but comes at a cost - it is harder to interact with specific details of the hardware you are on, and inherently less efficient to execute code.&lt;/p&gt;

&lt;p&gt;It should be noted that you can always add more layers of abstraction. A language doesn’t have to transform into assembly code - you can transfom between high level languages too. For example, MathWorks’ &lt;em&gt;Simulink&lt;/em&gt; is a graphical programming language, much like Labview, which can &lt;a href=&quot;https://www.mathworks.com/help/dsp/ug/generate-c-code-from-simulink-model.html&quot;&gt;have its block diagrams converted directly to C code&lt;/a&gt;. In this way, you can say Simulink is a higher-level programming language than C.&lt;/p&gt;

&lt;p&gt;For specific use cases, there are other programming languages which can build into Simulink models.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/pyQV6sy5qOALu/giphy.gif&quot; alt=&quot;ogres are like onions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The layers just keep going.&lt;/p&gt;

&lt;p&gt;This is why large software projects often have to combine many programming languages together. Your ultimate goal is simply to describe to the computer what you want it to do. You always want your software development to take place at the highest-level that makes sense - this allows you to have to spend the least amount of time thinking about details that, at the end of the day, an automated tool could have done for you. Only get into the nitty-gritty when you have to. But when duty calls, don’t be afraid to dive deep.&lt;/p&gt;

&lt;h2 id=&quot;the-c-programming-language&quot;&gt;The C Programming Language&lt;/h2&gt;

&lt;h3 id=&quot;super-basics---what-does-a-programming-language-have-to-accomplish&quot;&gt;Super Basics - What does a Programming Language have to Accomplish?&lt;/h3&gt;

&lt;p&gt;Any programming language’s job is to bridge the worlds of human-readable description of behavior, to a machine-readable set of 1’s and 0’s that can flow through a processor. The &lt;em&gt;compiler&lt;/em&gt; is the tool that actually does the action, and the language’s &lt;em&gt;syntax&lt;/em&gt; is the set of rules on the compiler input to allow the action to work.&lt;/p&gt;

&lt;p&gt;Remember the compiler itself is a program, and can’t think creatively (or read your mind). The language &lt;em&gt;syntax&lt;/em&gt; is the agreed-upon rules that you will use to communicate information with the compiler.&lt;/p&gt;

&lt;p&gt;The syntax must be flexible enough to be Turing Complete, but constrained enough to not force the human to think about too many details.&lt;/p&gt;

&lt;p&gt;Good syntax design allows the programming language to describe all the calculations and logic required to establish a &lt;em&gt;relationship&lt;/em&gt; between &lt;em&gt;inputs&lt;/em&gt; and &lt;em&gt;outputs&lt;/em&gt;. At the end of the day, that’s really all your software on your robot has to do - map driver inputs, sensor inputs, and field state (teleop/auto) to motor and solenoid commands.&lt;/p&gt;

&lt;h4 id=&quot;abilities-common-to-all-programming-languages&quot;&gt;Abilities Common to all Programming Languages&lt;/h4&gt;

&lt;p&gt;To be useful, all programming languages have to have a few basic components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Input &amp;amp; Output (IO)
    &lt;ul&gt;
      &lt;li&gt;Interacting with the “outside world”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Assignment
    &lt;ul&gt;
      &lt;li&gt;Storing and retrieving data from memory (aka Variables)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Math &amp;amp; Logic
    &lt;ul&gt;
      &lt;li&gt;Combining numbers and true/false conditions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Control flow
    &lt;ul&gt;
      &lt;li&gt;Using results of true/false conditions to control execution&lt;/li&gt;
      &lt;li&gt;Repeating instructions under certain conditions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Structural Organization
    &lt;ul&gt;
      &lt;li&gt;Functions, Classes, objects, source files, interfaces, templates, etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)#History&quot;&gt;The C programming language&lt;/a&gt; is the OG of high level languages. It wasn’t the first of its type, but it was by far the most successful. It struck just the right balance between providing nice high-level programming language abstractions, without getting so high level as to become convoluted and bloated with useless features.&lt;/p&gt;

&lt;p&gt;It was introduced in the late 1970’s, tightly tied with the development of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix&quot;&gt;Unix operating system&lt;/a&gt; at &lt;a href=&quot;https://en.wikipedia.org/wiki/Bell_Labs&quot;&gt;Bell Labs&lt;/a&gt;. The initial goal was to provide a high-level language for writing utilities for the OS. It evolved quickly to be the language that the operating system itself was written in.&lt;/p&gt;

&lt;p&gt;The amazing thing is that as other languages have come and gone, C has remained the de-facto standard for anyone looking to write software with the highest performance, highest efficiency, or most hardware interaction. C++ and Rust are starting to supplant it in a few places, but C is still by far king for operating system and embedded system development. The fact any programming language has lasted these 40+ years is a true testament to good design.&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;In our next post, we will look into the details of the syntax of the C programming language, to see how it implements these components to accomplish the goals of a high-level programming language. See &lt;a href=&quot;/blog_posts/2019/07/28/programming_language_c_syntax.html&quot;&gt;C Syntax here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Let us change our traditional attitude to the construction of programs. Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - Donald Knuth</summary></entry><entry><title type="html">Processor Architecture</title><link href="/blog_posts/2019/07/22/vonneumann.html" rel="alternate" type="text/html" title="Processor Architecture" /><published>2019-07-22T09:31:00-05:00</published><updated>2019-07-22T09:31:00-05:00</updated><id>/blog_posts/2019/07/22/vonneumann</id><content type="html" xml:base="/blog_posts/2019/07/22/vonneumann.html">&lt;p&gt;&lt;em&gt;People who are more than casually interested in computers should have at least some idea of what the underlying hardware is like. Otherwise the programs they write will be pretty weird. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Oooh boy, I am getting excited! More excited than a &lt;a href=&quot;https://en.wikipedia.org/wiki/File_Explorer#Search_companion&quot;&gt;search companion who can do tricks!&lt;/a&gt; Things are starting to get very real now!&lt;/p&gt;

&lt;p&gt;We’ve introduced a ton of topics in boolean logic - how to manipulate bits, store them, and use them to represent numbers. It’s time to start digging into how all this comes together to build a real device which can do computation!&lt;/p&gt;

&lt;h2 id=&quot;the-von-neumann-architecture&quot;&gt;The Von Neumann Architecture&lt;/h2&gt;

&lt;h3 id=&quot;overall&quot;&gt;Overall&lt;/h3&gt;

&lt;p&gt;Through his work, Von Neumann described a generic &lt;em&gt;architecture&lt;/em&gt; for how to construct and lay-out electronic components to fulfill Turing’s requirements. This description has been coined the “Von Neumann Architecture”. It should be noted that since almost all modern processors follow the architecture to some extent, the phrase “Von Neumann Architecture” actually refers more to the set of ideas, rather than one particular design.&lt;/p&gt;

&lt;p&gt;Von Neumann divided his world up into four very-high-level components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt; - A device capable of saving and recalling pieces of information.
    &lt;ul&gt;
      &lt;li&gt;Might be broken into multiple parts
        &lt;ul&gt;
          &lt;li&gt;Read-only vs. Read/Write&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Roughly analogous to the “Tape” in the Turing Machine&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Processor Unit&lt;/strong&gt; - A device capable of performing a calculation on pieces of information.
    &lt;ul&gt;
      &lt;li&gt;Possible calculations:
        &lt;ul&gt;
          &lt;li&gt;Math (add subtract multiply divide etc.)&lt;/li&gt;
          &lt;li&gt;Logic (and or not)&lt;/li&gt;
          &lt;li&gt;Comparison (greater than, less than, equal to)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Roughly equivalent to the “Head” in the Turing Machine&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Control Unit&lt;/strong&gt; - A device to provide coordination between all other units
    &lt;ul&gt;
      &lt;li&gt;Produces the control signals that configure all other units&lt;/li&gt;
      &lt;li&gt;Produces the &lt;em&gt;correct&lt;/em&gt; signals to implement the Universal Turing Machine&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IO&lt;/strong&gt; - A set of devices capable of transforming information between representations useful to computers, and representations useful to humans.
    &lt;ul&gt;
      &lt;li&gt;Screens, mice, keyboards, etc.&lt;/li&gt;
      &lt;li&gt;Implementation is device specific, but the key is that on one end is an interface that works well with the computer (bits and bytes), and on the other end is a physical thing a human can manipulate or sense.&lt;/li&gt;
      &lt;li&gt;In our Turing Machine association, this is just the way a human can manipulate or interact with the device or the tape.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;processing-unit&quot;&gt;Processing Unit&lt;/h3&gt;

&lt;p&gt;Storing data is cool, but to do useful processing we have to, well, process the data. Back when we learned about boolean logic, we saw all sorts of ways to mash bits together. The goal now is to build a circuit which can do all the useful things for us.&lt;/p&gt;

&lt;p&gt;The collection of circuitry which does the calculations is generally referred to as the &lt;em&gt;Arithmetic Logic Unit&lt;/em&gt;, or ALU. It gets its own fancy-pants symbol that looks like a sideways pair of pants:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ALU.png&quot; alt=&quot;ALU&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Implementations on various processors will vary slightly, but conceptually they all have to have at least 3 inputs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A and B - the operands. A and B are the binary numbers we’re going to mash together&lt;/li&gt;
  &lt;li&gt;CTRL - the signals that say &lt;em&gt;how&lt;/em&gt; to mash A and B together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, the set of these three inputs produces the result of the requested calculation.&lt;/p&gt;

&lt;p&gt;Keeping with our 32-bit theme, we assume that the ALU is set up to do calculations on 32-bit inputs, and produces a 32-bit result. Other processors may assume otherwise, but this is just our example for now.&lt;/p&gt;

&lt;p&gt;CTRL can be any number of bits - it just depends on how many different ways you want to be able to combine the inputs A and B together. For example, if you have 12 combination strategies implemented, you’ll need &lt;script type=&quot;math/tex&quot;&gt;\lceil log_{2}(12) \rceil = 4&lt;/script&gt; bits.&lt;/p&gt;

&lt;p&gt;The simplest practical architecture I’ve seen has a very small ALU with only three operations supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitwise AND&lt;/li&gt;
  &lt;li&gt;Bitwise NOT&lt;/li&gt;
  &lt;li&gt;Addition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s pretty bare-bones. FOr example, to do &lt;script type=&quot;math/tex&quot;&gt;A - B&lt;/script&gt;, , you have to first negate the B operand (which requires a bitwise NOT, then adding 1), then adding A and (-B). Subtraction is a 3 step process, which kinda stinks.&lt;/p&gt;

&lt;p&gt;Larger ALU’s will support more operations, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bitwise OR/NOR/NAND, Subtraction
    &lt;ul&gt;
      &lt;li&gt;Keeps common operations down to a single step&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multiplication, Integer Division, Remainder after division
    &lt;ul&gt;
      &lt;li&gt;Expanded math abilities on integers&lt;/li&gt;
      &lt;li&gt;Note that floating point (decimal) numbers are frequently handled by a different unit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Bitwise XOR
    &lt;ul&gt;
      &lt;li&gt;Super useful for cryptographic and computer security operations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Shift bits left and right by one
    &lt;ul&gt;
      &lt;li&gt;super fast way to multiply or divide by 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Increment, decrement
    &lt;ul&gt;
      &lt;li&gt;Super-optimized versions of common math operations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What set of operations are supported really just depends on processor design. Increasing the number of supported operations increases speed to a point, but always at increased cost and increased potential for things to break.&lt;/p&gt;

&lt;p&gt;Conceptually, putting together an ALU is remarkably straightforward. Just package all the circuits which do the operations you want individually, feed them each off of the provided inputs, and use a MUX driven by the CTRL input to select which calculation makes it to the output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/aluInternals.png&quot; alt=&quot;inside ALU&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to these combination operations, the ALU will often have additional outputs to indicate if the operation resulted in overflow or underflow (ie, result was outside the min or max range of the numbers that can be represented by the 32 bits of the ALU).&lt;/p&gt;

&lt;h3 id=&quot;control-unit&quot;&gt;Control Unit&lt;/h3&gt;

&lt;p&gt;The control unit is the heart of this whole system, coordinating the action of registers and the ALU together to do actual calculation. The design of the unit is special tailored to implement the stored-program concept. Again, the exact design of the control unit can vary, but all have to have at least a few basic components and abilities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnit.png&quot; alt=&quot;Control Unit Top Level&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;registers&quot;&gt;Registers&lt;/h4&gt;

&lt;p&gt;Fundamentally, every control unit will have a set of registers to store information. These will be faster than the bulk RAM chips you’re familiar with, and serve special uses within the processor. But, fundamentally, they just store a specific set of bits representing some specific, meaningful quantity.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Memory Address Register&lt;/em&gt; (MAR) and &lt;em&gt;Memory Data Register&lt;/em&gt; (MDR) are two of the key registers. They are connected directly to the RAM circuitry, and allow the control unit to command unit to read or write from a specific memory address. Along with a couple control signals, the basic process is that the memory address register is first loaded with the desired address. Then, control signals are sent to memory to read or write that address. For read, the data is pulled off the RAM chip and placed into the MDR. Write does similarly, but propagates whatever value was in the MDR (from the control unit’s other parts) and puts it into the address in RAM specified by the MAR. Using this, the control unit can &lt;em&gt;read and write RAM data&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Two more registers form the core of the stored program concept. The processor fundamentally assumes that the instructions it is supposed to execute exist in memory at a certain set of memory instructions. The &lt;em&gt;Program Counter&lt;/em&gt; (PC) register stores the memory address of the current instruction being worked on. The &lt;em&gt;Instruction Register&lt;/em&gt; (IR) holds the actual instruction while its being worked on.&lt;/p&gt;

&lt;p&gt;There are also a set of registers called &lt;em&gt;General Purpose Registers&lt;/em&gt; (GPR*). These don’t have a very specific purpose, they are left open for the programmer to use as they see fit while writing programs.&lt;/p&gt;

&lt;p&gt;Depending on how the IO devices are designed, there may be some dedicated registers attached to physical, user-interaction input or output devices.&lt;/p&gt;

&lt;h4 id=&quot;system-bus&quot;&gt;System Bus&lt;/h4&gt;

&lt;p&gt;As introduced with the tri-state buffer, we know that we can connect multiple digital outputs “together” forming a Bus topology. Von Neumann introduced the idea of a System Bus, where registers (and other components) read and wrote data to a central set of wires. This made interconnects easier, and made checking system functionality more straightforward. Modern processors may use more than one system bus to allow for faster data transfer, but for our purposes we will only consider one.&lt;/p&gt;

&lt;h4 id=&quot;the-execution-cycle&quot;&gt;The Execution Cycle&lt;/h4&gt;

&lt;p&gt;Most control units follow a repeating three-step process while running:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fetch&lt;/li&gt;
  &lt;li&gt;Decode&lt;/li&gt;
  &lt;li&gt;Execute.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitFetch.png&quot; alt=&quot;Control Unit Fetch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the &lt;em&gt;Fetch&lt;/em&gt; phase, the control unit fetches the next instruction. The Program Counter register is used to populate the Memory Address Register. Then a read is commanded from the RAM chip, and the result in the Memory Data Register is moved to the Instruction Register.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitDecode.png&quot; alt=&quot;Control Unit Decode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the &lt;em&gt;Decode&lt;/em&gt; phase, the contents of the instruction are analyzed to see what is commanded. Control signals to other parts of the processor are adjusted based on the contents of the instruction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitMath.png&quot; alt=&quot;Control Unit Execute - Math&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During the &lt;em&gt;Execute&lt;/em&gt; phase, the actual requested actions are carried out. The Program Counter is updated to a new value (usually the next memory address in sequence). The drawing above shows an example where the ALU is used to do math.&lt;/p&gt;

&lt;h4 id=&quot;decoding--executing-an-instruction&quot;&gt;Decoding &amp;amp; Executing an Instruction&lt;/h4&gt;

&lt;p&gt;Generally, instructions will command manipulations to registers. Some examples of these:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Math - Add two general purpose registers, and store the result in a 3rd general purpose register&lt;/li&gt;
  &lt;li&gt;Memory - Load a general purpose register from RAM, or store its contents to RAM&lt;/li&gt;
  &lt;li&gt;“Branching” - Manually adjust the Program Counter if the previous instruction’s result was positive&lt;/li&gt;
  &lt;li&gt;IO - reading/writing from some input or output device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instructions will always have two main components: the &lt;em&gt;opcode&lt;/em&gt; and the &lt;em&gt;arguments&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Remember that each instruction is just a set of bits. Usually, the first couple bits is the &lt;em&gt;opcode&lt;/em&gt;, which identify what the instruction is requesting.&lt;/p&gt;

&lt;p&gt;The exact mapping of &lt;em&gt;which&lt;/em&gt; bits equate to &lt;em&gt;which&lt;/em&gt; operations is dependant on the details of the processor construction. &lt;a href=&quot;http://ref.x86asm.net/coder32.html&quot;&gt;Here’s an example from x86&lt;/a&gt;, which is by far one of the more complex versions.&lt;/p&gt;

&lt;p&gt;Simpler machines might have a mapping more like:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;opcode&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Abrev.&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0001&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Add&lt;/td&gt;
      &lt;td&gt;Add two numbers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0010&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Sub&lt;/td&gt;
      &lt;td&gt;Subtract two numbers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0011&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;OR&lt;/td&gt;
      &lt;td&gt;Bitwise OR of two numbers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0100&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;AND&lt;/td&gt;
      &lt;td&gt;Bitwise AND of two numbers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0101&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NOT&lt;/td&gt;
      &lt;td&gt;Bitwise NOT of a numbers&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0111&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;STR&lt;/td&gt;
      &lt;td&gt;Store a value to memory&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;LD&lt;/td&gt;
      &lt;td&gt;Load a value from memory&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1001&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BRN&lt;/td&gt;
      &lt;td&gt;Branch to a different instruction if the previous result was negative&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1010&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;BRZ&lt;/td&gt;
      &lt;td&gt;Branch to a different instruction if the previous result was zero&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And so on. Note that when you see assembly instructions, you’ll almost always see it referred to by its abbreviation, not by the 1’s and 0’s of the opcode. It’s hard to stare at the 1’s a 0’s, your eyes start to go crossed after a while.&lt;/p&gt;

&lt;p&gt;The remaining bits are dedicated to the arguments to the opcode. They indicate the specifics of how the processor is to carry out the instruction.&lt;/p&gt;

&lt;p&gt;For instructions like Add, Subtract, AND, OR, etc. - the simplest set of arguments indicates a trio of general purpose registers to work with. Usually the arguments will be specified to say “source 1 register”, “source 2 register”, and “result register”. NOT would only need two registers, but is conceptually the same. When the Instruction Register has AND for an opcode, the control unit will use the arguments to configure the signal routing in the processor to pipe the two source register outputs into the ALU, and then the ALU’s output into the result register. One tick of the system clock goes by, the result register is updated, and the instruction is completed!&lt;/p&gt;

&lt;p&gt;Opcodes that work with memory addresses (BRN/BRZ,LD/STR) will often make one of the arguments the memory address to work with. More complex “addressing modes” allow the address to be specified relative to the program counter, or some general purpose register.&lt;/p&gt;

&lt;h4 id=&quot;choosing-the-next-instruction&quot;&gt;Choosing the Next Instruction&lt;/h4&gt;

&lt;p&gt;Generally, after all decoding and execution has been completed, the Program Counter has to be updated with the next address. Frequently, this just means “add one” to the current program counter. However, the instruction might have some more complex instruction. “Branch” instructions generally alter the add-one behavior conditionally, based on the previous result being positive, zero, or negative (PZN register stores this information every instruction cycle).&lt;/p&gt;

&lt;p&gt;The manner in which they alter it can vary far and wide. Usually it involves some offset from the current PC - rather than going to the next instruction, you skip forward by some larger number of addresses, or maybe backward by five addresses… something like that. The size of the jump may be encoded into the instruction word itself, or pulled from a general purpose register, or lots of other options really. At the end of the day, it’s just up to how the instruction is interpreted again to select which calculation is used to update the PC prior to the next execution cycle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/nextInstructionDecode.png&quot; alt=&quot;next instruction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The net result is the same though - the PC gets loaded with the address of the next instruction to run, and the cycle may start over!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/controlUnitNextInstruction.png&quot; alt=&quot;next instruction calc&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;io-techniques&quot;&gt;IO techniques&lt;/h3&gt;

&lt;p&gt;In general, any input and output device will have to interact with the processor via some set of bits. For example, a mouse might report its X/Y coordinates as two integers. A screen might require representing every pixel color with one byte of data. Regardless of how it’s actually done, just keep in mind that at the end of the day, it’s just a set of bits that are read from, or go to, the device.&lt;/p&gt;

&lt;p&gt;How the processor gets access to these bits happens through two primary methods:&lt;/p&gt;

&lt;h4 id=&quot;port-mapped&quot;&gt;Port Mapped&lt;/h4&gt;

&lt;p&gt;Some processors will have dedicated registers inside the control unit for reading and writing data associated with a user IO device. This also means there will have to be dedicated assembly instructions for manipulating that data as part of a program. THis is a very fast method, but can be a bit inflexible, as the processor has to be designed with assumptions about what its IO devices will be. This is bad if you plug or unplug a device from your computer.&lt;/p&gt;

&lt;h4 id=&quot;memory-mapped&quot;&gt;Memory Mapped&lt;/h4&gt;

&lt;p&gt;Sometimes, a more flexible technique is to use the same interface the RAM circuitry uses. The IO device “poses” as part of the RAM chip, responding to processor read and write requests just as a RAM chip would. But, rather than storing and recalling data as requested by a processor, the “other end” of each byte is hooked up to some IO device.&lt;/p&gt;

&lt;p&gt;This means there are no special assembly instructions required to do IO interaction. As a software writer, you just have to know things like “Memory addresses 0x0000154A and 0x0000154B are mouse X/Y” and “Memory addresses 0x00002000 through 0x00002FFF control the pixels on the screen”. Don’t use these special memory addresses like normal memory (ie, writing to the mouse addresses will probably not end well). But, it’s much more flexible than forcing a Port Mapped architecture.&lt;/p&gt;

&lt;p&gt;But, there are plenty of tradeoffs on both sides. You’ll probably see both as you adventure into this wonderful world of processors!&lt;/p&gt;

&lt;h2 id=&quot;concrete-examples-of-architecture&quot;&gt;Concrete Examples of Architecture&lt;/h2&gt;

&lt;p&gt;So far, we’ve stuck to generic descriptions of the common things you find inside a processor. Lots of descriptions have just been these hand-wavey “well the actual implementation depends on the processor type”. For the curious, we now present three concrete examples of computer architecure.&lt;/p&gt;

&lt;h3 id=&quot;lc-3&quot;&gt;LC-3&lt;/h3&gt;

&lt;p&gt;The “LC-3”, or “Little Computer 3”, is a “fake” architecture. You’ll not find an off-the-shelf chip that implements the “LC-3” architecture. But, it’s a dirt simple architecture - fixed opcode and word widths, simple operations, conveniently sized RAM… the list goes on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lumetta.web.engr.illinois.edu/120-F16/slide-copies/100-the-lc-3-isa.pdf&quot;&gt;There are a good number&lt;/a&gt; &lt;a href=&quot;https://www.cs.utexas.edu/users/fussell/courses/cs310h/lectures/Lecture_10-310h.pdf&quot;&gt;of online resources&lt;/a&gt; &lt;a href=&quot;http://www.ncsa.illinois.edu/People/kindr/teaching/ece190_sp11/lectures/lecture_11.pdf&quot;&gt;that explain the architecture&lt;/a&gt; - some even down to the gate level. It’s simple enough that the blog author implemented the processor, gate level up, as part of a sophomore year elective class.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;It’s a great place to start, but unfortunately doesn’t directly map to any real architecture. However, the concepts you learn while studying it definitely do apply!&lt;/p&gt;

&lt;h3 id=&quot;x86&quot;&gt;x86&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/X86&quot;&gt;x86 Processor Architecture&lt;/a&gt; comes from Intel, and dates back to the late 1970’s. Over the years they have added lots and lots of new instructions to it, expanded the data width size, and a whole slew of other alterations, all while keeping the base thing backward compatible. This makes for a &lt;em&gt;very&lt;/em&gt; versatile and &lt;em&gt;very&lt;/em&gt; powerful processor. The biggest downsides are all rooted in the complexity of the devices - infinite backward compatibility makes for a lot of “legacy” portions of the architecture that aren’t relevant for modern programming. Additionally, you need a &lt;em&gt;lot&lt;/em&gt; of gates to make an x86 processor, which generally means they are power hungry (though this has been mitigated in recent years).&lt;/p&gt;

&lt;p&gt;Still, the sheer flexibility and power of the architecture means almost every desktop PC (running Windows, Mac, or Linux) has some form of an x86 processor in it, and tons of manufacturers produce a flavor of the architecture.&lt;/p&gt;

&lt;p&gt;This was the second assembly language the author learned. Along with three other students, he wrote an operating system from scratch using C and x86 assembly. &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;arm&quot;&gt;ARM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ARM_architecture&quot;&gt;Advanced RISC Machine&lt;/a&gt; architecture is the new “big kid” on the block. Specifically designed to address some of the x86 shortcomings, it quickly made a name for itself for its simplicity of implementation (therefor requiring fewer transistors, and drawing less power). It came along at just the right time to be adopted by the smartphone revolution, and nearly all smartphones on the market today run some form of this processor. It’s strongly suited toward running mobile, power-sensitive applications. The roboRIO uses an ARM Cortex-A9 processor manufactured by Xilinx.&lt;/p&gt;

&lt;h3 id=&quot;the-place-of-the-special-purpose-computing-device&quot;&gt;The Place of the Special-Purpose Computing Device&lt;/h3&gt;

&lt;p&gt;This whole blog post, we’ve been discussing how to made a digital device which can perform general purpose computation. This isn’t to say that general purpose computers are the be-all, end-all of computation. Indeed, the ability to be programmed brings overhead with it. In the fetch/decode/execute cycle, fetch and decode are both only present because the processor has to figure out &lt;em&gt;what&lt;/em&gt; it is supposed to be doing at runtime, in addition to actually doing it.&lt;/p&gt;

&lt;p&gt;For this reason, when bleeding edge speed or absolutely minimal power consumption is required, it &lt;em&gt;sometimes&lt;/em&gt; still makes sense to give up the ability to be programmed to gain that speed or efficiency. Digital Devices can still be custom designed to fit a very specific purpose. These are often called &lt;em&gt;Application Specific Integrated Circuits&lt;/em&gt; (ASIC’s).&lt;/p&gt;

&lt;p&gt;Common applications include video/audio processing, computer networking devices, and scientific research equipment.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Phew, that was a lot, and way more hand-wavey than I had initially intended. None the less, we still have built up an understanding of what the main components of a processor are, how those things come to be from smaller digital circuits, and how they can execute individual stored instructions.&lt;/p&gt;

&lt;p&gt;Next up, we’ll take a survey of common programming language constructs, and later dig into how those constructs might be implemented in assembly code. Keep reading at &lt;a href=&quot;/blog_posts/2019/07/28/programming_language_intro.html&quot;&gt;Programming Languages Introduction!&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Lots of students &lt;a href=&quot;https://www.google.com/search?safe=active&amp;amp;rlz=1C1CHBF_enUS840US840&amp;amp;ei=JIUuXcOzF8m4tAbC4bv4Cw&amp;amp;q=uiuc+ece+385+github&amp;amp;oq=uiuc+ece+385+github&amp;amp;gs_l=psy-ab.3..0i22i30.3858.5509..6305...0.0..0.107.585.6j1......0....1..gws-wiz.......0i71j0.a87FJGr1gW8&quot;&gt;post their solutions on github&lt;/a&gt;, which seems like a violation of academic integrity, if you ask me. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Again, lots of students &lt;a href=&quot;https://www.google.com/search?q=uiuc+ece+391+github&amp;amp;rlz=1C1CHBF_enUS840US840&amp;amp;oq=uiuc+ece+391+github&amp;amp;aqs=chrome..69i57.5400j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&quot;&gt;decided to post their solutions online&lt;/a&gt;. Tisk tisk. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">People who are more than casually interested in computers should have at least some idea of what the underlying hardware is like. Otherwise the programs they write will be pretty weird. - Donald Knuth</summary></entry><entry><title type="html">Processor Architecture Primer</title><link href="/blog_posts/2019/07/22/processor_arch_primer.html" rel="alternate" type="text/html" title="Processor Architecture Primer" /><published>2019-07-22T09:30:00-05:00</published><updated>2019-07-22T09:30:00-05:00</updated><id>/blog_posts/2019/07/22/processor_arch_primer</id><content type="html" xml:base="/blog_posts/2019/07/22/processor_arch_primer.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;We’re on the verge of being able to describe all the main components of real processors! Huzzah, we are well on our way to getting real software up and running! Get excited!&lt;/p&gt;

&lt;p&gt;As one final preparation step, we want to do two things - set the historical scene for &lt;em&gt;what problem&lt;/em&gt; the design of the first processors was solving. We also want to explore a less-common but very-useful digital device called a “tri-state” buffer that will be key to our processor design function.&lt;/p&gt;

&lt;h2 id=&quot;some-history&quot;&gt;Some History&lt;/h2&gt;

&lt;p&gt;Way back in the day, if you had a lot of math to do, you would hire a &lt;a href=&quot;https://en.wikipedia.org/wiki/Human_computer&quot;&gt;human computer&lt;/a&gt; - literally, a person whose job it was to do computations. You gave them a set of instructions as to what math to do, and they came back with a set of numbers. Not a glamorous job, but it did pay the bills. If you had big calculations to do, you’d hire lots of them and find ways to divide the work. If you wanted to ensure accuracy, you’d hire twice as many as needed and have them both independently solve the same problem (and check the results).&lt;/p&gt;

&lt;p&gt;Obviously, there are some big limitations to this system. Humans make mistakes, grueling hours of arithmetic isn’t exactly the most fun way to spend your work day, and there’s only so fast that a human can do math. You can’t take a big problem and subdivide it efficiently between a million people, as the complexity of re-combining the results starts to outweigh the benefits of doing work in parallel. Due to these limitations, and the ever-increasing scope of work, there was a need to expand the computing capability of the scientific community in general.&lt;/p&gt;

&lt;p&gt;Toward the end of World War I and into World War II, there was an expanding notion of using machines to do rapid computation. The proximity to war-time meant a lot of the computation applications were, well, war-driven. &lt;a href=&quot;https://en.wikipedia.org/wiki/Enigma_machine&quot;&gt;Cryptography&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Bomba_(cryptography)&quot;&gt;attempting to break cryptography&lt;/a&gt;, calculating artillery trajectories, analyzing the feasibility of an atomic bomb…. Some simply calculated differential equations, but again the majority of the funding was pushed toward war-time effort.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/wwII.png&quot; alt=&quot;My mother is proud of my artwork.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These machines were quite large. Remember that the transistor had not yet been invented. The logic gates we have studied were conceptually still in use, but to implement them engineers had to use vacuum tubes or electro-mechanical switches. Additionally, the first machines were effectively hard-coded to do one single job. The government would come in and say “Johnson! We need a machine to help shoot shells at the enemy better! Here’s the equations, figure it out!” And then Johnson would go wire up one machine to do the job, and come back with an answer, and then the machine would be useless. Well, not entirely useless. But still, to do a different job (or even just tweak the equations), you had to spend lots of time re-designing parts of the circuitry, have technicians come in and physically re-wire the thing, test it all out, and hope you didn’t make any mistakes in the process.&lt;/p&gt;

&lt;p&gt;Given the need for speed in reprogramming, a group of engineers set out to design a machine which was much more easily reprogrammable. The quest was for a “general purpose” computer, which could do arbitrary computations as needed, and did not take a team of technicians to re-wire every time computational problem changed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/8c/Two_women_operating_ENIAC_%28full_resolution%29.jpg&quot; alt=&quot;Eniac programming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Alan_Turing&quot;&gt;Alan Turing&lt;/a&gt; provided a key portion of the theoretical background for the general purpose computer. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_machine&quot;&gt;“Turing Machine”&lt;/a&gt; is a formal mathematical description of what sorts of devices can perform general computation. His papers show both what sorts of problems are “computable” (ie solved with an algorithm, acting only with numbers, math, and logic), and what criteria a machine must have to solve an arbitrary problem. This ability to solve an arbitrary problem is what makes a computer “general-purpose”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/turing_machine.png&quot; alt=&quot;Turing Machine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The classic demonstration of a simple Turing Machine involves a very large piece of magnetic tape, and a &lt;em&gt;Head&lt;/em&gt; - a device capable of moving along the tape, with the ability to read and write information from defined locations on the tape. The simple implementation is still problem specific - the instructions for how it reads, writes, and moves are hard-coded into the specific Turing Machine. Turing himself showed the possibility of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Universal_Turing_machine&quot;&gt;“Universal Turing Machine”&lt;/a&gt;, which has a single programmed behavior to read the actual instructions from the tape itself. Therefor, the machine did not have to be changed, only the instructions stored in the tape. This is the basis of the “stored program” concept.&lt;/p&gt;

&lt;p&gt;As-described, the actual Turing Machine is &lt;a href=&quot;https://www.youtube.com/watch?v=FTSAiF9AHN4&quot;&gt;not particularly practical to build&lt;/a&gt;. It presumes a mechanical analogy, which fundamentally limits speed and size. Still, the theoretical background was required to provide the constraints on &lt;em&gt;how&lt;/em&gt; to hook up an electronic circuit such that the end result would ultimately solve the problem. Turing effectively provided the input constraints, and pass-fail criteria for the stored-program, general-purpose computer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/John_von_Neumann&quot;&gt;John Von Neumann&lt;/a&gt; was another other major player in the early development of these stored-program computers. He is usually credited for leading the charge of transforming Turing’s theoretical work into a practical implementation of a general-purpose computer. He was highly involved in the design and development of &lt;a href=&quot;https://en.wikipedia.org/wiki/EDVAC&quot;&gt;EDVAC&lt;/a&gt; and later &lt;a href=&quot;https://en.wikipedia.org/wiki/ENIAC&quot;&gt;ENIAC&lt;/a&gt;, two of the first useful stored-program machines. The design we are about to study is the design he is largely credited for inventing.&lt;/p&gt;

&lt;p&gt;As a side note, both Turing and Von Neumann were crazy smart people, with scientific contributions well beyond the processor architecture we are studying.. Given all they did, its almost a disservice to think of them as the founders of the modern computer, as their influence in the scientific community was much broader.&lt;/p&gt;

&lt;h3 id=&quot;stored-program&quot;&gt;Stored Program&lt;/h3&gt;

&lt;p&gt;The “stored program” is really the key to unlocking programming efficiency and making computers general-purpose. A stored program is exactly what it sounds like. The program, or set of instructions for operation, is stored in a memory bank somewhere.&lt;/p&gt;

&lt;p&gt;This memory bank has to be purpose-designed to be easily manipulated. Data must be stored and retrieved at will, usually without direct human intervention (ie, no technician coming by to move wires).&lt;/p&gt;

&lt;p&gt;A stored program machine has to have the ability to know where these instructions are at, read them, determine their meaning, and carry out that meaning. This adds a bit of complexity to the machine, but it’s a one-time effort to add the complexity. It’s also a bit slower - any stored program machine has to spend at least some of its time just determining what the next instruction is, rather than carrying out “useful” computations. Finally, stored-program will always be less optimized. Since it’s not always possible to know exactly what the next set of instructions will be, it takes away some opportunities to optimize the speed &amp;amp; resource utilization of the algorithm.&lt;/p&gt;

&lt;p&gt;For this reason, there are still many special-purpose computers out there - high speed network interfaces and graphics cards are two common examples. The need for speed outstrips the need for flexibility.&lt;/p&gt;

&lt;p&gt;Still though, the stored-program, general purpose machine is the de-facto standard. Despite the potential limitations, it’s still much better than the alternatives. Just remember how much effort it takes to wire your whole robot up. Now imagine software team had a bug, so the only way to fix it is to re-wire the whole thing. That wouldn’t be fun. Stored program is the way to go.&lt;/p&gt;

&lt;h2 id=&quot;tri-state-buffer&quot;&gt;Tri-State Buffer&lt;/h2&gt;

&lt;p&gt;Before we start digging into how Von Neumann specified digital components should interact with each other, we will want to cover one more digital device. Actually, it’s not &lt;em&gt;technically&lt;/em&gt; digital because sit has three states, but let’s not get too technical.&lt;/p&gt;

&lt;p&gt;The Tri-State buffer introduces a third state to our binary system &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;: “Z”. Z stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/High_impedance&quot;&gt;“High Impedance”&lt;/a&gt;, which (in this context) is an excessively formal way of saying “not plugged in”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/triState.png&quot; alt=&quot;Tri state buffer symbol&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;CTRL&lt;/th&gt;
      &lt;th&gt;In&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The device has two inputs - one for data (In) and one for controlling the state of the output (CTRL). When CTRL is 1, the input is passed straight to the output without alteration - basically, a &lt;em&gt;wire&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When CTRL is 0, the output is forced to the Z “High impedance” state, effectively “unplugging” input from output. Basically, a &lt;em&gt;broken wire&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The usefulness of such a device is that it enables us to physically connect multiple digital device outputs to the same physical wire, and select which one of them is &lt;em&gt;electrically connected&lt;/em&gt; to the wire. This selection ability means we can control which device dictates the binary 1/0 state of the bus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/triStateUsageSimple.png&quot; alt=&quot;Tri state buffer Usage - C on the bus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we see three digital devices with outputs linked. Since the buffer at the output of C has a control signal of 1, we know the final output will be the same as C. It can be said then that Digital Device C is controlling Output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/triStateUsageSimple2.png&quot; alt=&quot;Tri state buffer Usage - A on the bus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, we can setup A to control Output by turning off CTRL for C, and then turning on CTRL for A.&lt;/p&gt;

&lt;p&gt;When you have a setup like this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The wire downstream of all of the tri-state buffers is referred to as the “Bus”.&lt;/li&gt;
  &lt;li&gt;When the tri-state buffer is active, the device is said to &lt;em&gt;assert&lt;/em&gt; its output onto the bus.&lt;/li&gt;
  &lt;li&gt;When the tri-state buffer is active, the device is &lt;em&gt;active&lt;/em&gt; on the bus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obviously this is a 1-bit demonstration, but you can easily put 8, 32, or 64 of these together to make a bus that is one &lt;em&gt;word&lt;/em&gt; wide. The number of bits in a bus is its &lt;em&gt;width&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As readers may have already noticed - only one device can assert its output onto the bus at the same time. If two devices attempt to assert onto the bus at the same time, and they assert different boolean values, you’ll find yourself with a short circuit and magic smoke in no time. For this reason, the devices have to be coordinated somehow to ensure only one is active on the bus at a time.&lt;/p&gt;

&lt;h3 id=&quot;the-system-data-bus&quot;&gt;The System Data Bus&lt;/h3&gt;

&lt;p&gt;System Data bus is a common set of wires that transfers data from one device to another. A quick taste of what’s to come: at the core of the Von Neumann architecture is a data bus that is used by all components to transfer data back and forth. Each device has a set of tri-state buffers on its output so it can selectively take control of the bus, or allow some other device to assert its data. Additionally, each device has some ability to read the value from the bus, and pull it internally (to do something useful with it, presumably?).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/systemBusBasic.png&quot; alt=&quot;Basic system bus concept&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this case we’ve chosen to draw a 32-bit wide bus (like most processors up till a few years ago had).&lt;/p&gt;

&lt;h2 id=&quot;register-load-and-store&quot;&gt;Register Load and Store&lt;/h2&gt;

&lt;p&gt;From previous, we know how to “gang” multiple D flip flops together to make what we call a “register”, which can store one &lt;em&gt;word&lt;/em&gt;’s worth of bits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/register.png&quot; alt=&quot;4 bit register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we started with a 32-bit bus, let’s also keep 32 bits here.&lt;/p&gt;

&lt;p&gt;Along with the system bus, imagine if each device is a slightly modified register. We’ll go ahead and use the little circuit created as part of an alarm clock to put a mux on the input to the register. We’ll also add our tri-state buffer output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/registerWithWriteEnable.png&quot; alt=&quot;useful Von Neumann architecture register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have the addition of the “Write Enable” enable input to choose whether the register is to load a new value from the data input or preserve its previous value. The “Output Enable” signal allows us to choose whether the output is active or not, allowing this register to be placed as a device on a system data bus with other registers.&lt;/p&gt;

&lt;p&gt;We can draw the following symbol for an abstraction of this device:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/32bitRegister.png&quot; alt=&quot;32 bit register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These registers will make up the core of data storage on the processor, and will be a key component going forward.&lt;/p&gt;

&lt;p&gt;To demonstrate how they are used, take as an example 3 registers sharing a 32-bit data bus:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/registersOnABus.png&quot; alt=&quot;registers on a bus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We now have a system where we can systematically transfer data from one register to another. We have to have something coordinating the write &amp;amp; output enables for all of the registers together - however, assuming you do, it’s actually quite easy to move data around now.&lt;/p&gt;

&lt;p&gt;Say you have a number in register A that you want to move to register C. Before the clock has a rising edge, you simply set register A’s &lt;em&gt;Output Enable&lt;/em&gt; to 1, and register C’s &lt;em&gt;Write Enable&lt;/em&gt; to 1 (and everything else to 0). Then, on the rising edge of the clock, the value from A will end up in register C, while B remains unchanged.&lt;/p&gt;

&lt;p&gt;We will notate this sort of transfer with a shorthand description:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A \rightarrow C&lt;/script&gt;

&lt;p&gt;This simply indicates that on this particular clock cycle, we transfer the value from A into C.&lt;/p&gt;

&lt;p&gt;This is often called “Register Transfer Language”, and is the basis of the way we’ll describe how data gets transferred around in a processor. The key to remember is that behind every description of &lt;script type=&quot;math/tex&quot;&gt;A \rightarrow C&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;B \rightarrow A&lt;/script&gt;, it’s just a set of enable bits getting set correctly, such that data flows from from the source to the destination.&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;That’s enough history and context-less introduction. Please promptly check out &lt;a href=&quot;/blog_posts/2019/07/22/vonneumann.html&quot;&gt;Von Neumann Processor Architecture&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;For the curious, formal systems of modeling the state of analog electronics in a “digital-useful” way can &lt;a href=&quot;https://en.wikipedia.org/wiki/Logic_level&quot;&gt;go up to having 9 states&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Digital Devices Part Two - Sequential Logic</title><link href="/blog_posts/2019/07/06/digital_devices_part2.html" rel="alternate" type="text/html" title="Digital Devices Part Two - Sequential Logic" /><published>2019-07-06T09:30:00-05:00</published><updated>2019-07-06T09:30:00-05:00</updated><id>/blog_posts/2019/07/06/digital_devices_part2</id><content type="html" xml:base="/blog_posts/2019/07/06/digital_devices_part2.html">&lt;p&gt;This post is the continuation of &lt;a href=&quot;/blog_posts/2019/06/26/digital_devices.html&quot;&gt;Part 1&lt;/a&gt; in our series on digital devices.&lt;/p&gt;

&lt;h2 id=&quot;combinational-versus-sequential-logic&quot;&gt;Combinational versus Sequential Logic&lt;/h2&gt;

&lt;p&gt;So far, we have discussed circuits which take a set of inputs, and produce an output. They do not “remember” any particular piece of information - their outputs are a function current inputs only. They keep no record of past inputs. These are called &lt;em&gt;Combinational Logic&lt;/em&gt; circuits.&lt;/p&gt;

&lt;p&gt;As we mentioned earlier in the case of the astronaut button, sometimes it is useful to remember information about past information. Circuitry which accomplishes this memory is called &lt;em&gt;Sequential Logic&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All the logic gates we’ve shown so far are by themselves combinational devices. However, we’ll now introduce a class of devices where outputs are &lt;em&gt;carefully&lt;/em&gt; fed back into inputs, allowing the device to retain information over time. We will be able to build these up into a full RAM chip, just like you have on your computer to store information!&lt;/p&gt;

&lt;h2 id=&quot;flip-flop&quot;&gt;Flip Flop&lt;/h2&gt;

&lt;p&gt;The most fundamental unit of memory storage is usually referred to as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;&lt;em&gt;flip flop&lt;/em&gt;&lt;/a&gt;. Much like the beach-oriented footwear, they flip and flop back and forth between true and false, with transitions triggered by certain input conditions. They also come in a number of different flavors. The easiest to analyze at first is often called the “SR Latch”, which we’ll look into as an example. Then we’ll abstract away the details and talk about a few other varieties.&lt;/p&gt;

&lt;h3 id=&quot;gate-propagation-delay&quot;&gt;Gate Propagation Delay&lt;/h3&gt;

&lt;p&gt;One thing we haven’t touched on yet - how long does it take a gate to do a calculation? So far we’ve kinda just ignored it - effectively assumed the answer is “infinitely fast”. Of course, nothing is infinitely fast. Voltages can’t change instantaneously, electrons take time to move around! When you apply a certain input combination to a gate, the reaction is quite quick - usually on the order of &lt;em&gt;nanoseconds&lt;/em&gt;. However, it’s not literally instantaneous. &lt;a href=&quot;https://en.wikipedia.org/wiki/Propagation_delay&quot;&gt;&lt;em&gt;Propagation delay&lt;/em&gt;&lt;/a&gt; is the name given to this duration between applying inputs, and seeing the correct output.&lt;/p&gt;

&lt;p&gt;This is yet another example of abstraction. For combinational logic, we are able to ignore this gate delay - assuming it is faster than anything we would ever care about (ie &lt;em&gt;instantaneous&lt;/em&gt;). For sequential logic, understanding the function of our new flip-flop friends requires we at least keep this delay in mind.&lt;/p&gt;

&lt;h3 id=&quot;basic-flip-flop-ideas&quot;&gt;Basic Flip Flop Ideas&lt;/h3&gt;

&lt;p&gt;The key to any flip-flop - we take the output, and route it back to an input. Due to gate delay, this effectively makes the “previous output” an input. When the previous output is an input, we can use it to remember what the output &lt;em&gt;used&lt;/em&gt; to be. With some clever design, we can in fact make some useful memory happen.&lt;/p&gt;

&lt;p&gt;The SR Latch consists of two &lt;em&gt;cross-coupled&lt;/em&gt; NAND gates, hooked up like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/c6/R-S_mk2.gif&quot; alt=&quot;SR Latch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wikipedia has the best picture of this I’ve seen so far, so I use theirs.&lt;/p&gt;

&lt;p&gt;The &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; input is for “Set”, and the &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; input is for “Reset”. The output is named &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt;. Note by the GIF:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When you set &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; to 1 and &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; to 0, this will cause the &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; output to go to 1&lt;/li&gt;
  &lt;li&gt;When you set &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; to 0 and &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; to 1, this will cause the &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; output to go to 0&lt;/li&gt;
  &lt;li&gt;When you set both &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; to 0, it causes &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; to maintain its value&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Number 3 is the magic of the device - by leaving both inputs at 0, your output retains its previous value. This illustrates how you can hook gates up in a way to remember something about the previous inputs.&lt;/p&gt;

&lt;p&gt;Note how the loop-back of outputs back into input only makes sense if you assume gate delays are present. There is a &lt;em&gt;very&lt;/em&gt; slight delay between a change in input and a change in output, as shown in the gif. If you assume things change instantaneously, you get logical conflicts and are setting 1 equal to 0 (which implies a short circuit, which usually means &lt;a href=&quot;https://en.wikipedia.org/wiki/Magic_smoke&quot;&gt;magic smoke&lt;/a&gt; is getting out ). But, due to gate delays, for carefully designed circuits this is not a problem. When you buy the real chips that have SR Latches in them, the silicon has been carefully designed to make the gate delays &lt;em&gt;just right&lt;/em&gt; so this all works out. And then you as the user don’t have to worry about it. Yay abstraction!&lt;/p&gt;

&lt;p&gt;The astute reader may notice that there is a key flaw &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; to this configuration: Look what happens if you set both inputs to 1. Starting near &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; - &lt;script type=&quot;math/tex&quot;&gt;\overline{1 + Q} = \overline{Q}&lt;/script&gt;, meaning &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; is equal to &lt;script type=&quot;math/tex&quot;&gt;\overline{Q}&lt;/script&gt;. Wait a minute. True can’t be equal to False. Huh.&lt;/p&gt;

&lt;p&gt;In reality what happens here depends on how your gates are constructed with transistors (you have to go one layer down in the layers of abstraction). You might get oscillation, or maybe short circuits and magic smoke. Depends. No matter what, setting both inputs to 1 is a bad idea. Due to this, it’s common to put additional gates in front of the S and R inputs to facilitate ensuring you never get the latch into a wacky state.&lt;/p&gt;

&lt;h3 id=&quot;the-clock-signal&quot;&gt;The Clock Signal&lt;/h3&gt;

&lt;p&gt;To properly motivate the specific flavor of flip-flop that we will be talking about, we will first take a tangent into a bit of processor design.&lt;/p&gt;

&lt;p&gt;Think about when you read about specifications for a processor. One of the most common specs you read about is the processor’s speed, which is measured in some units of &lt;em&gt;Hertz&lt;/em&gt;. Modern desktop processors are rated to run at around 2 to 3 GHz (Giga-Hertz, or &lt;script type=&quot;math/tex&quot;&gt;10^{9}&lt;/script&gt; Cycles per Second). This speed rating roughly corresponds to the number of operations the processor can do per second. But what it &lt;em&gt;really&lt;/em&gt; references to is the &lt;em&gt;clock speed&lt;/em&gt; of the processor &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Clock_signal&quot;&gt;&lt;em&gt;clock&lt;/em&gt;&lt;/a&gt; in a digital circuit is just a specially-designated signal. The clock cycles repeatedly between 1 and 0 and 1 and 0 at some specific frequency. Digital devices are designed to take a clock signal as one of their inputs to help it to stay in synchronization with other devices in the system.&lt;/p&gt;

&lt;p&gt;Circuits are designed such that at every &lt;em&gt;edge&lt;/em&gt; of the clock, or every transition from 0 to 1 (or so we will assume for now), it is assumed that all inputs to a particular digital device are &lt;em&gt;stable&lt;/em&gt; and therefore &lt;em&gt;available&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The maximum clock speed is dictated by the worst-case propagation delay from the circuits that make up the system. If you have constructed some circuit with 10 AND gates passing each output to the next one’s input - you have to wait 10 times the gate delay before you know that your output is stable. Assuming that output goes to another circuit’s input, and they share a clock, you can’t run your clock faster than each portion of the circuit can update the inputs of the next portion.&lt;/p&gt;

&lt;p&gt;This is why reducing the number of layers of gates is important - the fewer layers you have, the less input to output delay you have, and the faster you can run your digital circuit’s clock. This means faster computation, which is generally regarded as a good thing!&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h4 id=&quot;but-mommy-where-do-baby-clocks-come-from&quot;&gt;But Mommy, Where do Baby Clocks Come From?&lt;/h4&gt;

&lt;p&gt;Don’t worry child, we will tell you when you are older.&lt;/p&gt;

&lt;p&gt;Actually, it doesn’t matter too much for our design purposes. This is the beauty of abstraction - you don’t need to know &lt;em&gt;how&lt;/em&gt; a clock signal is generated to &lt;em&gt;use&lt;/em&gt; it. But for the curious, we will indulge you momentarily.&lt;/p&gt;

&lt;p&gt;A clock is just a repeating waveform, and can be derived from any repeating pattern in nature. Common ways of generating it include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting it from the power line (usually a nice 60Hz in North America, unless your &lt;a href=&quot;https://en.wikipedia.org/wiki/Utility_frequency#Stability&quot;&gt;power company screws up&lt;/a&gt;.)&lt;/li&gt;
  &lt;li&gt;Repeatedly charging and discharging a capacitor through a resistor and a non-linear switching circuit (for example, see &lt;a href=&quot;https://en.wikipedia.org/wiki/555_timer_IC&quot;&gt;“555 timer” circuit design&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Amplifying the vibrations of a specially-designed &lt;a href=&quot;https://en.wikipedia.org/wiki/Crystal_oscillator&quot;&gt;crystal made of quartz.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/NIST-F2&quot;&gt;Using lasers to toss caesium atoms in the air then measuring their atomic energy state decay&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xkcd.com/730/&quot;&gt;A whole host of other things&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition, there’s a whole science to distributing this clock signal carefully to all the circuit elements, so they actually receive nice clean 0-to-1 transitions at the same time. Especially when clock frequencies get high, those wires inside your processor start to act less like ideal wires, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_line&quot;&gt;more like radio antennas&lt;/a&gt;. It gets mucky fast.&lt;/p&gt;

&lt;p&gt;We don’t like to think about all this at once. So we use our powers of &lt;em&gt;abstraction&lt;/em&gt; to simply say &lt;em&gt;we trust a clock signal exists and works well, now we will use it&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-d-flip-flop-from-gates&quot;&gt;The D flip-flop from Gates.&lt;/h3&gt;

&lt;p&gt;Here’s our design goal - we want to build a device where we can predictably control when the output changes based on some clock signal input. We will have a single input that dictates when the &lt;em&gt;next&lt;/em&gt; output will be, and when the clock input &lt;em&gt;changes&lt;/em&gt; from 0 to 1, we will update our output to match our input. At all other times, the output should retain its state.&lt;/p&gt;

&lt;p&gt;We do this by cascading multiple SR latches together, such that an input, or some feedback value, “drops through” each layer as the clock swings from 0 to 1. Neglecting gate propagation delay, the 0 to 1 &lt;em&gt;rising edge&lt;/em&gt; of the clock will be the event that ultimately causes a new input to appear at the output.&lt;/p&gt;

&lt;p&gt;I am again in debt to Wikipedia for providing some images of gate configurations. Far easier than drawing it myself, and equally correct.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Edge_triggered_D_flip_flop.svg/1920px-Edge_triggered_D_flip_flop.svg.png&quot; alt=&quot;Edge Triggered D Flip Flop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It might be a bit hard to trace the functionality, but it’s actually pretty straightforward. When the input labeled &lt;em&gt;Clock&lt;/em&gt; goes from a 0 to a 1, the output &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; takes on whatever value is applied at the &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; input. &lt;script type=&quot;math/tex&quot;&gt;\overline{Q}&lt;/script&gt; is of course always the inverse of &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h3&gt;

&lt;p&gt;When you draw out one of these devices in a circuit diagram, it’s actually confusing to do it with gates. Astute document readers might recognize “oh that’s a D flip flop!”. But in reality, you don’t want to make people think about that, you just want them to know it. So, there’s a fairly generic symbol that gets drawn:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/D-Type_Flip-flop.svg/1920px-D-Type_Flip-flop.svg.png&quot; alt=&quot;D Flip Flop symbol from Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ports are labeled about as you’d expect from above. The little notched &lt;script type=&quot;math/tex&quot;&gt;&gt;&lt;/script&gt; indicates the clock input.&lt;/p&gt;

&lt;p&gt;The &lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt; ports are often omitted from other drawings. They will force the output to 1 (&lt;script type=&quot;math/tex&quot;&gt;S&lt;/script&gt;) or 0 (&lt;script type=&quot;math/tex&quot;&gt;R&lt;/script&gt;) immediately, regardless of the value of the clock or &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt;. This is useful for a &lt;em&gt;reset&lt;/em&gt; circuit, which (when activated) puts all the devices into a known state. This is useful when first powering on (or rebooting) your computer - depending on the exact transistor layout, the state of each flip flop may not be guaranteed when you first apply power to the circuit. Some might be 1, some might be 0…who knows. To get around this, designers usually just build in the ability to force every piece of the circuit to a known state.&lt;/p&gt;

&lt;h3 id=&quot;but-why-a-clock&quot;&gt;But, Why a Clock?&lt;/h3&gt;

&lt;p&gt;The reason for triggering on the rising edge is for &lt;em&gt;synchronization&lt;/em&gt; across the larger system. Think about a computer chip - you’ll have many many many of these memory components spread throughout your processor, RAM, peripherals, device drivers, etc. You want to be sure that they all change state at the same time, so you design your circuit with a rising-edge paradigm in mind. Namely - when the clock is not having a rising edge, you have that whole time to do all the combinational logic. Signals propagate around, change gate state, do calculations and whatnot…. you can do whatever you like in this time, just as long as &lt;em&gt;all Flip Flop inputs&lt;/em&gt; and stable before the &lt;em&gt;next clock rising edge&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of completeness, it should be noted that digital circuits are often &lt;em&gt;falling edge&lt;/em&gt; triggered. This changes the circuit design a bit, but the concept remains the same. It doesn’t matter if your clock goes “1 0 1 0…” or “0 1 0 1…”. General design principles would say to keep all your devices the same - all rising edge or all falling edge triggered. But even this can be violated if you’re careful enough. Not worth focusing on too much now, but just for awareness - rising-ege isn’t the only option.&lt;/p&gt;

&lt;h2 id=&quot;counter&quot;&gt;Counter&lt;/h2&gt;

&lt;p&gt;Let’s put together a circuit combining two things we have just learned about - adders and flip flops. Our goal will be to build a device which keeps track of time, counting the number of clock cycles. To keep things simple, we’re going to pretend that we’re building a clock for planet Zorgon. It’s a zippy but precise planet, revolving once around its axis once every 16 seconds exactly. Our Zorgon clock therefor just needs to count up from 0 to 15 to track all the seconds in the day, then reset back to 0 after the 15th second (when it is the next day).&lt;/p&gt;

&lt;p&gt;If you recall from the binary lesson, if we have 4 bits and treat them as an unsigned integer, we can exactly represent the numbers 0 through 15 (since &lt;script type=&quot;math/tex&quot;&gt;15 = (2^{4}-1&lt;/script&gt;)). They don’t call Zorgon the “Planet of Simplifying Mathematical Coincidences” for nothing!&lt;/p&gt;

&lt;p&gt;To store the present time, we will use 4 D flip flops in parallel. This is nothing fancy, just creating a new digital device with three main ports. A 4-bit input, with one bit going to the &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; input each flip flop. The 4-bit output comes directly from the individual &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; bits at the output of each flip flop. The clock input is still one bit, and drives all flip flop clocks simultaneously. Effectively, we’ve created a flip flop that stores 4 bits at a time, rather than one. This device is often called a &lt;em&gt;register&lt;/em&gt;&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/register.png&quot; alt=&quot;4 bit register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rather than drawing all 4 gates every time, we’ll put all this in a nice little box labeled “Register”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/4bitRegister.png&quot; alt=&quot;4 bit register abstraction symbol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note the little “/” marks on the input and output ports with the number &lt;script type=&quot;math/tex&quot;&gt;4&lt;/script&gt; below it. That’s just a notation way to say “here are four wires that should remain together”. You should always think of those four bits together as representing “time of day”, so we’ll draw them together to help not confuse the reader. Some programs may use a thicker line to show the “bundle” of data wires.&lt;/p&gt;

&lt;p&gt;We will make the assumption that we have a clock signal that already runs at 1 Hz (this is not hard to create). &lt;em&gt;Hz&lt;/em&gt; (abbreviation for “Hertz”) means “cycles per second”. Since each cycle of the clock waveform has exactly one rising edge and one falling edge, we expect once per second our (rising edge triggered) flip flops will propagate their input to the output.&lt;/p&gt;

&lt;p&gt;Here’s the key to the design: the &lt;em&gt;output&lt;/em&gt; of the register will be used to represent the &lt;em&gt;present&lt;/em&gt; time on Zorgon. Every rising edge of the clock, we will want to increase the present time by 1 (since, of course, time goes forward). To do this, we need to ensure that at all times, the input to the register is the current time, plus 1. This will ensure that when the clock has a rising edge, the new time (cur_time + 1) is propagated to the output, and the output (representing current time) updates properly.&lt;/p&gt;

&lt;p&gt;We’ll take a quick shortcut to represent our four bit adder from last time as one block:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/4bitAdder.png&quot; alt=&quot;4 bit adder abstraction symbol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Inside the box” we’ve accounted for the fact that the carry-in signal is hardcoded to 0, and the carry out signal is unused and not connected.&lt;/p&gt;

&lt;p&gt;We’ll hook up a circuit like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/zorgonClock.png&quot; alt=&quot;Zorgon Clock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see our 4-bit ripple carry adder, like we had &lt;a href=&quot;/blog_posts/2019/06/26/digital_devices.html&quot;&gt;last time&lt;/a&gt;. That “constant value” of 1 is achieved by simply connecting the 0th bit to a high voltage, and all the other bits to ground.&lt;/p&gt;

&lt;p&gt;There! With just a few components, we’re able to create a circuit that keeps track of the present time of (Zorgon) day, and outputs it in a binary format!&lt;/p&gt;

&lt;h3 id=&quot;a-zorgon-alarm-clock&quot;&gt;A Zorgon Alarm Clock&lt;/h3&gt;

&lt;p&gt;Knowing the current time of day is cool, but what if you want to be notified at a certain time every day? Say, for example, the time you want to wake up at! This is a device most folks would call an &lt;em&gt;alarm clock&lt;/em&gt;. As the english name suggests, we could start with our clock, and add an alarm circuit to it.&lt;/p&gt;

&lt;p&gt;The alarm circuit is simple. We shall define it as such: it takes two inputs: the current time of day, and the desired time of alarm. Current time comes from our existing clock circuit, and desired alarm time has to come as input from the user. If you want to be woken up by your alarm on the 4th second of the day, you would provide the input bits &lt;script type=&quot;math/tex&quot;&gt;0100_2&lt;/script&gt;. Providing user input in digital circuits like this is usually just done through switches that selectively tie digital signals to ground or 5V. Something like &lt;a href=&quot;https://www.jameco.com/z/78B04ST-Grayhill-DIP-Switch-On-Off-Single-Pole-Single-Throw-4-Raised-Slide-0-15-Amp-30-Volt-PC-Pins-2000-Cycle-2-5mm-Through-Hole-Tube_696950.html?%20CID=GOOG&amp;amp;gclid=Cj0KCQjwgezoBRDNARIsAGzEfe7hcHovtbSrxWYDnhEjBbvDTIrS4ydOLhCMUV2kU8dR8l9B52EvHOcaAtGKEALw_wcB&quot;&gt;this&lt;/a&gt; - you’ve possibly seen these in old garage door openers? Maybe? Or maybe I’m getting old.&lt;/p&gt;

&lt;p&gt;In any case, we will define that the output of our alarm circuitry is a single bit. It shall be 1 when the current time matches the alarm time, and 0 otherwise. We’ll assume it’s hooked up to some loud buzzer, or a motor that drives a 2x4 into your skull, or releases a flock of penguins, or something “alerting” of that nature. But through the power of abstraction, we will simply leave it at 1 = “alert” and 0 = “no alert”.&lt;/p&gt;

&lt;p&gt;To calculate the output, we need to calculate if the two inputs are &lt;em&gt;exactly&lt;/em&gt; equal. Doing this across four bits is quite trivial - for two four-bit numbers to be &lt;em&gt;exactly&lt;/em&gt; equal, it just means that every one of their bits is equal.&lt;/p&gt;

&lt;p&gt;Recall that the output of an XOR gate reports when two bits are different (1 for different, 0 for same). By putting an inverter on the output of an XOR gate, we’ve created an XNOR gate, which produces 1 when the bits are the same, but 0 when they are different.&lt;/p&gt;

&lt;p&gt;Similarly, a 4-input AND gate will output 1 when all 4 inputs are true, and 0 otherwise (1 or more inputs are 0).&lt;/p&gt;

&lt;p&gt;Combining these together in a circuit like this, we create a simple box which outputs a boolean to indicate “are my two 4-bit inputs exactly equal” &lt;sup id=&quot;fnref:4:1&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/alarm_circuit.png&quot; alt=&quot;Alarm Comparison Circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we’ve used names A and B for the 4-bit inputs (A consists of A_0, A_1, A_2, and A_3). A is the current time, B is the set time from the user (though order technically won’t matter).&lt;/p&gt;

&lt;p&gt;We’ll wrap this circuit up into a nice little box that compares two four-bit numbers for equality:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/compareEq.png&quot; alt=&quot;Compare Equality abstraction symbol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can then hook this guy up to our existing clock circuit, and we suddenly can be woken up at the proper time on planet Zorgon!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/zorgonAlarmClock.png&quot; alt=&quot;Zorgon Alarm Clock Circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Huzzah!&lt;/p&gt;

&lt;h3 id=&quot;too-close-to-home&quot;&gt;Too close to home&lt;/h3&gt;

&lt;p&gt;“But But But!”, you say. “We live on planet Earth! A Zorgon clock is useless for day to day life!”. I hear you, and do not disagree. Let’s think through what we’d have to do to make this clock work on Earth (where there are &lt;script type=&quot;math/tex&quot;&gt;24 * 60 * 60 = 86400&lt;/script&gt; seconds in one day).&lt;/p&gt;

&lt;p&gt;For starters, we’ll need more bits. &lt;script type=&quot;math/tex&quot;&gt;log_{2}(86400) = 16.3984&lt;/script&gt;, so we’ll need at least 17 bits to represent the present “second of the day”. This should be easy enough - just expand both the register and the adder to have 17 bits, and re-connect wires.&lt;/p&gt;

&lt;p&gt;The second problem is that on Zorgon, the counter “rolled over” back to 0 at just the right time. This is because of the way binary addition works when you have a fixed set of output bits:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;0001_{2} + 1111_{2} = 10000_{2}&lt;/script&gt; But because of how the ripple-carry adder is implemented, that top bit “drops off”, or is otherwise discarded. This leaves the result of the addition operation as &lt;script type=&quot;math/tex&quot;&gt;0000_{2} = 0_{10}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Earth is not nearly as nice. We have to manually reset the count back to zero on the start of each day. Let us create a “new-day-detection” circuit which uses that same comparison logic in the Alarm Clock to check whether the current second count is the last second of the day (second &lt;script type=&quot;math/tex&quot;&gt;86399_{10} = 10101000101111111_2&lt;/script&gt; ). When all 17 bits of the current time are exactly equal to the last second of the day, the logic outputs a 1.&lt;/p&gt;

&lt;h4 id=&quot;the-mux&quot;&gt;The MUX&lt;/h4&gt;

&lt;p&gt;There is another combinational logic device I’d like to quickly introduce you to - it’s called a &lt;em&gt;multiplexer&lt;/em&gt;, or &lt;em&gt;mux&lt;/em&gt; for short. It has a set of input signals, some &lt;em&gt;select lines&lt;/em&gt;, and a single output. Based on the value at the &lt;em&gt;select line&lt;/em&gt; inputs, the appropriate input is propagated to the output.&lt;/p&gt;

&lt;p&gt;From similar reasoning that we used above, the number of select lines required is equal to &lt;script type=&quot;math/tex&quot;&gt;\lceil log_{2}(N) \rceil&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; is the number of distinct inputs to be selected between.&lt;/p&gt;

&lt;p&gt;A non-traditional looking truth table will summarize this behavior succinctly:&lt;/p&gt;

&lt;p&gt;For a mux with data inputs A and B:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;SEL&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Out&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Perhaps more traditionally for the case where A and B are both 1 bit:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;SEL&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;OUT&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You could go create this out of individual gates at this point - an exercise which is left up to the user.&lt;/p&gt;

&lt;p&gt;Just like we’ve ganged &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; flip-flops together in parallel to make an &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; bit register, you can also gang &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; 1-bit mux’s together to make an &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt; bit mux, which is what we’ll need for Earth clock.&lt;/p&gt;

&lt;p&gt;The multiplexer is used enough that it gets its own special symbol. Here’s one drawn where A and B are both 4 bits wide.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mux.png&quot; alt=&quot;Multiplexer symbol&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;new-dawn&quot;&gt;New Dawn&lt;/h4&gt;

&lt;p&gt;In particular, when our “new day detection” circuitry indicates that the next second is the start of a new day (and the current time should therefor be 0), we can use that 1-bit output and a mux to switch the value of the input to the registers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/earthAlarmClock.png&quot; alt=&quot;Simple Earth Alarm Clock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we see that when our “next-day” detection logic indicates the next second should be 0, we pass in a constant value of all-0-bits to the input of the register. In all other cases, we continue to pass the same thing we used to pass - current time + 1.&lt;/p&gt;

&lt;p&gt;The alarm circuitry would need very little adjustment - only to increase the total number of input switches used to select the “alarm” time.&lt;/p&gt;

&lt;p&gt;And just like that, we’ve constructed a functional earth alarm clock. Good job team!&lt;/p&gt;

&lt;h2 id=&quot;ram&quot;&gt;RAM&lt;/h2&gt;

&lt;p&gt;While our alarm clock adventures have been fun, it turns most people &lt;a href=&quot;https://www.amazon.com/s?k=alarm+clock&amp;amp;ref=nb_sb_noss_2&quot;&gt;don’t build their alarm clocks from scratch.&lt;/a&gt;. The ones on the market have far more features and it rarely makes sense to build one yourself like we described, unless you want to just have some fun.&lt;/p&gt;

&lt;p&gt;Building your own RAM chips is also not recommended for anything except leisure. However, it’s worthwhile going over the basics of what features a piece of Random-Access Memory has to support, and propose one way of going about doing this with the circuits we know about.&lt;/p&gt;

&lt;h3 id=&quot;accessing-randomly&quot;&gt;Accessing Randomly&lt;/h3&gt;

&lt;p&gt;Computer Memory is a digital device which stores and recalls large chunks of data. As you may know, and as we already mentioned, RAM is an acronym which stands for “Random Access Memory” - it means that a user of a RAM chip can access any particular part of memory at any time. It also implies that the user can write a new value to any particular part of memory at any time. As a side note, the other common type of memory is called ROM, for “Read Only Memory”. This type can store information, but not change it.&lt;/p&gt;

&lt;p&gt;When reading and writing to a RAM chip, the &lt;em&gt;location&lt;/em&gt; where things are stored is referred to as an “address”. In general, on a chip, the addresses are just numbered 0, 1, 2, … up through the maximum size of the chip. When you see a chip say it can store 1 MB (&lt;a href=&quot;https://en.wikipedia.org/wiki/Megabyte&quot;&gt;megabyte&lt;/a&gt; ~= &lt;script type=&quot;math/tex&quot;&gt;10^6&lt;/script&gt; bytes), this refers to the quantity of addresses available for storing data. If each address refers to one byte, the memory is said to be &lt;em&gt;byte addressable&lt;/em&gt; and the addresses would go from 0 up through 1048576 or so.&lt;/p&gt;

&lt;p&gt;Think of addresses just like the addresses on houses. Each house has a mailbox, and each house has a number on it. When you want to “store” (ie give) data to a certain mailbox, you provide both the “data” (your package or letter) and the address to put it in. A mailman then does the job of storing the data in the right spot. The data remains there till the owner recalls it from the appropriate mailbox. The numbers of the address help coordinate the data going to the right spot, so the right person gets it back out.&lt;/p&gt;

&lt;p&gt;Of course, in real RAM, there’s usually no restrictions on who can read or write to each address - unlike in the US, where &lt;a href=&quot;https://www.law.cornell.edu/uscode/text/18/1702&quot;&gt;taking someone else’s mail is a felony&lt;/a&gt;. Computers are supposed to be general purpose computation devices, so it’s rare that hardware enforces read/write restrictions based on identity. This sort of security, if required, is usually added by software or specialized processor hardware.&lt;/p&gt;

&lt;h3 id=&quot;the-prototype-ram-chip&quot;&gt;The Prototype RAM Chip&lt;/h3&gt;

&lt;p&gt;Every RAM chip will have to have a few connections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An input for the address from which to read data&lt;/li&gt;
  &lt;li&gt;An output which contains the data recalled from the read address&lt;/li&gt;
  &lt;li&gt;An input for the address to which to write data&lt;/li&gt;
  &lt;li&gt;An input for the data to write at the write address&lt;/li&gt;
  &lt;li&gt;A clock to synchronize read/write operations with data input and output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Depending on what brand and model of RAM chip you have, you may see certain of these functions tied together (ie one address for read/write) or split apart (ie two clocks - one for read and one for write). Some have enable lines to turn on or off read/write functionality as needed. All these features are nice to have, but add cost and increase pin count. So, it’s all just an engineering tradeoff. Pick the RAM chip with all the features you &lt;em&gt;need&lt;/em&gt;, and that matches your budget.&lt;/p&gt;

&lt;p&gt;When a processor wants to store a value, the process is generally:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Assert the bits of value onto the data input&lt;/li&gt;
  &lt;li&gt;Assert the bits of the address onto the write address input&lt;/li&gt;
  &lt;li&gt;Allow the clock cycle to occur.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reading back a value is very similar:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Assert the bits of the address onto the read address input&lt;/li&gt;
  &lt;li&gt;Allow the clock cycle to occur&lt;/li&gt;
  &lt;li&gt;Read the value of the bits on the data output&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that most RAM chips do not store their value over power cycle. When you remove power from the device, all the data disappears. When you re-apply power, the device reads all 0’s or all 1’s (depends on the underlying technology).&lt;/p&gt;

&lt;h3 id=&quot;internals-of-a-theoretical-ram-chip&quot;&gt;Internals of a Theoretical RAM Chip&lt;/h3&gt;

&lt;p&gt;I don’t want to get too deep into how to design the internals of the RAM chip. This is because the actual way they are made is highly optimized (some using only a single transistor per bit storage), and it looks very dissimilar from the usual gate logic we think about digital logic in. Still, it is very possible to construct a RAM chip from only the gates and flip-flops we already know about, and is an interesting thought experiment to figure out how to make it happen.&lt;/p&gt;

&lt;p&gt;Here’s the highlights of a plausible (abet inefficient) way to do it - I’ll leave the details of the implementation up to the reader to sort out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each address has, at its core, an 8-bit register (same as above) to store the value.
    &lt;ul&gt;
      &lt;li&gt;Every register is fed from the same clock.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;One giant MUX at the output takes the read address input, and selects the proper register to pass to the output&lt;/li&gt;
  &lt;li&gt;Each register’s output loops back around to its input through a mux and some digital logic, such that the value &lt;em&gt;usually&lt;/em&gt; never changes (output of register fed right back to input).
    &lt;ul&gt;
      &lt;li&gt;However, that input logic is set up such that when the write address input matches that register’s address, the data from the write data input is used instead.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some key inefficiencies with this system, however:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Muxes which select between 1,000,000 inputs are ineffective to make as a single unit. It’s more efficient to split it up into lots of little tiny pieces.&lt;/li&gt;
  &lt;li&gt;At scale, gate delays may start to limit clock speed. Having additional buffers to temporarily store the read/write values while the internal circuitry changes state can help mitigate this
    &lt;ul&gt;
      &lt;li&gt;It’s worthwhile noting that in modern processors, RAM is usually asynchronous from and slower than the main processor. This can sometimes be part of the reason extra chips are needed on a motherboard to “drive” the RAM chips, converting data between the domain of the processor and the memory circuits.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The loop-back circuitry on every register can be eliminated by having two clocks (one for read, one for write), or some set of “enable bit” inputs that the processor controls - writes are commanded only when required.&lt;/li&gt;
  &lt;li&gt;The read-mux and write-mux circuitry can sometimes be combined into the inside of the register in an enable/disable fashion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info on “real” RAM chips, search around for “Memory Cell”, like on &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_cell_(computing)&quot;&gt;wikipedia&lt;/a&gt;. The key takeaway is that there are a huge number of different ways to implement RAM, but that shouldn’t matter. As far as the processor is concerned, it’s just an abstract device which can store and recall data from little mailboxes we call “addresses”&lt;/p&gt;

&lt;h2 id=&quot;next-steps---where-are-we-going&quot;&gt;Next Steps - Where are we going?&lt;/h2&gt;

&lt;p&gt;With the introduction of combinational circuits like adders and mux’s, and some sequential logic like registers and RAM, we’re now &lt;em&gt;almost&lt;/em&gt; ready to start delving into how these are combined together in a traditional processor. We’ll start to cover this in a primer discussion on &lt;a href=&quot;/blog_posts/2019/07/22/processor_arch_primer.html&quot;&gt;Processor Architecture&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Flaw - or &lt;em&gt;limitation&lt;/em&gt; or &lt;em&gt;opportunity&lt;/em&gt;. All words could apply, just pick the one that says what you want to say. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Or at least, it ought to. Sometimes the marketing department has other ideas. But we still like them, because they help sell the things, which makes money, and lets the engineers make more things, and have food to eat. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Turns out, because of gate delay, the ripple-carry adder is actually a bad design for an adder circuit. Think about what happens if you had 1000 stages. How long do you have to wait for the full result to be available? Think about how many gate propagations are needed to calculate the final carry-out signal. Dis nasty. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Forgive the odd drawing here - you can ignore the numbers right by the gates. I’m testing out using &lt;a href=&quot;http://kicad-pcb.org/&quot;&gt;KiCad&lt;/a&gt; for schematic capture and design. It’s a bit cumbersome for these educational purposes, but can draw simple logic diagrams well. Looks super powerful as an electronic schematic and printed circuit board design tool though! I highly recommend it so far! &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">This post is the continuation of Part 1 in our series on digital devices.</summary></entry></feed>